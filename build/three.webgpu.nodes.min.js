/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
import{Color as e,Vector2 as t,Vector3 as r,Vector4 as s,Matrix2 as i,Matrix3 as n,Matrix4 as a,EventDispatcher as o,MathUtils as u,WebGLCoordinateSystem as l,WebGPUCoordinateSystem as d,ColorManagement as c,SRGBTransfer as h,NoToneMapping as p,StaticDrawUsage as g,InterleavedBuffer as m,InterleavedBufferAttribute as f,DynamicDrawUsage as y,NoColorSpace as x,UnsignedIntType as b,IntType as T,NearestFilter as _,Sphere as v,BackSide as N,Euler as S,CubeReflectionMapping as w,CubeRefractionMapping as E,TangentSpaceNormalMap as A,ObjectSpaceNormalMap as R,InstancedInterleavedBuffer as C,InstancedBufferAttribute as M,DataArrayTexture as P,FloatType as L,FramebufferTexture as F,LinearMipmapLinearFilter as B,DepthTexture as D,Material as I,NormalBlending as V,LineBasicMaterial as U,LineDashedMaterial as O,NoBlending as k,MeshNormalMaterial as G,SRGBColorSpace as z,WebGLCubeRenderTarget as $,BoxGeometry as H,Mesh as W,Scene as j,LinearFilter as q,CubeCamera as X,CubeTexture as K,EquirectangularReflectionMapping as Y,EquirectangularRefractionMapping as Q,AddOperation as Z,MixOperation as J,MultiplyOperation as ee,MeshBasicMaterial as te,MeshLambertMaterial as re,MeshPhongMaterial as se,OrthographicCamera as ie,PerspectiveCamera as ne,RenderTarget as ae,CubeUVReflectionMapping as oe,BufferGeometry as ue,BufferAttribute as le,LinearSRGBColorSpace as de,RGBAFormat as ce,HalfFloatType as he,Texture as pe,MeshStandardMaterial as ge,MeshPhysicalMaterial as me,MeshToonMaterial as fe,MeshMatcapMaterial as ye,SpriteMaterial as xe,PointsMaterial as be,ShadowMaterial as Te,Uint32BufferAttribute as _e,Uint16BufferAttribute as ve,arrayNeedsUint32 as Ne,DoubleSide as Se,Camera as we,DepthArrayTexture as Ee,DepthStencilFormat as Ae,DepthFormat as Re,UnsignedInt248Type as Ce,UnsignedByteType as Me,Plane as Pe,Object3D as Le,LinearMipMapLinearFilter as Fe,Float32BufferAttribute as Be,UVMapping as De,VSMShadowMap as Ie,LessCompare as Ve,RGFormat as Ue,BasicShadowMap as Oe,SphereGeometry as ke,RenderTargetArray as Ge,LinearMipmapNearestFilter as ze,NearestMipmapLinearFilter as $e,Float16BufferAttribute as He,REVISION as We,ArrayCamera as je,PlaneGeometry as qe,FrontSide as Xe,CustomBlending as Ke,AddEquation as Ye,ZeroFactor as Qe,CylinderGeometry as Ze,Quaternion as Je,WebXRController as et,RAD2DEG as tt,PCFShadowMap as rt,FrustumArray as st,Frustum as it,DataTexture as nt,RedIntegerFormat as at,RedFormat as ot,ShortType as ut,ByteType as lt,UnsignedShortType as dt,RGIntegerFormat as ct,RGBIntegerFormat as ht,RGBFormat as pt,RGBAIntegerFormat as gt,warnOnce as mt,createCanvasElement as ft,ReverseSubtractEquation as yt,SubtractEquation as xt,OneMinusDstAlphaFactor as bt,OneMinusDstColorFactor as Tt,OneMinusSrcAlphaFactor as _t,OneMinusSrcColorFactor as vt,DstAlphaFactor as Nt,DstColorFactor as St,SrcAlphaSaturateFactor as wt,SrcAlphaFactor as Et,SrcColorFactor as At,OneFactor as Rt,CullFaceNone as Ct,CullFaceBack as Mt,CullFaceFront as Pt,MultiplyBlending as Lt,SubtractiveBlending as Ft,AdditiveBlending as Bt,NotEqualDepth as Dt,GreaterDepth as It,GreaterEqualDepth as Vt,EqualDepth as Ut,LessEqualDepth as Ot,LessDepth as kt,AlwaysDepth as Gt,NeverDepth as zt,UnsignedShort4444Type as $t,UnsignedShort5551Type as Ht,UnsignedInt5999Type as Wt,AlphaFormat as jt,RGB_S3TC_DXT1_Format as qt,RGBA_S3TC_DXT1_Format as Xt,RGBA_S3TC_DXT3_Format as Kt,RGBA_S3TC_DXT5_Format as Yt,RGB_PVRTC_4BPPV1_Format as Qt,RGB_PVRTC_2BPPV1_Format as Zt,RGBA_PVRTC_4BPPV1_Format as Jt,RGBA_PVRTC_2BPPV1_Format as er,RGB_ETC1_Format as tr,RGB_ETC2_Format as rr,RGBA_ETC2_EAC_Format as sr,RGBA_ASTC_4x4_Format as ir,RGBA_ASTC_5x4_Format as nr,RGBA_ASTC_5x5_Format as ar,RGBA_ASTC_6x5_Format as or,RGBA_ASTC_6x6_Format as ur,RGBA_ASTC_8x5_Format as lr,RGBA_ASTC_8x6_Format as dr,RGBA_ASTC_8x8_Format as cr,RGBA_ASTC_10x5_Format as hr,RGBA_ASTC_10x6_Format as pr,RGBA_ASTC_10x8_Format as gr,RGBA_ASTC_10x10_Format as mr,RGBA_ASTC_12x10_Format as fr,RGBA_ASTC_12x12_Format as yr,RGBA_BPTC_Format as xr,RED_RGTC1_Format as br,SIGNED_RED_RGTC1_Format as Tr,RED_GREEN_RGTC2_Format as _r,SIGNED_RED_GREEN_RGTC2_Format as vr,MirroredRepeatWrapping as Nr,ClampToEdgeWrapping as Sr,RepeatWrapping as wr,NearestMipmapNearestFilter as Er,NotEqualCompare as Ar,GreaterCompare as Rr,GreaterEqualCompare as Cr,EqualCompare as Mr,LessEqualCompare as Pr,AlwaysCompare as Lr,NeverCompare as Fr,NotEqualStencilFunc as Br,GreaterStencilFunc as Dr,GreaterEqualStencilFunc as Ir,EqualStencilFunc as Vr,LessEqualStencilFunc as Ur,LessStencilFunc as Or,AlwaysStencilFunc as kr,NeverStencilFunc as Gr,DecrementWrapStencilOp as zr,IncrementWrapStencilOp as $r,DecrementStencilOp as Hr,IncrementStencilOp as Wr,InvertStencilOp as jr,ReplaceStencilOp as qr,ZeroStencilOp as Xr,KeepStencilOp as Kr,MaxEquation as Yr,MinEquation as Qr,SpotLight as Zr,PointLight as Jr,DirectionalLight as es,RectAreaLight as ts,AmbientLight as rs,HemisphereLight as ss,LightProbe as is,LinearToneMapping as ns,ReinhardToneMapping as as,CineonToneMapping as os,ACESFilmicToneMapping as us,AgXToneMapping as ls,NeutralToneMapping as ds,Group as cs,Loader as hs,FileLoader as ps,MaterialLoader as gs,ObjectLoader as ms}from"./three.core.min.js";export{AdditiveAnimationBlendMode,AnimationAction,AnimationClip,AnimationLoader,AnimationMixer,AnimationObjectGroup,AnimationUtils,ArcCurve,ArrowHelper,AttachedBindMode,Audio,AudioAnalyser,AudioContext,AudioListener,AudioLoader,AxesHelper,BasicDepthPacking,BatchedMesh,Bone,BooleanKeyframeTrack,Box2,Box3,Box3Helper,BoxHelper,BufferGeometryLoader,Cache,CameraHelper,CanvasTexture,CapsuleGeometry,CatmullRomCurve3,CircleGeometry,Clock,ColorKeyframeTrack,CompressedArrayTexture,CompressedCubeTexture,CompressedTexture,CompressedTextureLoader,ConeGeometry,ConstantAlphaFactor,ConstantColorFactor,Controls,CubeTextureLoader,CubicBezierCurve,CubicBezierCurve3,CubicInterpolant,CullFaceFrontBack,Curve,CurvePath,CustomToneMapping,Cylindrical,Data3DTexture,DataTextureLoader,DataUtils,DefaultLoadingManager,DetachedBindMode,DirectionalLightHelper,DiscreteInterpolant,DodecahedronGeometry,DynamicCopyUsage,DynamicReadUsage,EdgesGeometry,EllipseCurve,ExtrudeGeometry,Fog,FogExp2,GLBufferAttribute,GLSL1,GLSL3,GridHelper,HemisphereLightHelper,IcosahedronGeometry,ImageBitmapLoader,ImageLoader,ImageUtils,InstancedBufferGeometry,InstancedMesh,Int16BufferAttribute,Int32BufferAttribute,Int8BufferAttribute,Interpolant,InterpolateDiscrete,InterpolateLinear,InterpolateSmooth,InterpolationSamplingMode,InterpolationSamplingType,KeyframeTrack,LOD,LatheGeometry,Layers,Light,Line,Line3,LineCurve,LineCurve3,LineLoop,LineSegments,LinearInterpolant,LinearMipMapNearestFilter,LinearTransfer,LoaderUtils,LoadingManager,LoopOnce,LoopPingPong,LoopRepeat,MOUSE,MeshDepthMaterial,MeshDistanceMaterial,NearestMipMapLinearFilter,NearestMipMapNearestFilter,NormalAnimationBlendMode,NumberKeyframeTrack,OctahedronGeometry,OneMinusConstantAlphaFactor,OneMinusConstantColorFactor,PCFSoftShadowMap,Path,PlaneHelper,PointLightHelper,Points,PolarGridHelper,PolyhedronGeometry,PositionalAudio,PropertyBinding,PropertyMixer,QuadraticBezierCurve,QuadraticBezierCurve3,QuaternionKeyframeTrack,QuaternionLinearInterpolant,RGBADepthPacking,RGBDepthPacking,RGB_BPTC_SIGNED_Format,RGB_BPTC_UNSIGNED_Format,RGDepthPacking,RawShaderMaterial,Ray,Raycaster,RenderTarget3D,RingGeometry,ShaderMaterial,Shape,ShapeGeometry,ShapePath,ShapeUtils,Skeleton,SkeletonHelper,SkinnedMesh,Source,Spherical,SphericalHarmonics3,SplineCurve,SpotLightHelper,Sprite,StaticCopyUsage,StaticReadUsage,StereoCamera,StreamCopyUsage,StreamDrawUsage,StreamReadUsage,StringKeyframeTrack,TOUCH,TetrahedronGeometry,TextureLoader,TextureUtils,TimestampQuery,TorusGeometry,TorusKnotGeometry,Triangle,TriangleFanDrawMode,TriangleStripDrawMode,TrianglesDrawMode,TubeGeometry,Uint8BufferAttribute,Uint8ClampedBufferAttribute,Uniform,UniformsGroup,VectorKeyframeTrack,VideoFrameTexture,VideoTexture,WebGL3DRenderTarget,WebGLArrayRenderTarget,WebGLRenderTarget,WireframeGeometry,WrapAroundEnding,ZeroCurvatureEnding,ZeroSlopeEnding}from"./three.core.min.js";const fs=["alphaMap","alphaTest","anisotropy","anisotropyMap","anisotropyRotation","aoMap","attenuationColor","attenuationDistance","bumpMap","clearcoat","clearcoatMap","clearcoatNormalMap","clearcoatNormalScale","clearcoatRoughness","color","dispersion","displacementMap","emissive","emissiveMap","envMap","gradientMap","ior","iridescence","iridescenceIOR","iridescenceMap","iridescenceThicknessMap","lightMap","map","matcap","metalness","metalnessMap","normalMap","normalScale","opacity","roughness","roughnessMap","sheen","sheenColor","sheenColorMap","sheenRoughnessMap","shininess","specular","specularColor","specularColorMap","specularIntensity","specularIntensityMap","specularMap","thickness","transmission","transmissionMap"];class ys{constructor(e){this.renderObjects=new WeakMap,this.hasNode=this.containsNode(e),this.hasAnimation=!0===e.object.isSkinnedMesh,this.refreshUniforms=fs,this.renderId=0}firstInitialization(e){return!1===this.renderObjects.has(e)&&(this.getRenderObjectData(e),!0)}needsVelocity(e){const t=e.getMRT();return null!==t&&t.has("velocity")}getRenderObjectData(e){let t=this.renderObjects.get(e);if(void 0===t){const{geometry:r,material:s,object:i}=e;if(t={material:this.getMaterialData(s),geometry:{id:r.id,attributes:this.getAttributesData(r.attributes),indexVersion:r.index?r.index.version:null,drawRange:{start:r.drawRange.start,count:r.drawRange.count}},worldMatrix:i.matrixWorld.clone()},i.center&&(t.center=i.center.clone()),i.morphTargetInfluences&&(t.morphTargetInfluences=i.morphTargetInfluences.slice()),null!==e.bundle&&(t.version=e.bundle.version),t.material.transmission>0){const{width:r,height:s}=e.context;t.bufferWidth=r,t.bufferHeight=s}this.renderObjects.set(e,t)}return t}getAttributesData(e){const t={};for(const r in e){const s=e[r];t[r]={version:s.version}}return t}containsNode(e){const t=e.material;for(const e in t)if(t[e]&&t[e].isNode)return!0;return null!==e.renderer.overrideNodes.modelViewMatrix||null!==e.renderer.overrideNodes.modelNormalViewMatrix}getMaterialData(e){const t={};for(const r of this.refreshUniforms){const s=e[r];null!=s&&("object"==typeof s&&void 0!==s.clone?!0===s.isTexture?t[r]={id:s.id,version:s.version}:t[r]=s.clone():t[r]=s)}return t}equals(e){const{object:t,material:r,geometry:s}=e,i=this.getRenderObjectData(e);if(!0!==i.worldMatrix.equals(t.matrixWorld))return i.worldMatrix.copy(t.matrixWorld),!1;const n=i.material;for(const e in n){const t=n[e],s=r[e];if(void 0!==t.equals){if(!1===t.equals(s))return t.copy(s),!1}else if(!0===s.isTexture){if(t.id!==s.id||t.version!==s.version)return t.id=s.id,t.version=s.version,!1}else if(t!==s)return n[e]=s,!1}if(n.transmission>0){const{width:t,height:r}=e.context;if(i.bufferWidth!==t||i.bufferHeight!==r)return i.bufferWidth=t,i.bufferHeight=r,!1}const a=i.geometry,o=s.attributes,u=a.attributes,l=Object.keys(u),d=Object.keys(o);if(a.id!==s.id)return a.id=s.id,!1;if(l.length!==d.length)return i.geometry.attributes=this.getAttributesData(o),!1;for(const e of l){const t=u[e],r=o[e];if(void 0===r)return delete u[e],!1;if(t.version!==r.version)return t.version=r.version,!1}const c=s.index,h=a.indexVersion,p=c?c.version:null;if(h!==p)return a.indexVersion=p,!1;if(a.drawRange.start!==s.drawRange.start||a.drawRange.count!==s.drawRange.count)return a.drawRange.start=s.drawRange.start,a.drawRange.count=s.drawRange.count,!1;if(i.morphTargetInfluences){let e=!1;for(let r=0;r<i.morphTargetInfluences.length;r++)i.morphTargetInfluences[r]!==t.morphTargetInfluences[r]&&(e=!0);if(e)return!0}return i.center&&!1===i.center.equals(t.center)?(i.center.copy(t.center),!0):(null!==e.bundle&&(i.version=e.bundle.version),!0)}needsRefresh(e,t){if(this.hasNode||this.hasAnimation||this.firstInitialization(e)||this.needsVelocity(t.renderer))return!0;const{renderId:r}=t;if(this.renderId!==r)return this.renderId=r,!0;const s=!0===e.object.static,i=null!==e.bundle&&!0===e.bundle.static&&this.getRenderObjectData(e).version===e.bundle.version;if(s||i)return!1;return!0!==this.equals(e)}}function xs(e,t=0){let r=3735928559^t,s=1103547991^t;if(e instanceof Array)for(let t,i=0;i<e.length;i++)t=e[i],r=Math.imul(r^t,2654435761),s=Math.imul(s^t,1597334677);else for(let t,i=0;i<e.length;i++)t=e.charCodeAt(i),r=Math.imul(r^t,2654435761),s=Math.imul(s^t,1597334677);return r=Math.imul(r^r>>>16,2246822507),r^=Math.imul(s^s>>>13,3266489909),s=Math.imul(s^s>>>16,2246822507),s^=Math.imul(r^r>>>13,3266489909),4294967296*(2097151&s)+(r>>>0)}const bs=e=>xs(e),Ts=e=>xs(e),_s=(...e)=>xs(e);function vs(e,t=!1){const r=[];!0===e.isNode&&(r.push(e.id),e=e.getSelf());for(const{property:s,childNode:i}of Ns(e))r.push(xs(s.slice(0,-4)),i.getCacheKey(t));return xs(r)}function*Ns(e,t=!1){for(const r in e){if(!0===r.startsWith("_"))continue;const s=e[r];if(!0===Array.isArray(s))for(let e=0;e<s.length;e++){const i=s[e];i&&(!0===i.isNode||t&&"function"==typeof i.toJSON)&&(yield{property:r,index:e,childNode:i})}else if(s&&!0===s.isNode)yield{property:r,childNode:s};else if("object"==typeof s)for(const e in s){const i=s[e];i&&(!0===i.isNode||t&&"function"==typeof i.toJSON)&&(yield{property:r,index:e,childNode:i})}}}const Ss=new Map([[1,"float"],[2,"vec2"],[3,"vec3"],[4,"vec4"],[9,"mat3"],[16,"mat4"]]),ws=new WeakMap;function Es(e){return Ss.get(e)}function As(e){if(/[iu]?vec\d/.test(e))return e.startsWith("ivec")?Int32Array:e.startsWith("uvec")?Uint32Array:Float32Array;if(/mat\d/.test(e))return Float32Array;if(/float/.test(e))return Float32Array;if(/uint/.test(e))return Uint32Array;if(/int/.test(e))return Int32Array;throw new Error(`THREE.NodeUtils: Unsupported type: ${e}`)}function Rs(e){return/float|int|uint/.test(e)?1:/vec2/.test(e)?2:/vec3/.test(e)?3:/vec4/.test(e)||/mat2/.test(e)?4:/mat3/.test(e)?9:/mat4/.test(e)?16:void console.error("THREE.TSL: Unsupported type:",e)}function Cs(e){if(null==e)return null;const t=typeof e;return!0===e.isNode?"node":"number"===t?"float":"boolean"===t?"bool":"string"===t?"string":"function"===t?"shader":!0===e.isVector2?"vec2":!0===e.isVector3?"vec3":!0===e.isVector4?"vec4":!0===e.isMatrix2?"mat2":!0===e.isMatrix3?"mat3":!0===e.isMatrix4?"mat4":!0===e.isColor?"color":e instanceof ArrayBuffer?"ArrayBuffer":null}function Ms(o,...u){const l=o?o.slice(-4):void 0;return 1===u.length&&("vec2"===l?u=[u[0],u[0]]:"vec3"===l?u=[u[0],u[0],u[0]]:"vec4"===l&&(u=[u[0],u[0],u[0],u[0]])),"color"===o?new e(...u):"vec2"===l?new t(...u):"vec3"===l?new r(...u):"vec4"===l?new s(...u):"mat2"===l?new i(...u):"mat3"===l?new n(...u):"mat4"===l?new a(...u):"bool"===o?u[0]||!1:"float"===o||"int"===o||"uint"===o?u[0]||0:"string"===o?u[0]||"":"ArrayBuffer"===o?Fs(u[0]):null}function Ps(e){let t=ws.get(e);return void 0===t&&(t={},ws.set(e,t)),t}function Ls(e){let t="";const r=new Uint8Array(e);for(let e=0;e<r.length;e++)t+=String.fromCharCode(r[e]);return btoa(t)}function Fs(e){return Uint8Array.from(atob(e),(e=>e.charCodeAt(0))).buffer}var Bs=Object.freeze({__proto__:null,arrayBufferToBase64:Ls,base64ToArrayBuffer:Fs,getCacheKey:vs,getDataFromObject:Ps,getLengthFromType:Rs,getNodeChildren:Ns,getTypeFromLength:Es,getTypedArrayFromType:As,getValueFromType:Ms,getValueType:Cs,hash:_s,hashArray:Ts,hashString:bs});const Ds={VERTEX:"vertex",FRAGMENT:"fragment"},Is={NONE:"none",FRAME:"frame",RENDER:"render",OBJECT:"object"},Vs={BOOLEAN:"bool",INTEGER:"int",FLOAT:"float",VECTOR2:"vec2",VECTOR3:"vec3",VECTOR4:"vec4",MATRIX2:"mat2",MATRIX3:"mat3",MATRIX4:"mat4"},Us={READ_ONLY:"readOnly",WRITE_ONLY:"writeOnly",READ_WRITE:"readWrite"},Os=["fragment","vertex"],ks=["setup","analyze","generate"],Gs=[...Os,"compute"],zs=["x","y","z","w"];let $s=0;class Hs extends o{static get type(){return"Node"}constructor(e=null){super(),this.nodeType=e,this.updateType=Is.NONE,this.updateBeforeType=Is.NONE,this.updateAfterType=Is.NONE,this.uuid=u.generateUUID(),this.version=0,this.global=!1,this.parents=!1,this.isNode=!0,this._cacheKey=null,this._cacheKeyVersion=0,Object.defineProperty(this,"id",{value:$s++})}set needsUpdate(e){!0===e&&this.version++}get type(){return this.constructor.type}onUpdate(e,t){return this.updateType=t,this.update=e.bind(this.getSelf()),this}onFrameUpdate(e){return this.onUpdate(e,Is.FRAME)}onRenderUpdate(e){return this.onUpdate(e,Is.RENDER)}onObjectUpdate(e){return this.onUpdate(e,Is.OBJECT)}onReference(e){return this.updateReference=e.bind(this.getSelf()),this}getSelf(){return this.self||this}updateReference(){return this}isGlobal(){return this.global}*getChildren(){for(const{childNode:e}of Ns(this))yield e}dispose(){this.dispatchEvent({type:"dispose"})}traverse(e){e(this);for(const t of this.getChildren())t.traverse(e)}getCacheKey(e=!1){return!0!==(e=e||this.version!==this._cacheKeyVersion)&&null!==this._cacheKey||(this._cacheKey=_s(vs(this,e),this.customCacheKey()),this._cacheKeyVersion=this.version),this._cacheKey}customCacheKey(){return 0}getScope(){return this}getHash(){return this.uuid}getUpdateType(){return this.updateType}getUpdateBeforeType(){return this.updateBeforeType}getUpdateAfterType(){return this.updateAfterType}getElementType(e){const t=this.getNodeType(e);return e.getElementType(t)}getMemberType(){return"void"}getNodeType(e){const t=e.getNodeProperties(this);return t.outputNode?t.outputNode.getNodeType(e):this.nodeType}getShared(e){const t=this.getHash(e);return e.getNodeFromHash(t)||this}setup(e){const t=e.getNodeProperties(this);let r=0;for(const e of this.getChildren())t["node"+r++]=e;return t.outputNode||null}analyze(e){if(1===e.increaseUsage(this)){const t=e.getNodeProperties(this);for(const r of Object.values(t))r&&!0===r.isNode&&r.build(e)}}generate(e,t){const{outputNode:r}=e.getNodeProperties(this);if(r&&!0===r.isNode)return r.build(e,t)}updateBefore(){console.warn("Abstract function.")}updateAfter(){console.warn("Abstract function.")}update(){console.warn("Abstract function.")}build(e,t=null){const r=this.getShared(e);if(this!==r)return r.build(e,t);e.addNode(this),e.addChain(this);let s=null;const i=e.getBuildStage();if("setup"===i){this.updateReference(e);const t=e.getNodeProperties(this);if(!0!==t.initialized){t.initialized=!0;const r=this.setup(e),s=r&&!0===r.isNode;for(const r of Object.values(t))if(r&&!0===r.isNode){if(!0===r.parents){const t=e.getNodeProperties(r);t.parents=t.parents||[],t.parents.push(this)}r.build(e)}s&&r.build(e),t.outputNode=r}s=t.outputNode||null}else if("analyze"===i)this.analyze(e);else if("generate"===i){if(1===this.generate.length){const r=this.getNodeType(e),i=e.getDataFromNode(this);s=i.snippet,void 0===s?void 0===i.generated?(i.generated=!0,s=this.generate(e)||"",i.snippet=s):(console.warn("THREE.Node: Recursion detected.",this),s=""):void 0!==i.flowCodes&&void 0!==e.context.nodeBlock&&e.addFlowCodeHierarchy(this,e.context.nodeBlock),s=e.format(s,r,t)}else s=this.generate(e,t)||""}return e.removeChain(this),e.addSequentialNode(this),s}getSerializeChildren(){return Ns(this)}serialize(e){const t=this.getSerializeChildren(),r={};for(const{property:s,index:i,childNode:n}of t)void 0!==i?(void 0===r[s]&&(r[s]=Number.isInteger(i)?[]:{}),r[s][i]=n.toJSON(e.meta).uuid):r[s]=n.toJSON(e.meta).uuid;Object.keys(r).length>0&&(e.inputNodes=r)}deserialize(e){if(void 0!==e.inputNodes){const t=e.meta.nodes;for(const r in e.inputNodes)if(Array.isArray(e.inputNodes[r])){const s=[];for(const i of e.inputNodes[r])s.push(t[i]);this[r]=s}else if("object"==typeof e.inputNodes[r]){const s={};for(const i in e.inputNodes[r]){const n=e.inputNodes[r][i];s[i]=t[n]}this[r]=s}else{const s=e.inputNodes[r];this[r]=t[s]}}}toJSON(e){const{uuid:t,type:r}=this,s=void 0===e||"string"==typeof e;s&&(e={textures:{},images:{},nodes:{}});let i=e.nodes[t];function n(e){const t=[];for(const r in e){const s=e[r];delete s.metadata,t.push(s)}return t}if(void 0===i&&(i={uuid:t,type:r,meta:e,metadata:{version:4.6,type:"Node",generator:"Node.toJSON"}},!0!==s&&(e.nodes[i.uuid]=i),this.serialize(i),delete i.meta),s){const t=n(e.textures),r=n(e.images),s=n(e.nodes);t.length>0&&(i.textures=t),r.length>0&&(i.images=r),s.length>0&&(i.nodes=s)}return i}}class Ws extends Hs{static get type(){return"ArrayElementNode"}constructor(e,t){super(),this.node=e,this.indexNode=t,this.isArrayElementNode=!0}getNodeType(e){return this.node.getElementType(e)}generate(e){const t=this.indexNode.getNodeType(e);return`${this.node.build(e)}[ ${this.indexNode.build(e,!e.isVector(t)&&e.isInteger(t)?t:"uint")} ]`}}class js extends Hs{static get type(){return"ConvertNode"}constructor(e,t){super(),this.node=e,this.convertTo=t}getNodeType(e){const t=this.node.getNodeType(e);let r=null;for(const s of this.convertTo.split("|"))null!==r&&e.getTypeLength(t)!==e.getTypeLength(s)||(r=s);return r}serialize(e){super.serialize(e),e.convertTo=this.convertTo}deserialize(e){super.deserialize(e),this.convertTo=e.convertTo}generate(e,t){const r=this.node,s=this.getNodeType(e),i=r.build(e,s);return e.format(i,s,t)}}class qs extends Hs{static get type(){return"TempNode"}constructor(e=null){super(e),this.isTempNode=!0}hasDependencies(e){return e.getDataFromNode(this).usageCount>1}build(e,t){if("generate"===e.getBuildStage()){const r=e.getVectorType(this.getNodeType(e,t)),s=e.getDataFromNode(this);if(void 0!==s.propertyName)return e.format(s.propertyName,r,t);if("void"!==r&&"void"!==t&&this.hasDependencies(e)){const i=super.build(e,r),n=e.getVarFromNode(this,null,r),a=e.getPropertyName(n);return e.addLineFlowCode(`${a} = ${i}`,this),s.snippet=i,s.propertyName=a,e.format(s.propertyName,r,t)}}return super.build(e,t)}}class Xs extends qs{static get type(){return"JoinNode"}constructor(e=[],t=null){super(t),this.nodes=e}getNodeType(e){return null!==this.nodeType?e.getVectorType(this.nodeType):e.getTypeFromLength(this.nodes.reduce(((t,r)=>t+e.getTypeLength(r.getNodeType(e))),0))}generate(e,t){const r=this.getNodeType(e),s=e.getTypeLength(r),i=this.nodes,n=e.getComponentType(r),a=[];let o=0;for(const t of i){if(o>=s){console.error(`THREE.TSL: Length of parameters exceeds maximum length of function '${r}()' type.`);break}let i,u=t.getNodeType(e),l=e.getTypeLength(u);o+l>s&&(console.error(`THREE.TSL: Length of '${r}()' data exceeds maximum length of output type.`),l=s-o,u=e.getTypeFromLength(l)),o+=l,i=t.build(e,u);const d=e.getComponentType(u);d!==n&&(i=e.format(i,d,n)),a.push(i)}const u=`${e.getType(r)}( ${a.join(", ")} )`;return e.format(u,r,t)}}const Ks=zs.join("");class Ys extends Hs{static get type(){return"SplitNode"}constructor(e,t="x"){super(),this.node=e,this.components=t,this.isSplitNode=!0}getVectorLength(){let e=this.components.length;for(const t of this.components)e=Math.max(zs.indexOf(t)+1,e);return e}getComponentType(e){return e.getComponentType(this.node.getNodeType(e))}getNodeType(e){return e.getTypeFromLength(this.components.length,this.getComponentType(e))}generate(e,t){const r=this.node,s=e.getTypeLength(r.getNodeType(e));let i=null;if(s>1){let n=null;this.getVectorLength()>=s&&(n=e.getTypeFromLength(this.getVectorLength(),this.getComponentType(e)));const a=r.build(e,n);i=this.components.length===s&&this.components===Ks.slice(0,this.components.length)?e.format(a,n,t):e.format(`${a}.${this.components}`,this.getNodeType(e),t)}else i=r.build(e,t);return i}serialize(e){super.serialize(e),e.components=this.components}deserialize(e){super.deserialize(e),this.components=e.components}}class Qs extends qs{static get type(){return"SetNode"}constructor(e,t,r){super(),this.sourceNode=e,this.components=t,this.targetNode=r}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{sourceNode:t,components:r,targetNode:s}=this,i=this.getNodeType(e),n=e.getComponentType(s.getNodeType(e)),a=e.getTypeFromLength(r.length,n),o=s.build(e,a),u=t.build(e,i),l=e.getTypeLength(i),d=[];for(let e=0;e<l;e++){const t=zs[e];t===r[0]?(d.push(o),e+=r.length-1):d.push(u+"."+t)}return`${e.getType(i)}( ${d.join(", ")} )`}}class Zs extends qs{static get type(){return"FlipNode"}constructor(e,t){super(),this.sourceNode=e,this.components=t}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{components:t,sourceNode:r}=this,s=this.getNodeType(e),i=r.build(e),n=e.getVarFromNode(this),a=e.getPropertyName(n);e.addLineFlowCode(a+" = "+i,this);const o=e.getTypeLength(s),u=[];let l=0;for(let e=0;e<o;e++){const r=zs[e];r===t[l]?(u.push("1.0 - "+a+"."+r),l++):u.push(a+"."+r)}return`${e.getType(s)}( ${u.join(", ")} )`}}class Js extends Hs{static get type(){return"InputNode"}constructor(e,t=null){super(t),this.isInputNode=!0,this.value=e,this.precision=null}getNodeType(){return null===this.nodeType?Cs(this.value):this.nodeType}getInputType(e){return this.getNodeType(e)}setPrecision(e){return this.precision=e,this}serialize(e){super.serialize(e),e.value=this.value,this.value&&this.value.toArray&&(e.value=this.value.toArray()),e.valueType=Cs(this.value),e.nodeType=this.nodeType,"ArrayBuffer"===e.valueType&&(e.value=Ls(e.value)),e.precision=this.precision}deserialize(e){super.deserialize(e),this.nodeType=e.nodeType,this.value=Array.isArray(e.value)?Ms(e.valueType,...e.value):e.value,this.precision=e.precision||null,this.value&&this.value.fromArray&&(this.value=this.value.fromArray(e.value))}generate(){console.warn("Abstract function.")}}const ei=/float|u?int/;class ti extends Js{static get type(){return"ConstNode"}constructor(e,t=null){super(e,t),this.isConstNode=!0}generateConst(e){return e.generateConst(this.getNodeType(e),this.value)}generate(e,t){const r=this.getNodeType(e);return ei.test(r)&&ei.test(t)?e.generateConst(t,this.value):e.format(this.generateConst(e),r,t)}}class ri extends Hs{static get type(){return"MemberNode"}constructor(e,t){super(),this.node=e,this.property=t,this.isMemberNode=!0}getNodeType(e){return this.node.getMemberType(e,this.property)}generate(e){return this.node.build(e)+"."+this.property}}let si=null;const ii=new Map;function ni(e,t){if(ii.has(e))console.warn(`THREE.TSL: Redefinition of method chaining '${e}'.`);else{if("function"!=typeof t)throw new Error(`THREE.TSL: Node element ${e} is not a function`);ii.set(e,t)}}const ai=e=>e.replace(/r|s/g,"x").replace(/g|t/g,"y").replace(/b|p/g,"z").replace(/a|q/g,"w"),oi=e=>ai(e).split("").sort().join(""),ui={setup(e,t){const r=t.shift();return e(Fi(r),...t)},get(e,t,r){if("string"==typeof t&&void 0===e[t]){if(!0!==e.isStackNode&&"assign"===t)return(...e)=>(si.assign(r,...e),r);if(ii.has(t)){const s=ii.get(t);return e.isStackNode?(...e)=>r.add(s(...e)):(...e)=>s(r,...e)}if("self"===t)return e;if(t.endsWith("Assign")&&ii.has(t.slice(0,t.length-6))){const s=ii.get(t.slice(0,t.length-6));return e.isStackNode?(...e)=>r.assign(e[0],s(...e)):(...e)=>r.assign(s(r,...e))}if(!0===/^[xyzwrgbastpq]{1,4}$/.test(t))return t=ai(t),Li(new Ys(r,t));if(!0===/^set[XYZWRGBASTPQ]{1,4}$/.test(t))return t=oi(t.slice(3).toLowerCase()),r=>Li(new Qs(e,t,r));if(!0===/^flip[XYZWRGBASTPQ]{1,4}$/.test(t))return t=oi(t.slice(4).toLowerCase()),()=>Li(new Zs(Li(e),t));if("width"===t||"height"===t||"depth"===t)return"width"===t?t="x":"height"===t?t="y":"depth"===t&&(t="z"),Li(new Ys(e,t));if(!0===/^\d+$/.test(t))return Li(new Ws(r,new ti(Number(t),"uint")));if(!0===/^get$/.test(t))return e=>Li(new ri(r,e))}return Reflect.get(e,t,r)},set:(e,t,r,s)=>"string"!=typeof t||void 0!==e[t]||!0!==/^[xyzwrgbastpq]{1,4}$/.test(t)&&"width"!==t&&"height"!==t&&"depth"!==t&&!0!==/^\d+$/.test(t)?Reflect.set(e,t,r,s):(s[t].assign(r),!0)},li=new WeakMap,di=new WeakMap,ci=function(e,t=null){for(const r in e)e[r]=Li(e[r],t);return e},hi=function(e,t=null){const r=e.length;for(let s=0;s<r;s++)e[s]=Li(e[s],t);return e},pi=function(e,t=null,r=null,s=null){const i=e=>Li(null!==s?Object.assign(e,s):e);let n,a,o,u=t;function l(t){let r;return r=u?/[a-z]/i.test(u)?u+"()":u:e.type,void 0!==a&&t.length<a?(console.error(`THREE.TSL: "${r}" parameter length is less than minimum required.`),t.concat(new Array(a-t.length).fill(0))):void 0!==o&&t.length>o?(console.error(`THREE.TSL: "${r}" parameter length exceeds limit.`),t.slice(0,o)):t}return null===t?n=(...t)=>i(new e(...Bi(l(t)))):null!==r?(r=Li(r),n=(...s)=>i(new e(t,...Bi(l(s)),r))):n=(...r)=>i(new e(t,...Bi(l(r)))),n.setParameterLength=(...e)=>(1===e.length?a=o=e[0]:2===e.length&&([a,o]=e),n),n.setName=e=>(u=e,n),n},gi=function(e,...t){return Li(new e(...Bi(t)))};class mi extends Hs{constructor(e,t){super(),this.shaderNode=e,this.inputNodes=t,this.isShaderCallNodeInternal=!0}getNodeType(e){return this.shaderNode.nodeType||this.getOutputNode(e).getNodeType(e)}getMemberType(e,t){return this.getOutputNode(e).getMemberType(e,t)}call(e){const{shaderNode:t,inputNodes:r}=this,s=e.getNodeProperties(t);if(s.onceOutput)return s.onceOutput;let i=null;if(t.layout){let s=di.get(e.constructor);void 0===s&&(s=new WeakMap,di.set(e.constructor,s));let n=s.get(t);void 0===n&&(n=Li(e.buildFunctionNode(t)),s.set(t,n)),e.addInclude(n),i=Li(n.call(r))}else{const s=t.jsFunc,n=null!==r||s.length>1?s(r||[],e):s(e);i=Li(n)}return t.once&&(s.onceOutput=i),i}getOutputNode(e){const t=e.getNodeProperties(this);return null===t.outputNode&&(t.outputNode=this.setupOutput(e)),t.outputNode}setup(e){return this.getOutputNode(e)}setupOutput(e){return e.addStack(),e.stack.outputNode=this.call(e),e.removeStack()}generate(e,t){return this.getOutputNode(e).build(e,t)}}class fi extends Hs{constructor(e,t){super(t),this.jsFunc=e,this.layout=null,this.global=!0,this.once=!1}setLayout(e){return this.layout=e,this}call(e=null){return Fi(e),Li(new mi(this,e))}setup(){return this.call()}}const yi=[!1,!0],xi=[0,1,2,3],bi=[-1,-2],Ti=[.5,1.5,1/3,1e-6,1e6,Math.PI,2*Math.PI,1/Math.PI,2/Math.PI,1/(2*Math.PI),Math.PI/2],_i=new Map;for(const e of yi)_i.set(e,new ti(e));const vi=new Map;for(const e of xi)vi.set(e,new ti(e,"uint"));const Ni=new Map([...vi].map((e=>new ti(e.value,"int"))));for(const e of bi)Ni.set(e,new ti(e,"int"));const Si=new Map([...Ni].map((e=>new ti(e.value))));for(const e of Ti)Si.set(e,new ti(e));for(const e of Ti)Si.set(-e,new ti(-e));const wi={bool:_i,uint:vi,ints:Ni,float:Si},Ei=new Map([..._i,...Si]),Ai=(e,t)=>Ei.has(e)?Ei.get(e):!0===e.isNode?e:new ti(e,t),Ri=function(e,t=null){return(...r)=>{if((0===r.length||!["bool","float","int","uint"].includes(e)&&r.every((e=>"object"!=typeof e)))&&(r=[Ms(e,...r)]),1===r.length&&null!==t&&t.has(r[0]))return Li(t.get(r[0]));if(1===r.length){const t=Ai(r[0],e);return(e=>{try{return e.getNodeType()}catch(e){return}})(t)===e?Li(t):Li(new js(t,e))}const s=r.map((e=>Ai(e)));return Li(new Xs(s,e))}},Ci=e=>"object"==typeof e&&null!==e?e.value:e,Mi=e=>null!=e?e.nodeType||e.convertTo||("string"==typeof e?e:null):null;function Pi(e,t){return new Proxy(new fi(e,t),ui)}const Li=(e,t=null)=>function(e,t=null){const r=Cs(e);if("node"===r){let t=li.get(e);return void 0===t&&(t=new Proxy(e,ui),li.set(e,t),li.set(t,t)),t}return null===t&&("float"===r||"boolean"===r)||r&&"shader"!==r&&"string"!==r?Li(Ai(e,t)):"shader"===r?Ui(e):e}(e,t),Fi=(e,t=null)=>new ci(e,t),Bi=(e,t=null)=>new hi(e,t),Di=(...e)=>new pi(...e),Ii=(...e)=>new gi(...e);let Vi=0;const Ui=(e,t=null)=>{let r=null;null!==t&&("object"==typeof t?r=t.return:("string"==typeof t?r=t:console.error("THREE.TSL: Invalid layout type."),t=null));const s=new Pi(e,r),i=(...e)=>{let t;Fi(e),t=e[0]&&e[0].isNode?[...e]:e[0];const i=s.call(t);return"void"===r&&i.toStack(),i};if(i.shaderNode=s,i.setLayout=e=>(s.setLayout(e),i),i.once=()=>(s.once=!0,i),null!==t){if("object"!=typeof t.inputs){const e={name:"fn"+Vi++,type:r,inputs:[]};for(const r in t)"return"!==r&&e.inputs.push({name:r,type:t[r]});t=e}i.setLayout(t)}return i};ni("toGlobal",(e=>(e.global=!0,e)));const Oi=e=>{si=e},ki=()=>si,Gi=(...e)=>si.If(...e);function zi(e){return si&&si.add(e),e}ni("toStack",zi);const $i=new Ri("color"),Hi=new Ri("float",wi.float),Wi=new Ri("int",wi.ints),ji=new Ri("uint",wi.uint),qi=new Ri("bool",wi.bool),Xi=new Ri("vec2"),Ki=new Ri("ivec2"),Yi=new Ri("uvec2"),Qi=new Ri("bvec2"),Zi=new Ri("vec3"),Ji=new Ri("ivec3"),en=new Ri("uvec3"),tn=new Ri("bvec3"),rn=new Ri("vec4"),sn=new Ri("ivec4"),nn=new Ri("uvec4"),an=new Ri("bvec4"),on=new Ri("mat2"),un=new Ri("mat3"),ln=new Ri("mat4");ni("toColor",$i),ni("toFloat",Hi),ni("toInt",Wi),ni("toUint",ji),ni("toBool",qi),ni("toVec2",Xi),ni("toIVec2",Ki),ni("toUVec2",Yi),ni("toBVec2",Qi),ni("toVec3",Zi),ni("toIVec3",Ji),ni("toUVec3",en),ni("toBVec3",tn),ni("toVec4",rn),ni("toIVec4",sn),ni("toUVec4",nn),ni("toBVec4",an),ni("toMat2",on),ni("toMat3",un),ni("toMat4",ln);const dn=Di(Ws).setParameterLength(2),cn=(e,t)=>Li(new js(Li(e),t));ni("element",dn),ni("convert",cn);ni("append",(e=>(console.warn("THREE.TSL: .append() has been renamed to .toStack()."),zi(e))));class hn extends Hs{static get type(){return"PropertyNode"}constructor(e,t=null,r=!1){super(e),this.name=t,this.varying=r,this.isPropertyNode=!0}getHash(e){return this.name||super.getHash(e)}isGlobal(){return!0}generate(e){let t;return!0===this.varying?(t=e.getVaryingFromNode(this,this.name),t.needsInterpolation=!0):t=e.getVarFromNode(this,this.name),e.getPropertyName(t)}}const pn=(e,t)=>Li(new hn(e,t)),gn=(e,t)=>Li(new hn(e,t,!0)),mn=Ii(hn,"vec4","DiffuseColor"),fn=Ii(hn,"vec3","EmissiveColor"),yn=Ii(hn,"float","Roughness"),xn=Ii(hn,"float","Metalness"),bn=Ii(hn,"float","Clearcoat"),Tn=Ii(hn,"float","ClearcoatRoughness"),_n=Ii(hn,"vec3","Sheen"),vn=Ii(hn,"float","SheenRoughness"),Nn=Ii(hn,"float","Iridescence"),Sn=Ii(hn,"float","IridescenceIOR"),wn=Ii(hn,"float","IridescenceThickness"),En=Ii(hn,"float","AlphaT"),An=Ii(hn,"float","Anisotropy"),Rn=Ii(hn,"vec3","AnisotropyT"),Cn=Ii(hn,"vec3","AnisotropyB"),Mn=Ii(hn,"color","SpecularColor"),Pn=Ii(hn,"float","SpecularF90"),Ln=Ii(hn,"float","Shininess"),Fn=Ii(hn,"vec4","Output"),Bn=Ii(hn,"float","dashSize"),Dn=Ii(hn,"float","gapSize"),In=Ii(hn,"float","pointWidth"),Vn=Ii(hn,"float","IOR"),Un=Ii(hn,"float","Transmission"),On=Ii(hn,"float","Thickness"),kn=Ii(hn,"float","AttenuationDistance"),Gn=Ii(hn,"color","AttenuationColor"),zn=Ii(hn,"float","Dispersion");class $n extends Hs{static get type(){return"UniformGroupNode"}constructor(e,t=!1,r=1){super("string"),this.name=e,this.shared=t,this.order=r,this.isUniformGroup=!0}serialize(e){super.serialize(e),e.name=this.name,e.version=this.version,e.shared=this.shared}deserialize(e){super.deserialize(e),this.name=e.name,this.version=e.version,this.shared=e.shared}}const Hn=e=>new $n(e),Wn=(e,t=0)=>new $n(e,!0,t),jn=Wn("frame"),qn=Wn("render"),Xn=Hn("object");class Kn extends Js{static get type(){return"UniformNode"}constructor(e,t=null){super(e,t),this.isUniformNode=!0,this.name="",this.groupNode=Xn}label(e){return this.name=e,this}setGroup(e){return this.groupNode=e,this}getGroup(){return this.groupNode}getUniformHash(e){return this.getHash(e)}onUpdate(e,t){const r=this.getSelf();return e=e.bind(r),super.onUpdate((t=>{const s=e(t,r);void 0!==s&&(this.value=s)}),t)}generate(e,t){const r=this.getNodeType(e),s=this.getUniformHash(e);let i=e.getNodeFromHash(s);void 0===i&&(e.setHashNode(this,s),i=this);const n=i.getInputType(e),a=e.getUniformFromNode(i,n,e.shaderStage,this.name||e.context.label),o=e.getPropertyName(a);return void 0!==e.context.label&&delete e.context.label,e.format(o,r,t)}}const Yn=(e,t)=>{const r=Mi(t||e),s=e&&!0===e.isNode?e.node&&e.node.value||e.value:e;return Li(new Kn(s,r))};class Qn extends qs{static get type(){return"ArrayNode"}constructor(e,t,r=null){super(e),this.count=t,this.values=r,this.isArrayNode=!0}getNodeType(e){return null===this.nodeType&&(this.nodeType=this.values[0].getNodeType(e)),this.nodeType}getElementType(e){return this.getNodeType(e)}generate(e){const t=this.getNodeType(e);return e.generateArray(t,this.count,this.values)}}const Zn=(...e)=>{let t;if(1===e.length){const r=e[0];t=new Qn(null,r.length,r)}else{const r=e[0],s=e[1];t=new Qn(r,s)}return Li(t)};ni("toArray",((e,t)=>Zn(Array(t).fill(e))));class Jn extends qs{static get type(){return"AssignNode"}constructor(e,t){super(),this.targetNode=e,this.sourceNode=t}hasDependencies(){return!1}getNodeType(e,t){return"void"!==t?this.targetNode.getNodeType(e):"void"}needsSplitAssign(e){const{targetNode:t}=this;if(!1===e.isAvailable("swizzleAssign")&&t.isSplitNode&&t.components.length>1){const r=e.getTypeLength(t.node.getNodeType(e));return zs.join("").slice(0,r)!==t.components}return!1}generate(e,t){const{targetNode:r,sourceNode:s}=this,i=this.needsSplitAssign(e),n=r.getNodeType(e),a=r.context({assign:!0}).build(e),o=s.build(e,n),u=s.getNodeType(e),l=e.getDataFromNode(this);let d;if(!0===l.initialized)"void"!==t&&(d=a);else if(i){const s=e.getVarFromNode(this,null,n),i=e.getPropertyName(s);e.addLineFlowCode(`${i} = ${o}`,this);const u=r.node.context({assign:!0}).build(e);for(let t=0;t<r.components.length;t++){const s=r.components[t];e.addLineFlowCode(`${u}.${s} = ${i}[ ${t} ]`,this)}"void"!==t&&(d=a)}else d=`${a} = ${o}`,"void"!==t&&"void"!==u||(e.addLineFlowCode(d,this),"void"!==t&&(d=a));return l.initialized=!0,e.format(d,n,t)}}const ea=Di(Jn).setParameterLength(2);ni("assign",ea);class ta extends qs{static get type(){return"FunctionCallNode"}constructor(e=null,t={}){super(),this.functionNode=e,this.parameters=t}setParameters(e){return this.parameters=e,this}getParameters(){return this.parameters}getNodeType(e){return this.functionNode.getNodeType(e)}generate(e){const t=[],r=this.functionNode,s=r.getInputs(e),i=this.parameters,n=(t,r)=>{const s=r.type;let i;return i="pointer"===s?"&"+t.build(e):t.build(e,s),i};if(Array.isArray(i)){if(i.length>s.length)console.error("THREE.TSL: The number of provided parameters exceeds the expected number of inputs in 'Fn()'."),i.length=s.length;else if(i.length<s.length)for(console.error("THREE.TSL: The number of provided parameters is less than the expected number of inputs in 'Fn()'.");i.length<s.length;)i.push(Hi(0));for(let e=0;e<i.length;e++)t.push(n(i[e],s[e]))}else for(const e of s){const r=i[e.name];void 0!==r?t.push(n(r,e)):(console.error(`THREE.TSL: Input '${e.name}' not found in 'Fn()'.`),t.push(n(Hi(0),e)))}return`${r.build(e,"property")}( ${t.join(", ")} )`}}const ra=(e,...t)=>(t=t.length>1||t[0]&&!0===t[0].isNode?Bi(t):Fi(t[0]),Li(new ta(Li(e),t)));ni("call",ra);const sa={"==":"equal","!=":"notEqual","<":"lessThan",">":"greaterThan","<=":"lessThanEqual",">=":"greaterThanEqual","%":"mod"};class ia extends qs{static get type(){return"OperatorNode"}constructor(e,t,r,...s){if(super(),s.length>0){let i=new ia(e,t,r);for(let t=0;t<s.length-1;t++)i=new ia(e,i,s[t]);t=i,r=s[s.length-1]}this.op=e,this.aNode=t,this.bNode=r,this.isOperatorNode=!0}getOperatorMethod(e,t){return e.getMethod(sa[this.op],t)}getNodeType(e){const t=this.op,r=this.aNode,s=this.bNode,i=r.getNodeType(e),n=void 0!==s?s.getNodeType(e):null;if("void"===i||"void"===n)return"void";if("%"===t)return i;if("~"===t||"&"===t||"|"===t||"^"===t||">>"===t||"<<"===t)return e.getIntegerType(i);if("!"===t||"&&"===t||"||"===t||"^^"===t)return"bool";if("=="===t||"!="===t||"<"===t||">"===t||"<="===t||">="===t){const t=Math.max(e.getTypeLength(i),e.getTypeLength(n));return t>1?`bvec${t}`:"bool"}if(e.isMatrix(i)){if("float"===n)return i;if(e.isVector(n))return e.getVectorFromMatrix(i);if(e.isMatrix(n))return i}else if(e.isMatrix(n)){if("float"===i)return n;if(e.isVector(i))return e.getVectorFromMatrix(n)}return e.getTypeLength(n)>e.getTypeLength(i)?n:i}generate(e,t){const r=this.op,s=this.aNode,i=this.bNode,n=this.getNodeType(e);let a=null,o=null;"void"!==n?(a=s.getNodeType(e),o=void 0!==i?i.getNodeType(e):null,"<"===r||">"===r||"<="===r||">="===r||"=="===r||"!="===r?e.isVector(a)?o=a:e.isVector(o)?a=o:a!==o&&(a=o="float"):">>"===r||"<<"===r?(a=n,o=e.changeComponentType(o,"uint")):"%"===r?(a=n,o=e.isInteger(a)&&e.isInteger(o)?o:a):e.isMatrix(a)?"float"===o?o="float":e.isVector(o)?o=e.getVectorFromMatrix(a):e.isMatrix(o)||(a=o=n):a=e.isMatrix(o)?"float"===a?"float":e.isVector(a)?e.getVectorFromMatrix(o):o=n:o=n):a=o=n;const u=s.build(e,a),d=void 0!==i?i.build(e,o):null,c=e.getFunctionOperator(r);if("void"!==t){const s=e.renderer.coordinateSystem===l;if("=="===r||"!="===r||"<"===r||">"===r||"<="===r||">="===r)return s&&e.isVector(a)?e.format(`${this.getOperatorMethod(e,t)}( ${u}, ${d} )`,n,t):e.format(`( ${u} ${r} ${d} )`,n,t);if("%"===r)return e.isInteger(o)?e.format(`( ${u} % ${d} )`,n,t):e.format(`${this.getOperatorMethod(e,n)}( ${u}, ${d} )`,n,t);if("!"===r||"~"===r)return e.format(`(${r}${u})`,a,t);if(c)return e.format(`${c}( ${u}, ${d} )`,n,t);if(e.isMatrix(a)&&"float"===o)return e.format(`( ${d} ${r} ${u} )`,n,t);if("float"===a&&e.isMatrix(o))return e.format(`${u} ${r} ${d}`,n,t);{let i=`( ${u} ${r} ${d} )`;return!s&&"bool"===n&&e.isVector(a)&&e.isVector(o)&&(i=`all${i}`),e.format(i,n,t)}}if("void"!==a)return c?e.format(`${c}( ${u}, ${d} )`,n,t):e.isMatrix(a)&&"float"===o?e.format(`${d} ${r} ${u}`,n,t):e.format(`${u} ${r} ${d}`,n,t)}serialize(e){super.serialize(e),e.op=this.op}deserialize(e){super.deserialize(e),this.op=e.op}}const na=Di(ia,"+").setParameterLength(2,1/0).setName("add"),aa=Di(ia,"-").setParameterLength(2,1/0).setName("sub"),oa=Di(ia,"*").setParameterLength(2,1/0).setName("mul"),ua=Di(ia,"/").setParameterLength(2,1/0).setName("div"),la=Di(ia,"%").setParameterLength(2).setName("mod"),da=Di(ia,"==").setParameterLength(2).setName("equal"),ca=Di(ia,"!=").setParameterLength(2).setName("notEqual"),ha=Di(ia,"<").setParameterLength(2).setName("lessThan"),pa=Di(ia,">").setParameterLength(2).setName("greaterThan"),ga=Di(ia,"<=").setParameterLength(2).setName("lessThanEqual"),ma=Di(ia,">=").setParameterLength(2).setName("greaterThanEqual"),fa=Di(ia,"&&").setParameterLength(2,1/0).setName("and"),ya=Di(ia,"||").setParameterLength(2,1/0).setName("or"),xa=Di(ia,"!").setParameterLength(1).setName("not"),ba=Di(ia,"^^").setParameterLength(2).setName("xor"),Ta=Di(ia,"&").setParameterLength(2).setName("bitAnd"),_a=Di(ia,"~").setParameterLength(2).setName("bitNot"),va=Di(ia,"|").setParameterLength(2).setName("bitOr"),Na=Di(ia,"^").setParameterLength(2).setName("bitXor"),Sa=Di(ia,"<<").setParameterLength(2).setName("shiftLeft"),wa=Di(ia,">>").setParameterLength(2).setName("shiftRight"),Ea=Ui((([e])=>(e.addAssign(1),e))),Aa=Ui((([e])=>(e.subAssign(1),e))),Ra=Ui((([e])=>{const t=Wi(e).toConst();return e.addAssign(1),t})),Ca=Ui((([e])=>{const t=Wi(e).toConst();return e.subAssign(1),t}));ni("add",na),ni("sub",aa),ni("mul",oa),ni("div",ua),ni("mod",la),ni("equal",da),ni("notEqual",ca),ni("lessThan",ha),ni("greaterThan",pa),ni("lessThanEqual",ga),ni("greaterThanEqual",ma),ni("and",fa),ni("or",ya),ni("not",xa),ni("xor",ba),ni("bitAnd",Ta),ni("bitNot",_a),ni("bitOr",va),ni("bitXor",Na),ni("shiftLeft",Sa),ni("shiftRight",wa),ni("incrementBefore",Ea),ni("decrementBefore",Aa),ni("increment",Ra),ni("decrement",Ca);const Ma=(e,t)=>(console.warn('THREE.TSL: "remainder()" is deprecated. Use "mod( int( ... ) )" instead.'),la(e,t)),Pa=(e,t)=>(console.warn('THREE.TSL: "modInt()" is deprecated. Use "mod( int( ... ) )" instead.'),la(Wi(e),Wi(t)));ni("remainder",Ma),ni("modInt",Pa);class La extends qs{static get type(){return"MathNode"}constructor(e,t,r=null,s=null){if(super(),(e===La.MAX||e===La.MIN)&&arguments.length>3){let i=new La(e,t,r);for(let t=2;t<arguments.length-1;t++)i=new La(e,i,arguments[t]);t=i,r=arguments[arguments.length-1],s=null}this.method=e,this.aNode=t,this.bNode=r,this.cNode=s,this.isMathNode=!0}getInputType(e){const t=this.aNode.getNodeType(e),r=this.bNode?this.bNode.getNodeType(e):null,s=this.cNode?this.cNode.getNodeType(e):null,i=e.isMatrix(t)?0:e.getTypeLength(t),n=e.isMatrix(r)?0:e.getTypeLength(r),a=e.isMatrix(s)?0:e.getTypeLength(s);return i>n&&i>a?t:n>a?r:a>i?s:t}getNodeType(e){const t=this.method;return t===La.LENGTH||t===La.DISTANCE||t===La.DOT?"float":t===La.CROSS?"vec3":t===La.ALL||t===La.ANY?"bool":t===La.EQUALS?e.changeComponentType(this.aNode.getNodeType(e),"bool"):this.getInputType(e)}generate(e,t){let r=this.method;const s=this.getNodeType(e),i=this.getInputType(e),n=this.aNode,a=this.bNode,o=this.cNode,u=e.renderer.coordinateSystem;if(r===La.TRANSFORM_DIRECTION){let r=n,s=a;e.isMatrix(r.getNodeType(e))?s=rn(Zi(s),0):r=rn(Zi(r),0);const i=oa(r,s).xyz;return Ka(i).build(e,t)}if(r===La.NEGATE)return e.format("( - "+n.build(e,i)+" )",s,t);if(r===La.ONE_MINUS)return aa(1,n).build(e,t);if(r===La.RECIPROCAL)return ua(1,n).build(e,t);if(r===La.DIFFERENCE)return so(aa(n,a)).build(e,t);{const c=[];return r===La.CROSS?c.push(n.build(e,s),a.build(e,s)):u===l&&r===La.STEP?c.push(n.build(e,1===e.getTypeLength(n.getNodeType(e))?"float":i),a.build(e,i)):u!==l||r!==La.MIN&&r!==La.MAX?r===La.REFRACT?c.push(n.build(e,i),a.build(e,i),o.build(e,"float")):r===La.MIX?c.push(n.build(e,i),a.build(e,i),o.build(e,1===e.getTypeLength(o.getNodeType(e))?"float":i)):(u===d&&r===La.ATAN&&null!==a&&(r="atan2"),"fragment"===e.shaderStage||r!==La.DFDX&&r!==La.DFDY||(console.warn(`THREE.TSL: '${r}' is not supported in the ${e.shaderStage} stage.`),r="/*"+r+"*/"),c.push(n.build(e,i)),null!==a&&c.push(a.build(e,i)),null!==o&&c.push(o.build(e,i))):c.push(n.build(e,i),a.build(e,1===e.getTypeLength(a.getNodeType(e))?"float":i)),e.format(`${e.getMethod(r,s)}( ${c.join(", ")} )`,s,t)}}serialize(e){super.serialize(e),e.method=this.method}deserialize(e){super.deserialize(e),this.method=e.method}}La.ALL="all",La.ANY="any",La.RADIANS="radians",La.DEGREES="degrees",La.EXP="exp",La.EXP2="exp2",La.LOG="log",La.LOG2="log2",La.SQRT="sqrt",La.INVERSE_SQRT="inversesqrt",La.FLOOR="floor",La.CEIL="ceil",La.NORMALIZE="normalize",La.FRACT="fract",La.SIN="sin",La.COS="cos",La.TAN="tan",La.ASIN="asin",La.ACOS="acos",La.ATAN="atan",La.ABS="abs",La.SIGN="sign",La.LENGTH="length",La.NEGATE="negate",La.ONE_MINUS="oneMinus",La.DFDX="dFdx",La.DFDY="dFdy",La.ROUND="round",La.RECIPROCAL="reciprocal",La.TRUNC="trunc",La.FWIDTH="fwidth",La.TRANSPOSE="transpose",La.BITCAST="bitcast",La.EQUALS="equals",La.MIN="min",La.MAX="max",La.STEP="step",La.REFLECT="reflect",La.DISTANCE="distance",La.DIFFERENCE="difference",La.DOT="dot",La.CROSS="cross",La.POW="pow",La.TRANSFORM_DIRECTION="transformDirection",La.MIX="mix",La.CLAMP="clamp",La.REFRACT="refract",La.SMOOTHSTEP="smoothstep",La.FACEFORWARD="faceforward";const Fa=Hi(1e-6),Ba=Hi(1e6),Da=Hi(Math.PI),Ia=Hi(2*Math.PI),Va=Di(La,La.ALL).setParameterLength(1),Ua=Di(La,La.ANY).setParameterLength(1),Oa=Di(La,La.RADIANS).setParameterLength(1),ka=Di(La,La.DEGREES).setParameterLength(1),Ga=Di(La,La.EXP).setParameterLength(1),za=Di(La,La.EXP2).setParameterLength(1),$a=Di(La,La.LOG).setParameterLength(1),Ha=Di(La,La.LOG2).setParameterLength(1),Wa=Di(La,La.SQRT).setParameterLength(1),ja=Di(La,La.INVERSE_SQRT).setParameterLength(1),qa=Di(La,La.FLOOR).setParameterLength(1),Xa=Di(La,La.CEIL).setParameterLength(1),Ka=Di(La,La.NORMALIZE).setParameterLength(1),Ya=Di(La,La.FRACT).setParameterLength(1),Qa=Di(La,La.SIN).setParameterLength(1),Za=Di(La,La.COS).setParameterLength(1),Ja=Di(La,La.TAN).setParameterLength(1),eo=Di(La,La.ASIN).setParameterLength(1),to=Di(La,La.ACOS).setParameterLength(1),ro=Di(La,La.ATAN).setParameterLength(1,2),so=Di(La,La.ABS).setParameterLength(1),io=Di(La,La.SIGN).setParameterLength(1),no=Di(La,La.LENGTH).setParameterLength(1),ao=Di(La,La.NEGATE).setParameterLength(1),oo=Di(La,La.ONE_MINUS).setParameterLength(1),uo=Di(La,La.DFDX).setParameterLength(1),lo=Di(La,La.DFDY).setParameterLength(1),co=Di(La,La.ROUND).setParameterLength(1),ho=Di(La,La.RECIPROCAL).setParameterLength(1),po=Di(La,La.TRUNC).setParameterLength(1),go=Di(La,La.FWIDTH).setParameterLength(1),mo=Di(La,La.TRANSPOSE).setParameterLength(1),fo=Di(La,La.BITCAST).setParameterLength(2),yo=(e,t)=>(console.warn('THREE.TSL: "equals" is deprecated. Use "equal" inside a vector instead, like: "bvec*( equal( ... ) )"'),da(e,t)),xo=Di(La,La.MIN).setParameterLength(2,1/0),bo=Di(La,La.MAX).setParameterLength(2,1/0),To=Di(La,La.STEP).setParameterLength(2),_o=Di(La,La.REFLECT).setParameterLength(2),vo=Di(La,La.DISTANCE).setParameterLength(2),No=Di(La,La.DIFFERENCE).setParameterLength(2),So=Di(La,La.DOT).setParameterLength(2),wo=Di(La,La.CROSS).setParameterLength(2),Eo=Di(La,La.POW).setParameterLength(2),Ao=Di(La,La.POW,2).setParameterLength(1),Ro=Di(La,La.POW,3).setParameterLength(1),Co=Di(La,La.POW,4).setParameterLength(1),Mo=Di(La,La.TRANSFORM_DIRECTION).setParameterLength(2),Po=e=>oa(io(e),Eo(so(e),1/3)),Lo=e=>So(e,e),Fo=Di(La,La.MIX).setParameterLength(3),Bo=(e,t=0,r=1)=>Li(new La(La.CLAMP,Li(e),Li(t),Li(r))),Do=e=>Bo(e),Io=Di(La,La.REFRACT).setParameterLength(3),Vo=Di(La,La.SMOOTHSTEP).setParameterLength(3),Uo=Di(La,La.FACEFORWARD).setParameterLength(3),Oo=Ui((([e])=>{const t=So(e.xy,Xi(12.9898,78.233)),r=la(t,Da);return Ya(Qa(r).mul(43758.5453))})),ko=(e,t,r)=>Fo(t,r,e),Go=(e,t,r)=>Vo(t,r,e),zo=(e,t)=>(console.warn('THREE.TSL: "atan2" is overloaded. Use "atan" instead.'),ro(e,t)),$o=Uo,Ho=ja;ni("all",Va),ni("any",Ua),ni("equals",yo),ni("radians",Oa),ni("degrees",ka),ni("exp",Ga),ni("exp2",za),ni("log",$a),ni("log2",Ha),ni("sqrt",Wa),ni("inverseSqrt",ja),ni("floor",qa),ni("ceil",Xa),ni("normalize",Ka),ni("fract",Ya),ni("sin",Qa),ni("cos",Za),ni("tan",Ja),ni("asin",eo),ni("acos",to),ni("atan",ro),ni("abs",so),ni("sign",io),ni("length",no),ni("lengthSq",Lo),ni("negate",ao),ni("oneMinus",oo),ni("dFdx",uo),ni("dFdy",lo),ni("round",co),ni("reciprocal",ho),ni("trunc",po),ni("fwidth",go),ni("atan2",zo),ni("min",xo),ni("max",bo),ni("step",To),ni("reflect",_o),ni("distance",vo),ni("dot",So),ni("cross",wo),ni("pow",Eo),ni("pow2",Ao),ni("pow3",Ro),ni("pow4",Co),ni("transformDirection",Mo),ni("mix",ko),ni("clamp",Bo),ni("refract",Io),ni("smoothstep",Go),ni("faceForward",Uo),ni("difference",No),ni("saturate",Do),ni("cbrt",Po),ni("transpose",mo),ni("rand",Oo);class Wo extends Hs{static get type(){return"ConditionalNode"}constructor(e,t,r=null){super(),this.condNode=e,this.ifNode=t,this.elseNode=r}getNodeType(e){const{ifNode:t,elseNode:r}=e.getNodeProperties(this);if(void 0===t)return this.setup(e),this.getNodeType(e);const s=t.getNodeType(e);if(null!==r){const t=r.getNodeType(e);if(e.getTypeLength(t)>e.getTypeLength(s))return t}return s}setup(e){const t=this.condNode.cache(),r=this.ifNode.cache(),s=this.elseNode?this.elseNode.cache():null,i=e.context.nodeBlock;e.getDataFromNode(r).parentNodeBlock=i,null!==s&&(e.getDataFromNode(s).parentNodeBlock=i);const n=e.getNodeProperties(this);n.condNode=t,n.ifNode=r.context({nodeBlock:r}),n.elseNode=s?s.context({nodeBlock:s}):null}generate(e,t){const r=this.getNodeType(e),s=e.getDataFromNode(this);if(void 0!==s.nodeProperty)return s.nodeProperty;const{condNode:i,ifNode:n,elseNode:a}=e.getNodeProperties(this),o=e.currentFunctionNode,u="void"!==t,l=u?pn(r).build(e):"";s.nodeProperty=l;const d=i.build(e,"bool");e.addFlowCode(`\n${e.tab}if ( ${d} ) {\n\n`).addFlowTab();let c=n.build(e,r);if(c&&(u?c=l+" = "+c+";":(c="return "+c+";",null===o&&(console.warn("THREE.TSL: Return statement used in an inline 'Fn()'. Define a layout struct to allow return values."),c="// "+c))),e.removeFlowTab().addFlowCode(e.tab+"\t"+c+"\n\n"+e.tab+"}"),null!==a){e.addFlowCode(" else {\n\n").addFlowTab();let t=a.build(e,r);t&&(u?t=l+" = "+t+";":(t="return "+t+";",null===o&&(console.warn("THREE.TSL: Return statement used in an inline 'Fn()'. Define a layout struct to allow return values."),t="// "+t))),e.removeFlowTab().addFlowCode(e.tab+"\t"+t+"\n\n"+e.tab+"}\n\n")}else e.addFlowCode("\n\n");return e.format(l,r,t)}}const jo=Di(Wo).setParameterLength(2,3);ni("select",jo);const qo=(...e)=>(console.warn("THREE.TSL: cond() has been renamed to select()."),jo(...e));ni("cond",qo);class Xo extends Hs{static get type(){return"ContextNode"}constructor(e,t={}){super(),this.isContextNode=!0,this.node=e,this.value=t}getScope(){return this.node.getScope()}getNodeType(e){return this.node.getNodeType(e)}analyze(e){this.node.build(e)}setup(e){const t=e.getContext();e.setContext({...e.context,...this.value});const r=this.node.build(e);return e.setContext(t),r}generate(e,t){const r=e.getContext();e.setContext({...e.context,...this.value});const s=this.node.build(e,t);return e.setContext(r),s}}const Ko=Di(Xo).setParameterLength(1,2),Yo=(e,t)=>Ko(e,{label:t});ni("context",Ko),ni("label",Yo);class Qo extends Hs{static get type(){return"VarNode"}constructor(e,t=null,r=!1){super(),this.node=e,this.name=t,this.global=!0,this.isVarNode=!0,this.readOnly=r}getMemberType(e,t){return this.node.getMemberType(e,t)}getElementType(e){return this.node.getElementType(e)}getNodeType(e){return this.node.getNodeType(e)}generate(e){const{node:t,name:r,readOnly:s}=this,{renderer:i}=e,n=!0===i.backend.isWebGPUBackend;let a=!1,o=!1;s&&(a=e.isDeterministic(t),o=n?s:a);const u=e.getVectorType(this.getNodeType(e)),l=t.build(e,u),d=e.getVarFromNode(this,r,u,void 0,o),c=e.getPropertyName(d);let h=c;if(o)if(n)h=a?`const ${c}`:`let ${c}`;else{const r=e.getArrayCount(t);h=`const ${e.getVar(d.type,c,r)}`}return e.addLineFlowCode(`${h} = ${l}`,this),c}}const Zo=Di(Qo),Jo=(e,t=null)=>Zo(e,t).toStack(),eu=(e,t=null)=>Zo(e,t,!0).toStack();ni("toVar",Jo),ni("toConst",eu);const tu=e=>(console.warn('TSL: "temp( node )" is deprecated. Use "Var( node )" or "node.toVar()" instead.'),Zo(e));ni("temp",tu);class ru extends Hs{static get type(){return"VaryingNode"}constructor(e,t=null){super(),this.node=e,this.name=t,this.isVaryingNode=!0,this.interpolationType=null,this.interpolationSampling=null}isGlobal(){return!0}setInterpolation(e,t=null){return this.interpolationType=e,this.interpolationSampling=t,this}getHash(e){return this.name||super.getHash(e)}getNodeType(e){return this.node.getNodeType(e)}setupVarying(e){const t=e.getNodeProperties(this);let r=t.varying;if(void 0===r){const s=this.name,i=this.getNodeType(e),n=this.interpolationType,a=this.interpolationSampling;t.varying=r=e.getVaryingFromNode(this,s,i,n,a),t.node=this.node}return r.needsInterpolation||(r.needsInterpolation="fragment"===e.shaderStage),r}setup(e){this.setupVarying(e)}analyze(e){return this.setupVarying(e),this.node.analyze(e)}generate(e){const t=e.getNodeProperties(this),r=this.setupVarying(e),s="fragment"===e.shaderStage&&!0===t.reassignPosition&&e.context.needsPositionReassign;if(void 0===t.propertyName||s){const i=this.getNodeType(e),n=e.getPropertyName(r,Ds.VERTEX);e.flowNodeFromShaderStage(Ds.VERTEX,this.node,i,n),t.propertyName=n,s?t.reassignPosition=!1:void 0===t.reassignPosition&&e.context.isPositionNodeInput&&(t.reassignPosition=!0)}return e.getPropertyName(r)}}const su=Di(ru).setParameterLength(1,2),iu=e=>su(e);ni("toVarying",su),ni("toVertexStage",iu),ni("varying",((...e)=>(console.warn("THREE.TSL: .varying() has been renamed to .toVarying()."),su(...e)))),ni("vertexStage",((...e)=>(console.warn("THREE.TSL: .vertexStage() has been renamed to .toVertexStage()."),su(...e))));const nu=Ui((([e])=>{const t=e.mul(.9478672986).add(.0521327014).pow(2.4),r=e.mul(.0773993808),s=e.lessThanEqual(.04045);return Fo(t,r,s)})).setLayout({name:"sRGBTransferEOTF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),au=Ui((([e])=>{const t=e.pow(.41666).mul(1.055).sub(.055),r=e.mul(12.92),s=e.lessThanEqual(.0031308);return Fo(t,r,s)})).setLayout({name:"sRGBTransferOETF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),ou="WorkingColorSpace",uu="OutputColorSpace";class lu extends qs{static get type(){return"ColorSpaceNode"}constructor(e,t,r){super("vec4"),this.colorNode=e,this.source=t,this.target=r}resolveColorSpace(e,t){return t===ou?c.workingColorSpace:t===uu?e.context.outputColorSpace||e.renderer.outputColorSpace:t}setup(e){const{colorNode:t}=this,r=this.resolveColorSpace(e,this.source),s=this.resolveColorSpace(e,this.target);let i=t;return!1!==c.enabled&&r!==s&&r&&s?(c.getTransfer(r)===h&&(i=rn(nu(i.rgb),i.a)),c.getPrimaries(r)!==c.getPrimaries(s)&&(i=rn(un(c._getMatrix(new n,r,s)).mul(i.rgb),i.a)),c.getTransfer(s)===h&&(i=rn(au(i.rgb),i.a)),i):i}}const du=e=>Li(new lu(Li(e),ou,uu)),cu=e=>Li(new lu(Li(e),uu,ou)),hu=(e,t)=>Li(new lu(Li(e),ou,t)),pu=(e,t)=>Li(new lu(Li(e),t,ou));ni("toOutputColorSpace",du),ni("toWorkingColorSpace",cu),ni("workingToColorSpace",hu),ni("colorSpaceToWorking",pu);let gu=class extends Ws{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),r=this.referenceNode.getNodeType(),s=this.getNodeType();return e.format(t,r,s)}};class mu extends Hs{static get type(){return"ReferenceBaseNode"}constructor(e,t,r=null,s=null){super(),this.property=e,this.uniformType=t,this.object=r,this.count=s,this.properties=e.split("."),this.reference=r,this.node=null,this.group=null,this.updateType=Is.OBJECT}setGroup(e){return this.group=e,this}element(e){return Li(new gu(this,Li(e)))}setNodeType(e){const t=Yn(null,e).getSelf();null!==this.group&&t.setGroup(this.group),this.node=t}getNodeType(e){return null===this.node&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let r=e[t[0]];for(let e=1;e<t.length;e++)r=r[t[e]];return r}updateReference(e){return this.reference=null!==this.object?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){null===this.node&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}class fu extends mu{static get type(){return"RendererReferenceNode"}constructor(e,t,r=null){super(e,t,r),this.renderer=r,this.setGroup(qn)}updateReference(e){return this.reference=null!==this.renderer?this.renderer:e.renderer,this.reference}}const yu=(e,t,r=null)=>Li(new fu(e,t,r));class xu extends qs{static get type(){return"ToneMappingNode"}constructor(e,t=Tu,r=null){super("vec3"),this.toneMapping=e,this.exposureNode=t,this.colorNode=r}customCacheKey(){return _s(this.toneMapping)}setup(e){const t=this.colorNode||e.context.color,r=this.toneMapping;if(r===p)return t;let s=null;const i=e.renderer.library.getToneMappingFunction(r);return null!==i?s=rn(i(t.rgb,this.exposureNode),t.a):(console.error("ToneMappingNode: Unsupported Tone Mapping configuration.",r),s=t),s}}const bu=(e,t,r)=>Li(new xu(e,Li(t),Li(r))),Tu=yu("toneMappingExposure","float");ni("toneMapping",((e,t,r)=>bu(t,r,e)));class _u extends Js{static get type(){return"BufferAttributeNode"}constructor(e,t=null,r=0,s=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferStride=r,this.bufferOffset=s,this.usage=g,this.instanced=!1,this.attribute=null,this.global=!0,e&&!0===e.isBufferAttribute&&(this.attribute=e,this.usage=e.usage,this.instanced=e.isInstancedBufferAttribute)}getHash(e){if(0===this.bufferStride&&0===this.bufferOffset){let t=e.globalCache.getData(this.value);return void 0===t&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getNodeType(e){return null===this.bufferType&&(this.bufferType=e.getTypeFromAttribute(this.attribute)),this.bufferType}setup(e){if(null!==this.attribute)return;const t=this.getNodeType(e),r=this.value,s=e.getTypeLength(t),i=this.bufferStride||s,n=this.bufferOffset,a=!0===r.isInterleavedBuffer?r:new m(r,i),o=new f(a,s,n);a.setUsage(this.usage),this.attribute=o,this.attribute.isInstancedBufferAttribute=this.instanced}generate(e){const t=this.getNodeType(e),r=e.getBufferAttributeFromNode(this,t),s=e.getPropertyName(r);let i=null;if("vertex"===e.shaderStage||"compute"===e.shaderStage)this.name=s,i=s;else{i=su(this).build(e,t)}return i}getInputType(){return"bufferAttribute"}setUsage(e){return this.usage=e,this.attribute&&!0===this.attribute.isBufferAttribute&&(this.attribute.usage=e),this}setInstanced(e){return this.instanced=e,this}}const vu=(e,t=null,r=0,s=0)=>Li(new _u(e,t,r,s)),Nu=(e,t=null,r=0,s=0)=>vu(e,t,r,s).setUsage(y),Su=(e,t=null,r=0,s=0)=>vu(e,t,r,s).setInstanced(!0),wu=(e,t=null,r=0,s=0)=>Nu(e,t,r,s).setInstanced(!0);ni("toAttribute",(e=>vu(e.value)));class Eu extends Hs{static get type(){return"ComputeNode"}constructor(e,t,r=[64]){super("void"),this.isComputeNode=!0,this.computeNode=e,this.count=t,this.workgroupSize=r,this.dispatchCount=0,this.version=1,this.name="",this.updateBeforeType=Is.OBJECT,this.onInitFunction=null,this.updateDispatchCount()}dispose(){this.dispatchEvent({type:"dispose"})}label(e){return this.name=e,this}updateDispatchCount(){const{count:e,workgroupSize:t}=this;let r=t[0];for(let e=1;e<t.length;e++)r*=t[e];this.dispatchCount=Math.ceil(e/r)}onInit(e){return this.onInitFunction=e,this}updateBefore({renderer:e}){e.compute(this)}setup(e){const t=this.computeNode.build(e);if(t){e.getNodeProperties(this).outputComputeNode=t.outputNode,t.outputNode=null}return t}generate(e,t){const{shaderStage:r}=e;if("compute"===r){const t=this.computeNode.build(e,"void");""!==t&&e.addLineFlowCode(t,this)}else{const r=e.getNodeProperties(this).outputComputeNode;if(r)return r.build(e,t)}}}const Au=(e,t,r)=>Li(new Eu(Li(e),t,r));ni("compute",Au);class Ru extends Hs{static get type(){return"CacheNode"}constructor(e,t=!0){super(),this.node=e,this.parent=t,this.isCacheNode=!0}getNodeType(e){const t=e.getCache(),r=e.getCacheFromNode(this,this.parent);e.setCache(r);const s=this.node.getNodeType(e);return e.setCache(t),s}build(e,...t){const r=e.getCache(),s=e.getCacheFromNode(this,this.parent);e.setCache(s);const i=this.node.build(e,...t);return e.setCache(r),i}}const Cu=(e,t)=>Li(new Ru(Li(e),t));ni("cache",Cu);class Mu extends Hs{static get type(){return"BypassNode"}constructor(e,t){super(),this.isBypassNode=!0,this.outputNode=e,this.callNode=t}getNodeType(e){return this.outputNode.getNodeType(e)}generate(e){const t=this.callNode.build(e,"void");return""!==t&&e.addLineFlowCode(t,this),this.outputNode.build(e)}}const Pu=Di(Mu).setParameterLength(2);ni("bypass",Pu);class Lu extends Hs{static get type(){return"RemapNode"}constructor(e,t,r,s=Hi(0),i=Hi(1)){super(),this.node=e,this.inLowNode=t,this.inHighNode=r,this.outLowNode=s,this.outHighNode=i,this.doClamp=!0}setup(){const{node:e,inLowNode:t,inHighNode:r,outLowNode:s,outHighNode:i,doClamp:n}=this;let a=e.sub(t).div(r.sub(t));return!0===n&&(a=a.clamp()),a.mul(i.sub(s)).add(s)}}const Fu=Di(Lu,null,null,{doClamp:!1}).setParameterLength(3,5),Bu=Di(Lu).setParameterLength(3,5);ni("remap",Fu),ni("remapClamp",Bu);class Du extends Hs{static get type(){return"ExpressionNode"}constructor(e="",t="void"){super(t),this.snippet=e}generate(e,t){const r=this.getNodeType(e),s=this.snippet;if("void"!==r)return e.format(s,r,t);e.addLineFlowCode(s,this)}}const Iu=Di(Du).setParameterLength(1,2),Vu=e=>(e?jo(e,Iu("discard")):Iu("discard")).toStack();ni("discard",Vu);class Uu extends qs{static get type(){return"RenderOutputNode"}constructor(e,t,r){super("vec4"),this.colorNode=e,this.toneMapping=t,this.outputColorSpace=r,this.isRenderOutputNode=!0}setup({context:e}){let t=this.colorNode||e.color;const r=(null!==this.toneMapping?this.toneMapping:e.toneMapping)||p,s=(null!==this.outputColorSpace?this.outputColorSpace:e.outputColorSpace)||x;return r!==p&&(t=t.toneMapping(r)),s!==x&&s!==c.workingColorSpace&&(t=t.workingToColorSpace(s)),t}}const Ou=(e,t=null,r=null)=>Li(new Uu(Li(e),t,r));ni("renderOutput",Ou);class ku extends qs{static get type(){return"DebugNode"}constructor(e,t=null){super(),this.node=e,this.callback=t}getNodeType(e){return this.node.getNodeType(e)}setup(e){return this.node.build(e)}analyze(e){return this.node.build(e)}generate(e){const t=this.callback,r=this.node.build(e),s="--- TSL debug - "+e.shaderStage+" shader ---",i="-".repeat(s.length);let n="";return n+="// #"+s+"#\n",n+=e.flow.code.replace(/^\t/gm,"")+"\n",n+="/* ... */ "+r+" /* ... */\n",n+="// #"+i+"#\n",null!==t?t(e,n):console.log(n),r}}const Gu=(e,t=null)=>Li(new ku(Li(e),t));ni("debug",Gu);class zu extends Hs{static get type(){return"AttributeNode"}constructor(e,t=null){super(t),this.global=!0,this._attributeName=e}getHash(e){return this.getAttributeName(e)}getNodeType(e){let t=this.nodeType;if(null===t){const r=this.getAttributeName(e);if(e.hasGeometryAttribute(r)){const s=e.geometry.getAttribute(r);t=e.getTypeFromAttribute(s)}else t="float"}return t}setAttributeName(e){return this._attributeName=e,this}getAttributeName(){return this._attributeName}generate(e){const t=this.getAttributeName(e),r=this.getNodeType(e);if(!0===e.hasGeometryAttribute(t)){const s=e.geometry.getAttribute(t),i=e.getTypeFromAttribute(s),n=e.getAttribute(t,i);if("vertex"===e.shaderStage)return e.format(n.name,i,r);return su(this).build(e,r)}return console.warn(`AttributeNode: Vertex attribute "${t}" not found on geometry.`),e.generateConst(r)}serialize(e){super.serialize(e),e.global=this.global,e._attributeName=this._attributeName}deserialize(e){super.deserialize(e),this.global=e.global,this._attributeName=e._attributeName}}const $u=(e,t=null)=>Li(new zu(e,t)),Hu=(e=0)=>$u("uv"+(e>0?e:""),"vec2");class Wu extends Hs{static get type(){return"TextureSizeNode"}constructor(e,t=null){super("uvec2"),this.isTextureSizeNode=!0,this.textureNode=e,this.levelNode=t}generate(e,t){const r=this.textureNode.build(e,"property"),s=null===this.levelNode?"0":this.levelNode.build(e,"int");return e.format(`${e.getMethod("textureDimensions")}( ${r}, ${s} )`,this.getNodeType(e),t)}}const ju=Di(Wu).setParameterLength(1,2);class qu extends Kn{static get type(){return"MaxMipLevelNode"}constructor(e){super(0),this._textureNode=e,this.updateType=Is.FRAME}get textureNode(){return this._textureNode}get texture(){return this._textureNode.value}update(){const e=this.texture,t=e.images,r=t&&t.length>0?t[0]&&t[0].image||t[0]:e.image;if(r&&void 0!==r.width){const{width:e,height:t}=r;this.value=Math.log2(Math.max(e,t))}}}const Xu=Di(qu).setParameterLength(1);class Ku extends Kn{static get type(){return"TextureNode"}constructor(e,t=null,r=null,s=null){super(e),this.isTextureNode=!0,this.uvNode=t,this.levelNode=r,this.biasNode=s,this.compareNode=null,this.depthNode=null,this.gradNode=null,this.sampler=!0,this.updateMatrix=!1,this.updateType=Is.NONE,this.referenceNode=null,this._value=e,this._matrixUniform=null,this.setUpdateMatrix(null===t)}set value(e){this.referenceNode?this.referenceNode.value=e:this._value=e}get value(){return this.referenceNode?this.referenceNode.value:this._value}getUniformHash(){return this.value.uuid}getNodeType(){return!0===this.value.isDepthTexture?"float":this.value.type===b?"uvec4":this.value.type===T?"ivec4":"vec4"}getInputType(){return"texture"}getDefaultUV(){return Hu(this.value.channel)}updateReference(){return this.value}getTransformedUV(e){return null===this._matrixUniform&&(this._matrixUniform=Yn(this.value.matrix)),this._matrixUniform.mul(Zi(e,1)).xy}setUpdateMatrix(e){return this.updateMatrix=e,this.updateType=e?Is.OBJECT:Is.NONE,this}setupUV(e,t){const r=this.value;return e.isFlipY()&&(r.image instanceof ImageBitmap&&!0===r.flipY||!0===r.isRenderTargetTexture||!0===r.isFramebufferTexture||!0===r.isDepthTexture)&&(t=this.sampler?t.flipY():t.setY(Wi(ju(this,this.levelNode).y).sub(t.y).sub(1))),t}setup(e){const t=e.getNodeProperties(this);t.referenceNode=this.referenceNode;const r=this.value;if(!r||!0!==r.isTexture)throw new Error("THREE.TSL: `texture( value )` function expects a valid instance of THREE.Texture().");let s=this.uvNode;null!==s&&!0!==e.context.forceUVContext||!e.context.getUV||(s=e.context.getUV(this,e)),s||(s=this.getDefaultUV()),!0===this.updateMatrix&&(s=this.getTransformedUV(s)),s=this.setupUV(e,s);let i=this.levelNode;null===i&&e.context.getTextureLevel&&(i=e.context.getTextureLevel(this)),t.uvNode=s,t.levelNode=i,t.biasNode=this.biasNode,t.compareNode=this.compareNode,t.gradNode=this.gradNode,t.depthNode=this.depthNode}generateUV(e,t){return t.build(e,!0===this.sampler?"vec2":"ivec2")}generateSnippet(e,t,r,s,i,n,a,o){const u=this.value;let l;return l=s?e.generateTextureLevel(u,t,r,s,n):i?e.generateTextureBias(u,t,r,i,n):o?e.generateTextureGrad(u,t,r,o,n):a?e.generateTextureCompare(u,t,r,a,n):!1===this.sampler?e.generateTextureLoad(u,t,r,n):e.generateTexture(u,t,r,n),l}generate(e,t){const r=this.value,s=e.getNodeProperties(this),i=super.generate(e,"property");if(/^sampler/.test(t))return i+"_sampler";if(e.isReference(t))return i;{const n=e.getDataFromNode(this);let a=n.propertyName;if(void 0===a){const{uvNode:t,levelNode:r,biasNode:o,compareNode:u,depthNode:l,gradNode:d}=s,c=this.generateUV(e,t),h=r?r.build(e,"float"):null,p=o?o.build(e,"float"):null,g=l?l.build(e,"int"):null,m=u?u.build(e,"float"):null,f=d?[d[0].build(e,"vec2"),d[1].build(e,"vec2")]:null,y=e.getVarFromNode(this);a=e.getPropertyName(y);const x=this.generateSnippet(e,i,c,h,p,g,m,f);e.addLineFlowCode(`${a} = ${x}`,this),n.snippet=x,n.propertyName=a}let o=a;const u=this.getNodeType(e);return e.needsToWorkingColorSpace(r)&&(o=pu(Iu(o,u),r.colorSpace).setup(e).build(e,u)),e.format(o,u,t)}}setSampler(e){return this.sampler=e,this}getSampler(){return this.sampler}uv(e){return console.warn("THREE.TextureNode: .uv() has been renamed. Use .sample() instead."),this.sample(e)}sample(e){const t=this.clone();return t.uvNode=Li(e),t.referenceNode=this.getSelf(),Li(t)}blur(e){const t=this.clone();t.biasNode=Li(e).mul(Xu(t)),t.referenceNode=this.getSelf();const r=t.value;return!1===t.generateMipmaps&&(r&&!1===r.generateMipmaps||r.minFilter===_||r.magFilter===_)&&(console.warn("THREE.TSL: texture().blur() requires mipmaps and sampling. Use .generateMipmaps=true and .minFilter/.magFilter=THREE.LinearFilter in the Texture."),t.biasNode=null),Li(t)}level(e){const t=this.clone();return t.levelNode=Li(e),t.referenceNode=this.getSelf(),Li(t)}size(e){return ju(this,e)}bias(e){const t=this.clone();return t.biasNode=Li(e),t.referenceNode=this.getSelf(),Li(t)}compare(e){const t=this.clone();return t.compareNode=Li(e),t.referenceNode=this.getSelf(),Li(t)}grad(e,t){const r=this.clone();return r.gradNode=[Li(e),Li(t)],r.referenceNode=this.getSelf(),Li(r)}depth(e){const t=this.clone();return t.depthNode=Li(e),t.referenceNode=this.getSelf(),Li(t)}serialize(e){super.serialize(e),e.value=this.value.toJSON(e.meta).uuid,e.sampler=this.sampler,e.updateMatrix=this.updateMatrix,e.updateType=this.updateType}deserialize(e){super.deserialize(e),this.value=e.meta.textures[e.value],this.sampler=e.sampler,this.updateMatrix=e.updateMatrix,this.updateType=e.updateType}update(){const e=this.value,t=this._matrixUniform;null!==t&&(t.value=e.matrix),!0===e.matrixAutoUpdate&&e.updateMatrix()}clone(){const e=new this.constructor(this.value,this.uvNode,this.levelNode,this.biasNode);return e.sampler=this.sampler,e.depthNode=this.depthNode,e.compareNode=this.compareNode,e.gradNode=this.gradNode,e}}const Yu=Di(Ku).setParameterLength(1,4),Qu=(...e)=>Yu(...e).setSampler(!1);class Zu extends Kn{static get type(){return"BufferNode"}constructor(e,t,r=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferCount=r}getElementType(e){return this.getNodeType(e)}getInputType(){return"buffer"}}const Ju=(e,t,r)=>Li(new Zu(e,t,r));class el extends Ws{static get type(){return"UniformArrayElementNode"}constructor(e,t){super(e,t),this.isArrayBufferElementNode=!0}generate(e){const t=super.generate(e),r=this.getNodeType(),s=this.node.getPaddedType();return e.format(t,s,r)}}class tl extends Zu{static get type(){return"UniformArrayNode"}constructor(e,t=null){super(null),this.array=e,this.elementType=null===t?Cs(e[0]):t,this.paddedType=this.getPaddedType(),this.updateType=Is.RENDER,this.isArrayBufferNode=!0}getNodeType(){return this.paddedType}getElementType(){return this.elementType}getPaddedType(){const e=this.elementType;let t="vec4";return"mat2"===e?t="mat2":!0===/mat/.test(e)?t="mat4":"i"===e.charAt(0)?t="ivec4":"u"===e.charAt(0)&&(t="uvec4"),t}update(){const{array:e,value:t}=this,r=this.elementType;if("float"===r||"int"===r||"uint"===r)for(let r=0;r<e.length;r++){t[4*r]=e[r]}else if("color"===r)for(let r=0;r<e.length;r++){const s=4*r,i=e[r];t[s]=i.r,t[s+1]=i.g,t[s+2]=i.b||0}else if("mat2"===r)for(let r=0;r<e.length;r++){const s=4*r,i=e[r];t[s]=i.elements[0],t[s+1]=i.elements[1],t[s+2]=i.elements[2],t[s+3]=i.elements[3]}else if("mat3"===r)for(let r=0;r<e.length;r++){const s=16*r,i=e[r];t[s]=i.elements[0],t[s+1]=i.elements[1],t[s+2]=i.elements[2],t[s+4]=i.elements[3],t[s+5]=i.elements[4],t[s+6]=i.elements[5],t[s+8]=i.elements[6],t[s+9]=i.elements[7],t[s+10]=i.elements[8],t[s+15]=1}else if("mat4"===r)for(let r=0;r<e.length;r++){const s=16*r,i=e[r];for(let e=0;e<i.elements.length;e++)t[s+e]=i.elements[e]}else for(let r=0;r<e.length;r++){const s=4*r,i=e[r];t[s]=i.x,t[s+1]=i.y,t[s+2]=i.z||0,t[s+3]=i.w||0}}setup(e){const t=this.array.length,r=this.elementType;let s=Float32Array;const i=this.paddedType,n=e.getTypeLength(i);return"i"===r.charAt(0)&&(s=Int32Array),"u"===r.charAt(0)&&(s=Uint32Array),this.value=new s(t*n),this.bufferCount=t,this.bufferType=i,super.setup(e)}element(e){return Li(new el(this,Li(e)))}}const rl=(e,t)=>Li(new tl(e,t));const sl=Di(class extends Hs{constructor(e){super("float"),this.name=e,this.isBuiltinNode=!0}generate(){return this.name}}).setParameterLength(1),il=Yn(0,"uint").label("u_cameraIndex").setGroup(Wn("cameraIndex")).toVarying("v_cameraIndex"),nl=Yn("float").label("cameraNear").setGroup(qn).onRenderUpdate((({camera:e})=>e.near)),al=Yn("float").label("cameraFar").setGroup(qn).onRenderUpdate((({camera:e})=>e.far)),ol=Ui((({camera:e})=>{let t;if(e.isArrayCamera&&e.cameras.length>0){const r=[];for(const t of e.cameras)r.push(t.projectionMatrix);t=rl(r).setGroup(qn).label("cameraProjectionMatrices").element(e.isMultiViewCamera?sl("gl_ViewID_OVR"):il).toVar("cameraProjectionMatrix")}else t=Yn("mat4").label("cameraProjectionMatrix").setGroup(qn).onRenderUpdate((({camera:e})=>e.projectionMatrix));return t})).once()(),ul=Ui((({camera:e})=>{let t;if(e.isArrayCamera&&e.cameras.length>0){const r=[];for(const t of e.cameras)r.push(t.projectionMatrixInverse);t=rl(r).setGroup(qn).label("cameraProjectionMatricesInverse").element(e.isMultiViewCamera?sl("gl_ViewID_OVR"):il).toVar("cameraProjectionMatrixInverse")}else t=Yn("mat4").label("cameraProjectionMatrixInverse").setGroup(qn).onRenderUpdate((({camera:e})=>e.projectionMatrixInverse));return t})).once()(),ll=Ui((({camera:e})=>{let t;if(e.isArrayCamera&&e.cameras.length>0){const r=[];for(const t of e.cameras)r.push(t.matrixWorldInverse);t=rl(r).setGroup(qn).label("cameraViewMatrices").element(e.isMultiViewCamera?sl("gl_ViewID_OVR"):il).toVar("cameraViewMatrix")}else t=Yn("mat4").label("cameraViewMatrix").setGroup(qn).onRenderUpdate((({camera:e})=>e.matrixWorldInverse));return t})).once()(),dl=Yn("mat4").label("cameraWorldMatrix").setGroup(qn).onRenderUpdate((({camera:e})=>e.matrixWorld)),cl=Yn("mat3").label("cameraNormalMatrix").setGroup(qn).onRenderUpdate((({camera:e})=>e.normalMatrix)),hl=Yn(new r).label("cameraPosition").setGroup(qn).onRenderUpdate((({camera:e},t)=>t.value.setFromMatrixPosition(e.matrixWorld))),pl=new v;class gl extends Hs{static get type(){return"Object3DNode"}constructor(e,t=null){super(),this.scope=e,this.object3d=t,this.updateType=Is.OBJECT,this._uniformNode=new Kn(null)}getNodeType(){const e=this.scope;return e===gl.WORLD_MATRIX?"mat4":e===gl.POSITION||e===gl.VIEW_POSITION||e===gl.DIRECTION||e===gl.SCALE?"vec3":e===gl.RADIUS?"float":void 0}update(e){const t=this.object3d,s=this._uniformNode,i=this.scope;if(i===gl.WORLD_MATRIX)s.value=t.matrixWorld;else if(i===gl.POSITION)s.value=s.value||new r,s.value.setFromMatrixPosition(t.matrixWorld);else if(i===gl.SCALE)s.value=s.value||new r,s.value.setFromMatrixScale(t.matrixWorld);else if(i===gl.DIRECTION)s.value=s.value||new r,t.getWorldDirection(s.value);else if(i===gl.VIEW_POSITION){const i=e.camera;s.value=s.value||new r,s.value.setFromMatrixPosition(t.matrixWorld),s.value.applyMatrix4(i.matrixWorldInverse)}else if(i===gl.RADIUS){const r=e.object.geometry;null===r.boundingSphere&&r.computeBoundingSphere(),pl.copy(r.boundingSphere).applyMatrix4(t.matrixWorld),s.value=pl.radius}}generate(e){const t=this.scope;return t===gl.WORLD_MATRIX?this._uniformNode.nodeType="mat4":t===gl.POSITION||t===gl.VIEW_POSITION||t===gl.DIRECTION||t===gl.SCALE?this._uniformNode.nodeType="vec3":t===gl.RADIUS&&(this._uniformNode.nodeType="float"),this._uniformNode.build(e)}serialize(e){super.serialize(e),e.scope=this.scope}deserialize(e){super.deserialize(e),this.scope=e.scope}}gl.WORLD_MATRIX="worldMatrix",gl.POSITION="position",gl.SCALE="scale",gl.VIEW_POSITION="viewPosition",gl.DIRECTION="direction",gl.RADIUS="radius";const ml=Di(gl,gl.DIRECTION).setParameterLength(1),fl=Di(gl,gl.WORLD_MATRIX).setParameterLength(1),yl=Di(gl,gl.POSITION).setParameterLength(1),xl=Di(gl,gl.SCALE).setParameterLength(1),bl=Di(gl,gl.VIEW_POSITION).setParameterLength(1),Tl=Di(gl,gl.RADIUS).setParameterLength(1);class _l extends gl{static get type(){return"ModelNode"}constructor(e){super(e)}update(e){this.object3d=e.object,super.update(e)}}const vl=Ii(_l,_l.DIRECTION),Nl=Ii(_l,_l.WORLD_MATRIX),Sl=Ii(_l,_l.POSITION),wl=Ii(_l,_l.SCALE),El=Ii(_l,_l.VIEW_POSITION),Al=Ii(_l,_l.RADIUS),Rl=Yn(new n).onObjectUpdate((({object:e},t)=>t.value.getNormalMatrix(e.matrixWorld))),Cl=Yn(new a).onObjectUpdate((({object:e},t)=>t.value.copy(e.matrixWorld).invert())),Ml=Ui((e=>e.renderer.overrideNodes.modelViewMatrix||Pl)).once()().toVar("modelViewMatrix"),Pl=ll.mul(Nl),Ll=Ui((e=>(e.context.isHighPrecisionModelViewMatrix=!0,Yn("mat4").onObjectUpdate((({object:e,camera:t})=>e.modelViewMatrix.multiplyMatrices(t.matrixWorldInverse,e.matrixWorld)))))).once()().toVar("highpModelViewMatrix"),Fl=Ui((e=>{const t=e.context.isHighPrecisionModelViewMatrix;return Yn("mat3").onObjectUpdate((({object:e,camera:r})=>(!0!==t&&e.modelViewMatrix.multiplyMatrices(r.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix))))})).once()().toVar("highpModelNormalViewMatrix"),Bl=$u("position","vec3"),Dl=Bl.toVarying("positionLocal"),Il=Bl.toVarying("positionPrevious"),Vl=Nl.mul(Dl).xyz.toVarying("v_positionWorld").context({needsPositionReassign:!0}),Ul=Dl.transformDirection(Nl).toVarying("v_positionWorldDirection").normalize().toVar("positionWorldDirection").context({needsPositionReassign:!0}),Ol=Ui((e=>e.context.setupPositionView()),"vec3").once()().toVarying("v_positionView").context({needsPositionReassign:!0}),kl=Ol.negate().toVarying("v_positionViewDirection").normalize().toVar("positionViewDirection");class Gl extends Hs{static get type(){return"FrontFacingNode"}constructor(){super("bool"),this.isFrontFacingNode=!0}generate(e){const{renderer:t,material:r}=e;return t.coordinateSystem===l&&r.side===N?"false":e.getFrontFacing()}}const zl=Ii(Gl),$l=Hi(zl).mul(2).sub(1),Hl=$u("normal","vec3"),Wl=Ui((e=>!1===e.geometry.hasAttribute("normal")?(console.warn('THREE.TSL: Vertex attribute "normal" not found on geometry.'),Zi(0,1,0)):Hl),"vec3").once()().toVar("normalLocal"),jl=Ol.dFdx().cross(Ol.dFdy()).normalize().toVar("normalFlat"),ql=Ui((e=>{let t;return t=!0===e.material.flatShading?jl:su(Jl(Wl),"v_normalView").normalize(),t}),"vec3").once()().toVar("normalView"),Xl=Ui((e=>{let t=ql.transformDirection(ll);return!0!==e.material.flatShading&&(t=su(t,"v_normalWorld")),t}),"vec3").once()().normalize().toVar("normalWorld"),Kl=Ui((e=>{let t=e.context.setupNormal().context({getUV:null});return!0!==e.material.flatShading&&(t=t.mul($l)),t}),"vec3").once()().toVar("transformedNormalView"),Yl=Kl.transformDirection(ll).toVar("transformedNormalWorld"),Ql=Ui((e=>{let t=e.context.setupClearcoatNormal().context({getUV:null});return!0!==e.material.flatShading&&(t=t.mul($l)),t}),"vec3").once()().toVar("transformedClearcoatNormalView"),Zl=Ui((([e,t=Nl])=>{const r=un(t),s=e.div(Zi(r[0].dot(r[0]),r[1].dot(r[1]),r[2].dot(r[2])));return r.mul(s).xyz})),Jl=Ui((([e],t)=>{const r=t.renderer.overrideNodes.modelNormalViewMatrix;if(null!==r)return r.transformDirection(e);const s=Rl.mul(e);return ll.transformDirection(s)})),ed=new S,td=new a,rd=Yn(0).onReference((({material:e})=>e)).onObjectUpdate((({material:e})=>e.refractionRatio)),sd=Yn(1).onReference((({material:e})=>e)).onObjectUpdate((function({material:e,scene:t}){return e.envMap?e.envMapIntensity:t.environmentIntensity})),id=Yn(new a).onReference((function(e){return e.material})).onObjectUpdate((function({material:e,scene:t}){const r=null!==t.environment&&null===e.envMap?t.environmentRotation:e.envMapRotation;return r?(ed.copy(r),td.makeRotationFromEuler(ed)):td.identity(),td})),nd=kl.negate().reflect(Kl),ad=kl.negate().refract(Kl,rd),od=nd.transformDirection(ll).toVar("reflectVector"),ud=ad.transformDirection(ll).toVar("reflectVector");class ld extends Ku{static get type(){return"CubeTextureNode"}constructor(e,t=null,r=null,s=null){super(e,t,r,s),this.isCubeTextureNode=!0}getInputType(){return"cubeTexture"}getDefaultUV(){const e=this.value;return e.mapping===w?od:e.mapping===E?ud:(console.error('THREE.CubeTextureNode: Mapping "%s" not supported.',e.mapping),Zi(0,0,0))}setUpdateMatrix(){}setupUV(e,t){const r=this.value;return e.renderer.coordinateSystem!==d&&r.isRenderTargetTexture||(t=Zi(t.x.negate(),t.yz)),id.mul(t)}generateUV(e,t){return t.build(e,"vec3")}}const dd=Di(ld).setParameterLength(1,4).setName("cubeTexture");class cd extends Ws{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),r=this.referenceNode.getNodeType(),s=this.getNodeType();return e.format(t,r,s)}}class hd extends Hs{static get type(){return"ReferenceNode"}constructor(e,t,r=null,s=null){super(),this.property=e,this.uniformType=t,this.object=r,this.count=s,this.properties=e.split("."),this.reference=r,this.node=null,this.group=null,this.name=null,this.updateType=Is.OBJECT}element(e){return Li(new cd(this,Li(e)))}setGroup(e){return this.group=e,this}label(e){return this.name=e,this}setNodeType(e){let t=null;t=null!==this.count?Ju(null,e,this.count):Array.isArray(this.getValueFromReference())?rl(null,e):"texture"===e?Yu(null):"cubeTexture"===e?dd(null):Yn(null,e),null!==this.group&&t.setGroup(this.group),null!==this.name&&t.label(this.name),this.node=t.getSelf()}getNodeType(e){return null===this.node&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let r=e[t[0]];for(let e=1;e<t.length;e++)r=r[t[e]];return r}updateReference(e){return this.reference=null!==this.object?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){null===this.node&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}const pd=(e,t,r)=>Li(new hd(e,t,r)),gd=(e,t,r,s)=>Li(new hd(e,t,s,r));class md extends hd{static get type(){return"MaterialReferenceNode"}constructor(e,t,r=null){super(e,t,r),this.material=r,this.isMaterialReferenceNode=!0}updateReference(e){return this.reference=null!==this.material?this.material:e.material,this.reference}}const fd=(e,t,r=null)=>Li(new md(e,t,r)),yd=Ui((e=>(!1===e.geometry.hasAttribute("tangent")&&e.geometry.computeTangents(),$u("tangent","vec4"))))(),xd=yd.xyz.toVar("tangentLocal"),bd=Ml.mul(rn(xd,0)).xyz.toVarying("v_tangentView").normalize().toVar("tangentView"),Td=bd.transformDirection(ll).toVarying("v_tangentWorld").normalize().toVar("tangentWorld"),_d=bd.toVar("transformedTangentView"),vd=_d.transformDirection(ll).normalize().toVar("transformedTangentWorld"),Nd=Ui((([e,t],r)=>{let s=e.mul(yd.w).xyz;return!0!==r.material.flatShading&&(s=su(e,t)),s})).once(),Sd=Nd(Hl.cross(yd),"v_bitangentGeometry").normalize().toVar("bitangentGeometry"),wd=Nd(Wl.cross(xd),"v_bitangentLocal").normalize().toVar("bitangentLocal"),Ed=Nd(ql.cross(bd),"v_bitangentView").normalize().toVar("bitangentView"),Ad=Nd(Xl.cross(Td),"v_bitangentWorld").normalize().toVar("bitangentWorld"),Rd=Nd(Kl.cross(_d),"v_transformedBitangentView").normalize().toVar("transformedBitangentView"),Cd=Rd.transformDirection(ll).normalize().toVar("transformedBitangentWorld"),Md=un(bd,Ed,ql),Pd=kl.mul(Md),Ld=(()=>{let e=Cn.cross(kl);return e=e.cross(Cn).normalize(),e=Fo(e,Kl,An.mul(yn.oneMinus()).oneMinus().pow2().pow2()).normalize(),e})(),Fd=Ui((e=>{const{eye_pos:t,surf_norm:r,mapN:s,uv:i}=e,n=t.dFdx(),a=t.dFdy(),o=i.dFdx(),u=i.dFdy(),l=r,d=a.cross(l),c=l.cross(n),h=d.mul(o.x).add(c.mul(u.x)),p=d.mul(o.y).add(c.mul(u.y)),g=h.dot(h).max(p.dot(p)),m=$l.mul(g.inverseSqrt());return na(h.mul(s.x,m),p.mul(s.y,m),l.mul(s.z)).normalize()}));class Bd extends qs{static get type(){return"NormalMapNode"}constructor(e,t=null){super("vec3"),this.node=e,this.scaleNode=t,this.normalMapType=A}setup(e){const{normalMapType:t,scaleNode:r}=this;let s=this.node.mul(2).sub(1);null!==r&&(s=Zi(s.xy.mul(r),s.z));let i=null;if(t===R)i=Jl(s);else if(t===A){i=!0===e.hasGeometryAttribute("tangent")?Md.mul(s).normalize():Fd({eye_pos:Ol,surf_norm:ql,mapN:s,uv:Hu()})}return i}}const Dd=Di(Bd).setParameterLength(1,2),Id=Ui((({textureNode:e,bumpScale:t})=>{const r=t=>e.cache().context({getUV:e=>t(e.uvNode||Hu()),forceUVContext:!0}),s=Hi(r((e=>e)));return Xi(Hi(r((e=>e.add(e.dFdx())))).sub(s),Hi(r((e=>e.add(e.dFdy())))).sub(s)).mul(t)})),Vd=Ui((e=>{const{surf_pos:t,surf_norm:r,dHdxy:s}=e,i=t.dFdx().normalize(),n=r,a=t.dFdy().normalize().cross(n),o=n.cross(i),u=i.dot(a).mul($l),l=u.sign().mul(s.x.mul(a).add(s.y.mul(o)));return u.abs().mul(r).sub(l).normalize()}));class Ud extends qs{static get type(){return"BumpMapNode"}constructor(e,t=null){super("vec3"),this.textureNode=e,this.scaleNode=t}setup(){const e=null!==this.scaleNode?this.scaleNode:1,t=Id({textureNode:this.textureNode,bumpScale:e});return Vd({surf_pos:Ol,surf_norm:ql,dHdxy:t})}}const Od=Di(Ud).setParameterLength(1,2),kd=new Map;class Gd extends Hs{static get type(){return"MaterialNode"}constructor(e){super(),this.scope=e}getCache(e,t){let r=kd.get(e);return void 0===r&&(r=fd(e,t),kd.set(e,r)),r}getFloat(e){return this.getCache(e,"float")}getColor(e){return this.getCache(e,"color")}getTexture(e){return this.getCache("map"===e?"map":e+"Map","texture")}setup(e){const t=e.context.material,r=this.scope;let s=null;if(r===Gd.COLOR){const e=void 0!==t.color?this.getColor(r):Zi();s=t.map&&!0===t.map.isTexture?e.mul(this.getTexture("map")):e}else if(r===Gd.OPACITY){const e=this.getFloat(r);s=t.alphaMap&&!0===t.alphaMap.isTexture?e.mul(this.getTexture("alpha")):e}else if(r===Gd.SPECULAR_STRENGTH)s=t.specularMap&&!0===t.specularMap.isTexture?this.getTexture("specular").r:Hi(1);else if(r===Gd.SPECULAR_INTENSITY){const e=this.getFloat(r);s=t.specularIntensityMap&&!0===t.specularIntensityMap.isTexture?e.mul(this.getTexture(r).a):e}else if(r===Gd.SPECULAR_COLOR){const e=this.getColor(r);s=t.specularColorMap&&!0===t.specularColorMap.isTexture?e.mul(this.getTexture(r).rgb):e}else if(r===Gd.ROUGHNESS){const e=this.getFloat(r);s=t.roughnessMap&&!0===t.roughnessMap.isTexture?e.mul(this.getTexture(r).g):e}else if(r===Gd.METALNESS){const e=this.getFloat(r);s=t.metalnessMap&&!0===t.metalnessMap.isTexture?e.mul(this.getTexture(r).b):e}else if(r===Gd.EMISSIVE){const e=this.getFloat("emissiveIntensity"),i=this.getColor(r).mul(e);s=t.emissiveMap&&!0===t.emissiveMap.isTexture?i.mul(this.getTexture(r)):i}else if(r===Gd.NORMAL)t.normalMap?(s=Dd(this.getTexture("normal"),this.getCache("normalScale","vec2")),s.normalMapType=t.normalMapType):s=t.bumpMap?Od(this.getTexture("bump").r,this.getFloat("bumpScale")):ql;else if(r===Gd.CLEARCOAT){const e=this.getFloat(r);s=t.clearcoatMap&&!0===t.clearcoatMap.isTexture?e.mul(this.getTexture(r).r):e}else if(r===Gd.CLEARCOAT_ROUGHNESS){const e=this.getFloat(r);s=t.clearcoatRoughnessMap&&!0===t.clearcoatRoughnessMap.isTexture?e.mul(this.getTexture(r).r):e}else if(r===Gd.CLEARCOAT_NORMAL)s=t.clearcoatNormalMap?Dd(this.getTexture(r),this.getCache(r+"Scale","vec2")):ql;else if(r===Gd.SHEEN){const e=this.getColor("sheenColor").mul(this.getFloat("sheen"));s=t.sheenColorMap&&!0===t.sheenColorMap.isTexture?e.mul(this.getTexture("sheenColor").rgb):e}else if(r===Gd.SHEEN_ROUGHNESS){const e=this.getFloat(r);s=t.sheenRoughnessMap&&!0===t.sheenRoughnessMap.isTexture?e.mul(this.getTexture(r).a):e,s=s.clamp(.07,1)}else if(r===Gd.ANISOTROPY)if(t.anisotropyMap&&!0===t.anisotropyMap.isTexture){const e=this.getTexture(r);s=on(wc.x,wc.y,wc.y.negate(),wc.x).mul(e.rg.mul(2).sub(Xi(1)).normalize().mul(e.b))}else s=wc;else if(r===Gd.IRIDESCENCE_THICKNESS){const e=pd("1","float",t.iridescenceThicknessRange);if(t.iridescenceThicknessMap){const i=pd("0","float",t.iridescenceThicknessRange);s=e.sub(i).mul(this.getTexture(r).g).add(i)}else s=e}else if(r===Gd.TRANSMISSION){const e=this.getFloat(r);s=t.transmissionMap?e.mul(this.getTexture(r).r):e}else if(r===Gd.THICKNESS){const e=this.getFloat(r);s=t.thicknessMap?e.mul(this.getTexture(r).g):e}else if(r===Gd.IOR)s=this.getFloat(r);else if(r===Gd.LIGHT_MAP)s=this.getTexture(r).rgb.mul(this.getFloat("lightMapIntensity"));else if(r===Gd.AO)s=this.getTexture(r).r.sub(1).mul(this.getFloat("aoMapIntensity")).add(1);else{const t=this.getNodeType(e);s=this.getCache(r,t)}return s}}Gd.ALPHA_TEST="alphaTest",Gd.COLOR="color",Gd.OPACITY="opacity",Gd.SHININESS="shininess",Gd.SPECULAR="specular",Gd.SPECULAR_STRENGTH="specularStrength",Gd.SPECULAR_INTENSITY="specularIntensity",Gd.SPECULAR_COLOR="specularColor",Gd.REFLECTIVITY="reflectivity",Gd.ROUGHNESS="roughness",Gd.METALNESS="metalness",Gd.NORMAL="normal",Gd.CLEARCOAT="clearcoat",Gd.CLEARCOAT_ROUGHNESS="clearcoatRoughness",Gd.CLEARCOAT_NORMAL="clearcoatNormal",Gd.EMISSIVE="emissive",Gd.ROTATION="rotation",Gd.SHEEN="sheen",Gd.SHEEN_ROUGHNESS="sheenRoughness",Gd.ANISOTROPY="anisotropy",Gd.IRIDESCENCE="iridescence",Gd.IRIDESCENCE_IOR="iridescenceIOR",Gd.IRIDESCENCE_THICKNESS="iridescenceThickness",Gd.IOR="ior",Gd.TRANSMISSION="transmission",Gd.THICKNESS="thickness",Gd.ATTENUATION_DISTANCE="attenuationDistance",Gd.ATTENUATION_COLOR="attenuationColor",Gd.LINE_SCALE="scale",Gd.LINE_DASH_SIZE="dashSize",Gd.LINE_GAP_SIZE="gapSize",Gd.LINE_WIDTH="linewidth",Gd.LINE_DASH_OFFSET="dashOffset",Gd.POINT_SIZE="size",Gd.DISPERSION="dispersion",Gd.LIGHT_MAP="light",Gd.AO="ao";const zd=Ii(Gd,Gd.ALPHA_TEST),$d=Ii(Gd,Gd.COLOR),Hd=Ii(Gd,Gd.SHININESS),Wd=Ii(Gd,Gd.EMISSIVE),jd=Ii(Gd,Gd.OPACITY),qd=Ii(Gd,Gd.SPECULAR),Xd=Ii(Gd,Gd.SPECULAR_INTENSITY),Kd=Ii(Gd,Gd.SPECULAR_COLOR),Yd=Ii(Gd,Gd.SPECULAR_STRENGTH),Qd=Ii(Gd,Gd.REFLECTIVITY),Zd=Ii(Gd,Gd.ROUGHNESS),Jd=Ii(Gd,Gd.METALNESS),ec=Ii(Gd,Gd.NORMAL),tc=Ii(Gd,Gd.CLEARCOAT),rc=Ii(Gd,Gd.CLEARCOAT_ROUGHNESS),sc=Ii(Gd,Gd.CLEARCOAT_NORMAL),ic=Ii(Gd,Gd.ROTATION),nc=Ii(Gd,Gd.SHEEN),ac=Ii(Gd,Gd.SHEEN_ROUGHNESS),oc=Ii(Gd,Gd.ANISOTROPY),uc=Ii(Gd,Gd.IRIDESCENCE),lc=Ii(Gd,Gd.IRIDESCENCE_IOR),dc=Ii(Gd,Gd.IRIDESCENCE_THICKNESS),cc=Ii(Gd,Gd.TRANSMISSION),hc=Ii(Gd,Gd.THICKNESS),pc=Ii(Gd,Gd.IOR),gc=Ii(Gd,Gd.ATTENUATION_DISTANCE),mc=Ii(Gd,Gd.ATTENUATION_COLOR),fc=Ii(Gd,Gd.LINE_SCALE),yc=Ii(Gd,Gd.LINE_DASH_SIZE),xc=Ii(Gd,Gd.LINE_GAP_SIZE),bc=Ii(Gd,Gd.LINE_WIDTH),Tc=Ii(Gd,Gd.LINE_DASH_OFFSET),_c=Ii(Gd,Gd.POINT_SIZE),vc=Ii(Gd,Gd.DISPERSION),Nc=Ii(Gd,Gd.LIGHT_MAP),Sc=Ii(Gd,Gd.AO),wc=Yn(new t).onReference((function(e){return e.material})).onRenderUpdate((function({material:e}){this.value.set(e.anisotropy*Math.cos(e.anisotropyRotation),e.anisotropy*Math.sin(e.anisotropyRotation))})),Ec=Ui((e=>e.context.setupModelViewProjection()),"vec4").once()().toVarying("v_modelViewProjection");class Ac extends Hs{static get type(){return"IndexNode"}constructor(e){super("uint"),this.scope=e,this.isIndexNode=!0}generate(e){const t=this.getNodeType(e),r=this.scope;let s,i;if(r===Ac.VERTEX)s=e.getVertexIndex();else if(r===Ac.INSTANCE)s=e.getInstanceIndex();else if(r===Ac.DRAW)s=e.getDrawIndex();else if(r===Ac.INVOCATION_LOCAL)s=e.getInvocationLocalIndex();else if(r===Ac.INVOCATION_SUBGROUP)s=e.getInvocationSubgroupIndex();else{if(r!==Ac.SUBGROUP)throw new Error("THREE.IndexNode: Unknown scope: "+r);s=e.getSubgroupIndex()}if("vertex"===e.shaderStage||"compute"===e.shaderStage)i=s;else{i=su(this).build(e,t)}return i}}Ac.VERTEX="vertex",Ac.INSTANCE="instance",Ac.SUBGROUP="subgroup",Ac.INVOCATION_LOCAL="invocationLocal",Ac.INVOCATION_SUBGROUP="invocationSubgroup",Ac.DRAW="draw";const Rc=Ii(Ac,Ac.VERTEX),Cc=Ii(Ac,Ac.INSTANCE),Mc=Ii(Ac,Ac.SUBGROUP),Pc=Ii(Ac,Ac.INVOCATION_SUBGROUP),Lc=Ii(Ac,Ac.INVOCATION_LOCAL),Fc=Ii(Ac,Ac.DRAW);class Bc extends Hs{static get type(){return"InstanceNode"}constructor(e,t,r=null){super("void"),this.count=e,this.instanceMatrix=t,this.instanceColor=r,this.instanceMatrixNode=null,this.instanceColorNode=null,this.updateType=Is.FRAME,this.buffer=null,this.bufferColor=null}setup(e){const{count:t,instanceMatrix:r,instanceColor:s}=this;let{instanceMatrixNode:i,instanceColorNode:n}=this;if(null===i){if(t<=1e3)i=Ju(r.array,"mat4",Math.max(t,1)).element(Cc);else{const e=new C(r.array,16,1);this.buffer=e;const t=r.usage===y?wu:Su,s=[t(e,"vec4",16,0),t(e,"vec4",16,4),t(e,"vec4",16,8),t(e,"vec4",16,12)];i=ln(...s)}this.instanceMatrixNode=i}if(s&&null===n){const e=new M(s.array,3),t=s.usage===y?wu:Su;this.bufferColor=e,n=Zi(t(e,"vec3",3,0)),this.instanceColorNode=n}const a=i.mul(Dl).xyz;if(Dl.assign(a),e.hasGeometryAttribute("normal")){const e=Zl(Wl,i);Wl.assign(e)}null!==this.instanceColorNode&&gn("vec3","vInstanceColor").assign(this.instanceColorNode)}update(){this.instanceMatrix.usage!==y&&null!==this.buffer&&this.instanceMatrix.version!==this.buffer.version&&(this.buffer.version=this.instanceMatrix.version),this.instanceColor&&this.instanceColor.usage!==y&&null!==this.bufferColor&&this.instanceColor.version!==this.bufferColor.version&&(this.bufferColor.version=this.instanceColor.version)}}const Dc=Di(Bc).setParameterLength(2,3);class Ic extends Bc{static get type(){return"InstancedMeshNode"}constructor(e){const{count:t,instanceMatrix:r,instanceColor:s}=e;super(t,r,s),this.instancedMesh=e}}const Vc=Di(Ic).setParameterLength(1);class Uc extends Hs{static get type(){return"BatchNode"}constructor(e){super("void"),this.batchMesh=e,this.batchingIdNode=null}setup(e){null===this.batchingIdNode&&(null===e.getDrawIndex()?this.batchingIdNode=Cc:this.batchingIdNode=Fc);const t=Ui((([e])=>{const t=Wi(ju(Qu(this.batchMesh._indirectTexture),0).x),r=Wi(e).mod(t),s=Wi(e).div(t);return Qu(this.batchMesh._indirectTexture,Ki(r,s)).x})).setLayout({name:"getIndirectIndex",type:"uint",inputs:[{name:"id",type:"int"}]}),r=t(Wi(this.batchingIdNode)),s=this.batchMesh._matricesTexture,i=Wi(ju(Qu(s),0).x),n=Hi(r).mul(4).toInt().toVar(),a=n.mod(i),o=n.div(i),u=ln(Qu(s,Ki(a,o)),Qu(s,Ki(a.add(1),o)),Qu(s,Ki(a.add(2),o)),Qu(s,Ki(a.add(3),o))),l=this.batchMesh._colorsTexture;if(null!==l){const e=Ui((([e])=>{const t=Wi(ju(Qu(l),0).x),r=e,s=r.mod(t),i=r.div(t);return Qu(l,Ki(s,i)).rgb})).setLayout({name:"getBatchingColor",type:"vec3",inputs:[{name:"id",type:"int"}]}),t=e(r);gn("vec3","vBatchColor").assign(t)}const d=un(u);Dl.assign(u.mul(Dl));const c=Wl.div(Zi(d[0].dot(d[0]),d[1].dot(d[1]),d[2].dot(d[2]))),h=d.mul(c).xyz;Wl.assign(h),e.hasGeometryAttribute("tangent")&&xd.mulAssign(d)}}const Oc=Di(Uc).setParameterLength(1);class kc extends Ws{static get type(){return"StorageArrayElementNode"}constructor(e,t){super(e,t),this.isStorageArrayElementNode=!0}set storageBufferNode(e){this.node=e}get storageBufferNode(){return this.node}getMemberType(e,t){const r=this.storageBufferNode.structTypeNode;return r?r.getMemberType(e,t):"void"}setup(e){return!1===e.isAvailable("storageBuffer")&&!0===this.node.isPBO&&e.setupPBO(this.node),super.setup(e)}generate(e,t){let r;const s=e.context.assign;if(r=!1===e.isAvailable("storageBuffer")?!0!==this.node.isPBO||!0===s||!this.node.value.isInstancedBufferAttribute&&"compute"===e.shaderStage?this.node.build(e):e.generatePBO(this):super.generate(e),!0!==s){const s=this.getNodeType(e);r=e.format(r,s,t)}return r}}const Gc=Di(kc).setParameterLength(2);class zc extends Zu{static get type(){return"StorageBufferNode"}constructor(e,t=null,r=0){let s,i=null;t&&t.isStruct?(s="struct",i=t.layout,(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute)&&(r=e.count)):null===t&&(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute)?(s=Es(e.itemSize),r=e.count):s=t,super(e,s,r),this.isStorageBufferNode=!0,this.structTypeNode=i,this.access=Us.READ_WRITE,this.isAtomic=!1,this.isPBO=!1,this._attribute=null,this._varying=null,this.global=!0,!0!==e.isStorageBufferAttribute&&!0!==e.isStorageInstancedBufferAttribute&&(e.isInstancedBufferAttribute?e.isStorageInstancedBufferAttribute=!0:e.isStorageBufferAttribute=!0)}getHash(e){if(0===this.bufferCount){let t=e.globalCache.getData(this.value);return void 0===t&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getInputType(){return this.value.isIndirectStorageBufferAttribute?"indirectStorageBuffer":"storageBuffer"}element(e){return Gc(this,e)}setPBO(e){return this.isPBO=e,this}getPBO(){return this.isPBO}setAccess(e){return this.access=e,this}toReadOnly(){return this.setAccess(Us.READ_ONLY)}setAtomic(e){return this.isAtomic=e,this}toAtomic(){return this.setAtomic(!0)}getAttributeData(){return null===this._attribute&&(this._attribute=vu(this.value),this._varying=su(this._attribute)),{attribute:this._attribute,varying:this._varying}}getNodeType(e){if(null!==this.structTypeNode)return this.structTypeNode.getNodeType(e);if(e.isAvailable("storageBuffer")||e.isAvailable("indirectStorageBuffer"))return super.getNodeType(e);const{attribute:t}=this.getAttributeData();return t.getNodeType(e)}generate(e){if(null!==this.structTypeNode&&this.structTypeNode.build(e),e.isAvailable("storageBuffer")||e.isAvailable("indirectStorageBuffer"))return super.generate(e);const{attribute:t,varying:r}=this.getAttributeData(),s=r.build(e);return e.registerTransform(s,t),s}}const $c=(e,t=null,r=0)=>Li(new zc(e,t,r)),Hc=new WeakMap;class Wc extends Hs{static get type(){return"SkinningNode"}constructor(e){super("void"),this.skinnedMesh=e,this.updateType=Is.OBJECT,this.skinIndexNode=$u("skinIndex","uvec4"),this.skinWeightNode=$u("skinWeight","vec4"),this.bindMatrixNode=pd("bindMatrix","mat4"),this.bindMatrixInverseNode=pd("bindMatrixInverse","mat4"),this.boneMatricesNode=gd("skeleton.boneMatrices","mat4",e.skeleton.bones.length),this.positionNode=Dl,this.toPositionNode=Dl,this.previousBoneMatricesNode=null}getSkinnedPosition(e=this.boneMatricesNode,t=this.positionNode){const{skinIndexNode:r,skinWeightNode:s,bindMatrixNode:i,bindMatrixInverseNode:n}=this,a=e.element(r.x),o=e.element(r.y),u=e.element(r.z),l=e.element(r.w),d=i.mul(t),c=na(a.mul(s.x).mul(d),o.mul(s.y).mul(d),u.mul(s.z).mul(d),l.mul(s.w).mul(d));return n.mul(c).xyz}getSkinnedNormal(e=this.boneMatricesNode,t=Wl){const{skinIndexNode:r,skinWeightNode:s,bindMatrixNode:i,bindMatrixInverseNode:n}=this,a=e.element(r.x),o=e.element(r.y),u=e.element(r.z),l=e.element(r.w);let d=na(s.x.mul(a),s.y.mul(o),s.z.mul(u),s.w.mul(l));return d=n.mul(d).mul(i),d.transformDirection(t).xyz}getPreviousSkinnedPosition(e){const t=e.object;return null===this.previousBoneMatricesNode&&(t.skeleton.previousBoneMatrices=new Float32Array(t.skeleton.boneMatrices),this.previousBoneMatricesNode=gd("skeleton.previousBoneMatrices","mat4",t.skeleton.bones.length)),this.getSkinnedPosition(this.previousBoneMatricesNode,Il)}needsPreviousBoneMatrices(e){const t=e.renderer.getMRT();return t&&t.has("velocity")||!0===Ps(e.object).useVelocity}setup(e){this.needsPreviousBoneMatrices(e)&&Il.assign(this.getPreviousSkinnedPosition(e));const t=this.getSkinnedPosition();if(this.toPositionNode&&this.toPositionNode.assign(t),e.hasGeometryAttribute("normal")){const t=this.getSkinnedNormal();Wl.assign(t),e.hasGeometryAttribute("tangent")&&xd.assign(t)}return t}generate(e,t){if("void"!==t)return super.generate(e,t)}update(e){const t=e.object&&e.object.skeleton?e.object.skeleton:this.skinnedMesh.skeleton;Hc.get(t)!==e.frameId&&(Hc.set(t,e.frameId),null!==this.previousBoneMatricesNode&&t.previousBoneMatrices.set(t.boneMatrices),t.update())}}const jc=e=>Li(new Wc(e));class qc extends Hs{static get type(){return"LoopNode"}constructor(e=[]){super(),this.params=e}getVarName(e){return String.fromCharCode("i".charCodeAt(0)+e)}getProperties(e){const t=e.getNodeProperties(this);if(void 0!==t.stackNode)return t;const r={};for(let e=0,t=this.params.length-1;e<t;e++){const t=this.params[e],s=!0!==t.isNode&&t.name||this.getVarName(e),i=!0!==t.isNode&&t.type||"int";r[s]=Iu(s,i)}const s=e.addStack();t.returnsNode=this.params[this.params.length-1](r,e),t.stackNode=s;const i=this.params[0];return!0!==i.isNode&&"function"==typeof i.update&&(t.updateNode=Ui(this.params[0].update)(r)),e.removeStack(),t}getNodeType(e){const{returnsNode:t}=this.getProperties(e);return t?t.getNodeType(e):"void"}setup(e){this.getProperties(e)}generate(e){const t=this.getProperties(e),r=this.params,s=t.stackNode;for(let s=0,i=r.length-1;s<i;s++){const i=r[s];let n,a=!1,o=null,u=null,l=null,d=null,c=null,h=null;if(i.isNode?"bool"===i.getNodeType(e)?(a=!0,d="bool",u=i.build(e,d)):(d="int",l=this.getVarName(s),o="0",u=i.build(e,d),c="<"):(d=i.type||"int",l=i.name||this.getVarName(s),o=i.start,u=i.end,c=i.condition,h=i.update,"number"==typeof o?o=e.generateConst(d,o):o&&o.isNode&&(o=o.build(e,d)),"number"==typeof u?u=e.generateConst(d,u):u&&u.isNode&&(u=u.build(e,d)),void 0!==o&&void 0===u?(o+=" - 1",u="0",c=">="):void 0!==u&&void 0===o&&(o="0",c="<"),void 0===c&&(c=Number(o)>Number(u)?">=":"<")),a)n=`while ( ${u} )`;else{const r={start:o,end:u},s=r.start,i=r.end;let a;const p=()=>c.includes("<")?"+=":"-=";if(null!=h)switch(typeof h){case"function":a=e.flowStagesNode(t.updateNode,"void").code.replace(/\t|;/g,"");break;case"number":a=l+" "+p()+" "+e.generateConst(d,h);break;case"string":a=l+" "+h;break;default:h.isNode?a=l+" "+p()+" "+h.build(e):(console.error("THREE.TSL: 'Loop( { update: ... } )' is not a function, string or number."),a="break /* invalid update */")}else h="int"===d||"uint"===d?c.includes("<")?"++":"--":p()+" 1.",a=l+" "+h;n=`for ( ${e.getVar(d,l)+" = "+s}; ${l+" "+c+" "+i}; ${a} )`}e.addFlowCode((0===s?"\n":"")+e.tab+n+" {\n\n").addFlowTab()}const i=s.build(e,"void"),n=t.returnsNode?t.returnsNode.build(e):"";e.removeFlowTab().addFlowCode("\n"+e.tab+i);for(let t=0,r=this.params.length-1;t<r;t++)e.addFlowCode((0===t?"":e.tab)+"}\n\n").removeFlowTab();return e.addFlowTab(),n}}const Xc=(...e)=>Li(new qc(Bi(e,"int"))).toStack(),Kc=()=>Iu("break").toStack(),Yc=new WeakMap,Qc=new s,Zc=Ui((({bufferMap:e,influence:t,stride:r,width:s,depth:i,offset:n})=>{const a=Wi(Rc).mul(r).add(n),o=a.div(s),u=a.sub(o.mul(s));return Qu(e,Ki(u,o)).depth(i).xyz.mul(t)}));class Jc extends Hs{static get type(){return"MorphNode"}constructor(e){super("void"),this.mesh=e,this.morphBaseInfluence=Yn(1),this.updateType=Is.OBJECT}setup(e){const{geometry:r}=e,s=void 0!==r.morphAttributes.position,i=r.hasAttribute("normal")&&void 0!==r.morphAttributes.normal,n=r.morphAttributes.position||r.morphAttributes.normal||r.morphAttributes.color,a=void 0!==n?n.length:0,{texture:o,stride:u,size:l}=function(e){const r=void 0!==e.morphAttributes.position,s=void 0!==e.morphAttributes.normal,i=void 0!==e.morphAttributes.color,n=e.morphAttributes.position||e.morphAttributes.normal||e.morphAttributes.color,a=void 0!==n?n.length:0;let o=Yc.get(e);if(void 0===o||o.count!==a){void 0!==o&&o.texture.dispose();const u=e.morphAttributes.position||[],l=e.morphAttributes.normal||[],d=e.morphAttributes.color||[];let c=0;!0===r&&(c=1),!0===s&&(c=2),!0===i&&(c=3);let h=e.attributes.position.count*c,p=1;const g=4096;h>g&&(p=Math.ceil(h/g),h=g);const m=new Float32Array(h*p*4*a),f=new P(m,h,p,a);f.type=L,f.needsUpdate=!0;const y=4*c;for(let b=0;b<a;b++){const T=u[b],_=l[b],v=d[b],N=h*p*4*b;for(let S=0;S<T.count;S++){const w=S*y;!0===r&&(Qc.fromBufferAttribute(T,S),m[N+w+0]=Qc.x,m[N+w+1]=Qc.y,m[N+w+2]=Qc.z,m[N+w+3]=0),!0===s&&(Qc.fromBufferAttribute(_,S),m[N+w+4]=Qc.x,m[N+w+5]=Qc.y,m[N+w+6]=Qc.z,m[N+w+7]=0),!0===i&&(Qc.fromBufferAttribute(v,S),m[N+w+8]=Qc.x,m[N+w+9]=Qc.y,m[N+w+10]=Qc.z,m[N+w+11]=4===v.itemSize?Qc.w:1)}}function x(){f.dispose(),Yc.delete(e),e.removeEventListener("dispose",x)}o={count:a,texture:f,stride:c,size:new t(h,p)},Yc.set(e,o),e.addEventListener("dispose",x)}return o}(r);!0===s&&Dl.mulAssign(this.morphBaseInfluence),!0===i&&Wl.mulAssign(this.morphBaseInfluence);const d=Wi(l.width);Xc(a,(({i:e})=>{const t=Hi(0).toVar();this.mesh.count>1&&null!==this.mesh.morphTexture&&void 0!==this.mesh.morphTexture?t.assign(Qu(this.mesh.morphTexture,Ki(Wi(e).add(1),Wi(Cc))).r):t.assign(pd("morphTargetInfluences","float").element(e).toVar()),Gi(t.notEqual(0),(()=>{!0===s&&Dl.addAssign(Zc({bufferMap:o,influence:t,stride:u,width:d,depth:e,offset:Wi(0)})),!0===i&&Wl.addAssign(Zc({bufferMap:o,influence:t,stride:u,width:d,depth:e,offset:Wi(1)}))}))}))}update(){const e=this.morphBaseInfluence;this.mesh.geometry.morphTargetsRelative?e.value=1:e.value=1-this.mesh.morphTargetInfluences.reduce(((e,t)=>e+t),0)}}const eh=Di(Jc).setParameterLength(1);class th extends Hs{static get type(){return"LightingNode"}constructor(){super("vec3"),this.isLightingNode=!0}}class rh extends th{static get type(){return"AONode"}constructor(e=null){super(),this.aoNode=e}setup(e){e.context.ambientOcclusion.mulAssign(this.aoNode)}}class sh extends Xo{static get type(){return"LightingContextNode"}constructor(e,t=null,r=null,s=null){super(e),this.lightingModel=t,this.backdropNode=r,this.backdropAlphaNode=s,this._value=null}getContext(){const{backdropNode:e,backdropAlphaNode:t}=this,r={directDiffuse:Zi().toVar("directDiffuse"),directSpecular:Zi().toVar("directSpecular"),indirectDiffuse:Zi().toVar("indirectDiffuse"),indirectSpecular:Zi().toVar("indirectSpecular")};return{radiance:Zi().toVar("radiance"),irradiance:Zi().toVar("irradiance"),iblIrradiance:Zi().toVar("iblIrradiance"),ambientOcclusion:Hi(1).toVar("ambientOcclusion"),reflectedLight:r,backdrop:e,backdropAlpha:t}}setup(e){return this.value=this._value||(this._value=this.getContext()),this.value.lightingModel=this.lightingModel||e.context.lightingModel,super.setup(e)}}const ih=Di(sh);class nh extends th{static get type(){return"IrradianceNode"}constructor(e){super(),this.node=e}setup(e){e.context.irradiance.addAssign(this.node)}}let ah,oh;class uh extends Hs{static get type(){return"ScreenNode"}constructor(e){super(),this.scope=e,this.isViewportNode=!0}getNodeType(){return this.scope===uh.VIEWPORT?"vec4":"vec2"}getUpdateType(){let e=Is.NONE;return this.scope!==uh.SIZE&&this.scope!==uh.VIEWPORT||(e=Is.RENDER),this.updateType=e,e}update({renderer:e}){const t=e.getRenderTarget();this.scope===uh.VIEWPORT?null!==t?oh.copy(t.viewport):(e.getViewport(oh),oh.multiplyScalar(e.getPixelRatio())):null!==t?(ah.width=t.width,ah.height=t.height):e.getDrawingBufferSize(ah)}setup(){const e=this.scope;let r=null;return r=e===uh.SIZE?Yn(ah||(ah=new t)):e===uh.VIEWPORT?Yn(oh||(oh=new s)):Xi(ch.div(dh)),r}generate(e){if(this.scope===uh.COORDINATE){let t=e.getFragCoord();if(e.isFlipY()){const r=e.getNodeProperties(dh).outputNode.build(e);t=`${e.getType("vec2")}( ${t}.x, ${r}.y - ${t}.y )`}return t}return super.generate(e)}}uh.COORDINATE="coordinate",uh.VIEWPORT="viewport",uh.SIZE="size",uh.UV="uv";const lh=Ii(uh,uh.UV),dh=Ii(uh,uh.SIZE),ch=Ii(uh,uh.COORDINATE),hh=Ii(uh,uh.VIEWPORT),ph=hh.zw,gh=ch.sub(hh.xy),mh=gh.div(ph),fh=Ui((()=>(console.warn('THREE.TSL: "viewportResolution" is deprecated. Use "screenSize" instead.'),dh)),"vec2").once()(),yh=Ui((()=>(console.warn('THREE.TSL: "viewportTopLeft" is deprecated. Use "screenUV" instead.'),lh)),"vec2").once()(),xh=Ui((()=>(console.warn('THREE.TSL: "viewportBottomLeft" is deprecated. Use "screenUV.flipY()" instead.'),lh.flipY())),"vec2").once()(),bh=new t;class Th extends Ku{static get type(){return"ViewportTextureNode"}constructor(e=lh,t=null,r=null){null===r&&((r=new F).minFilter=B),super(r,e,t),this.generateMipmaps=!1,this.isOutputTextureNode=!0,this.updateBeforeType=Is.FRAME}updateBefore(e){const t=e.renderer;t.getDrawingBufferSize(bh);const r=this.value;r.image.width===bh.width&&r.image.height===bh.height||(r.image.width=bh.width,r.image.height=bh.height,r.needsUpdate=!0);const s=r.generateMipmaps;r.generateMipmaps=this.generateMipmaps,t.copyFramebufferToTexture(r),r.generateMipmaps=s}clone(){const e=new this.constructor(this.uvNode,this.levelNode,this.value);return e.generateMipmaps=this.generateMipmaps,e}}const _h=Di(Th).setParameterLength(0,3),vh=Di(Th,null,null,{generateMipmaps:!0}).setParameterLength(0,3);let Nh=null;class Sh extends Th{static get type(){return"ViewportDepthTextureNode"}constructor(e=lh,t=null){null===Nh&&(Nh=new D),super(e,t,Nh)}}const wh=Di(Sh).setParameterLength(0,2);class Eh extends Hs{static get type(){return"ViewportDepthNode"}constructor(e,t=null){super("float"),this.scope=e,this.valueNode=t,this.isViewportDepthNode=!0}generate(e){const{scope:t}=this;return t===Eh.DEPTH_BASE?e.getFragDepth():super.generate(e)}setup({camera:e}){const{scope:t}=this,r=this.valueNode;let s=null;if(t===Eh.DEPTH_BASE)null!==r&&(s=Ph().assign(r));else if(t===Eh.DEPTH)s=e.isPerspectiveCamera?Rh(Ol.z,nl,al):Ah(Ol.z,nl,al);else if(t===Eh.LINEAR_DEPTH)if(null!==r)if(e.isPerspectiveCamera){const e=Ch(r,nl,al);s=Ah(e,nl,al)}else s=r;else s=Ah(Ol.z,nl,al);return s}}Eh.DEPTH_BASE="depthBase",Eh.DEPTH="depth",Eh.LINEAR_DEPTH="linearDepth";const Ah=(e,t,r)=>e.add(t).div(t.sub(r)),Rh=(e,t,r)=>t.add(e).mul(r).div(r.sub(t).mul(e)),Ch=(e,t,r)=>t.mul(r).div(r.sub(t).mul(e).sub(r)),Mh=(e,t,r)=>{t=t.max(1e-6).toVar();const s=Ha(e.negate().div(t)),i=Ha(r.div(t));return s.div(i)},Ph=Di(Eh,Eh.DEPTH_BASE),Lh=Ii(Eh,Eh.DEPTH),Fh=Di(Eh,Eh.LINEAR_DEPTH).setParameterLength(0,1),Bh=Fh(wh());Lh.assign=e=>Ph(e);class Dh extends Hs{static get type(){return"ClippingNode"}constructor(e=Dh.DEFAULT){super(),this.scope=e}setup(e){super.setup(e);const t=e.clippingContext,{intersectionPlanes:r,unionPlanes:s}=t;return this.hardwareClipping=e.material.hardwareClipping,this.scope===Dh.ALPHA_TO_COVERAGE?this.setupAlphaToCoverage(r,s):this.scope===Dh.HARDWARE?this.setupHardwareClipping(s,e):this.setupDefault(r,s)}setupAlphaToCoverage(e,t){return Ui((()=>{const r=Hi().toVar("distanceToPlane"),s=Hi().toVar("distanceToGradient"),i=Hi(1).toVar("clipOpacity"),n=t.length;if(!1===this.hardwareClipping&&n>0){const e=rl(t);Xc(n,(({i:t})=>{const n=e.element(t);r.assign(Ol.dot(n.xyz).negate().add(n.w)),s.assign(r.fwidth().div(2)),i.mulAssign(Vo(s.negate(),s,r))}))}const a=e.length;if(a>0){const t=rl(e),n=Hi(1).toVar("intersectionClipOpacity");Xc(a,(({i:e})=>{const i=t.element(e);r.assign(Ol.dot(i.xyz).negate().add(i.w)),s.assign(r.fwidth().div(2)),n.mulAssign(Vo(s.negate(),s,r).oneMinus())})),i.mulAssign(n.oneMinus())}mn.a.mulAssign(i),mn.a.equal(0).discard()}))()}setupDefault(e,t){return Ui((()=>{const r=t.length;if(!1===this.hardwareClipping&&r>0){const e=rl(t);Xc(r,(({i:t})=>{const r=e.element(t);Ol.dot(r.xyz).greaterThan(r.w).discard()}))}const s=e.length;if(s>0){const t=rl(e),r=qi(!0).toVar("clipped");Xc(s,(({i:e})=>{const s=t.element(e);r.assign(Ol.dot(s.xyz).greaterThan(s.w).and(r))})),r.discard()}}))()}setupHardwareClipping(e,t){const r=e.length;return t.enableHardwareClipping(r),Ui((()=>{const s=rl(e),i=sl(t.getClipDistance());Xc(r,(({i:e})=>{const t=s.element(e),r=Ol.dot(t.xyz).sub(t.w).negate();i.element(e).assign(r)}))}))()}}Dh.ALPHA_TO_COVERAGE="alphaToCoverage",Dh.DEFAULT="default",Dh.HARDWARE="hardware";const Ih=Ui((([e])=>Ya(oa(1e4,Qa(oa(17,e.x).add(oa(.1,e.y)))).mul(na(.1,so(Qa(oa(13,e.y).add(e.x)))))))),Vh=Ui((([e])=>Ih(Xi(Ih(e.xy),e.z)))),Uh=Ui((([e])=>{const t=bo(no(uo(e.xyz)),no(lo(e.xyz))),r=Hi(1).div(Hi(.05).mul(t)).toVar("pixScale"),s=Xi(za(qa(Ha(r))),za(Xa(Ha(r)))),i=Xi(Vh(qa(s.x.mul(e.xyz))),Vh(qa(s.y.mul(e.xyz)))),n=Ya(Ha(r)),a=na(oa(n.oneMinus(),i.x),oa(n,i.y)),o=xo(n,n.oneMinus()),u=Zi(a.mul(a).div(oa(2,o).mul(aa(1,o))),a.sub(oa(.5,o)).div(aa(1,o)),aa(1,aa(1,a).mul(aa(1,a)).div(oa(2,o).mul(aa(1,o))))),l=a.lessThan(o.oneMinus()).select(a.lessThan(o).select(u.x,u.y),u.z);return Bo(l,1e-6,1)})).setLayout({name:"getAlphaHashThreshold",type:"float",inputs:[{name:"position",type:"vec3"}]});class Oh extends zu{static get type(){return"VertexColorNode"}constructor(e){super(null,"vec4"),this.isVertexColorNode=!0,this.index=e}getAttributeName(){const e=this.index;return"color"+(e>0?e:"")}generate(e){const t=this.getAttributeName(e);let r;return r=!0===e.hasGeometryAttribute(t)?super.generate(e):e.generateConst(this.nodeType,new s(1,1,1,1)),r}serialize(e){super.serialize(e),e.index=this.index}deserialize(e){super.deserialize(e),this.index=e.index}}const kh=(e=0)=>Li(new Oh(e));class Gh extends I{static get type(){return"NodeMaterial"}get type(){return this.constructor.type}set type(e){}constructor(){super(),this.isNodeMaterial=!0,this.fog=!0,this.lights=!1,this.hardwareClipping=!1,this.lightsNode=null,this.envNode=null,this.aoNode=null,this.colorNode=null,this.normalNode=null,this.opacityNode=null,this.backdropNode=null,this.backdropAlphaNode=null,this.alphaTestNode=null,this.positionNode=null,this.geometryNode=null,this.depthNode=null,this.receivedShadowPositionNode=null,this.castShadowPositionNode=null,this.receivedShadowNode=null,this.castShadowNode=null,this.outputNode=null,this.mrtNode=null,this.fragmentNode=null,this.vertexNode=null,Object.defineProperty(this,"shadowPositionNode",{get:()=>this.receivedShadowPositionNode,set:e=>{console.warn('THREE.NodeMaterial: ".shadowPositionNode" was renamed to ".receivedShadowPositionNode".'),this.receivedShadowPositionNode=e}})}customProgramCacheKey(){return this.type+vs(this)}build(e){this.setup(e)}setupObserver(e){return new ys(e)}setup(e){e.context.setupNormal=()=>this.setupNormal(e),e.context.setupPositionView=()=>this.setupPositionView(e),e.context.setupModelViewProjection=()=>this.setupModelViewProjection(e);const t=e.renderer,r=t.getRenderTarget();e.addStack();const s=this.vertexNode||this.setupVertex(e);let i;e.stack.outputNode=s,this.setupHardwareClipping(e),null!==this.geometryNode&&(e.stack.outputNode=e.stack.outputNode.bypass(this.geometryNode)),e.addFlow("vertex",e.removeStack()),e.addStack();const n=this.setupClipping(e);if(!0!==this.depthWrite&&!0!==this.depthTest||(null!==r?!0===r.depthBuffer&&this.setupDepth(e):!0===t.depth&&this.setupDepth(e)),null===this.fragmentNode){this.setupDiffuseColor(e),this.setupVariants(e);const s=this.setupLighting(e);null!==n&&e.stack.add(n);const a=rn(s,mn.a).max(0);i=this.setupOutput(e,a),Fn.assign(i);const o=null!==this.outputNode;if(o&&(i=this.outputNode),null!==r){const e=t.getMRT(),r=this.mrtNode;null!==e?(o&&Fn.assign(i),i=e,null!==r&&(i=e.merge(r))):null!==r&&(i=r)}}else{let t=this.fragmentNode;!0!==t.isOutputStructNode&&(t=rn(t)),i=this.setupOutput(e,t)}e.stack.outputNode=i,e.addFlow("fragment",e.removeStack()),e.observer=this.setupObserver(e)}setupClipping(e){if(null===e.clippingContext)return null;const{unionPlanes:t,intersectionPlanes:r}=e.clippingContext;let s=null;if(t.length>0||r.length>0){const t=e.renderer.samples;this.alphaToCoverage&&t>1?s=Li(new Dh(Dh.ALPHA_TO_COVERAGE)):e.stack.add(Li(new Dh))}return s}setupHardwareClipping(e){if(this.hardwareClipping=!1,null===e.clippingContext)return;const t=e.clippingContext.unionPlanes.length;t>0&&t<=8&&e.isAvailable("clipDistance")&&(e.stack.add(Li(new Dh(Dh.HARDWARE))),this.hardwareClipping=!0)}setupDepth(e){const{renderer:t,camera:r}=e;let s=this.depthNode;if(null===s){const e=t.getMRT();e&&e.has("depth")?s=e.get("depth"):!0===t.logarithmicDepthBuffer&&(s=r.isPerspectiveCamera?Mh(Ol.z,nl,al):Ah(Ol.z,nl,al))}null!==s&&Lh.assign(s).toStack()}setupPositionView(){return Ml.mul(Dl).xyz}setupModelViewProjection(){return ol.mul(Ol)}setupVertex(e){return e.addStack(),this.setupPosition(e),e.context.vertex=e.removeStack(),Ec}setupPosition(e){const{object:t,geometry:r}=e;if((r.morphAttributes.position||r.morphAttributes.normal||r.morphAttributes.color)&&eh(t).toStack(),!0===t.isSkinnedMesh&&jc(t).toStack(),this.displacementMap){const e=fd("displacementMap","texture"),t=fd("displacementScale","float"),r=fd("displacementBias","float");Dl.addAssign(Wl.normalize().mul(e.x.mul(t).add(r)))}return t.isBatchedMesh&&Oc(t).toStack(),t.isInstancedMesh&&t.instanceMatrix&&!0===t.instanceMatrix.isInstancedBufferAttribute&&Vc(t).toStack(),null!==this.positionNode&&Dl.assign(this.positionNode.context({isPositionNodeInput:!0})),Dl}setupDiffuseColor({object:e,geometry:t}){let r=this.colorNode?rn(this.colorNode):$d;if(!0===this.vertexColors&&t.hasAttribute("color")&&(r=r.mul(kh())),e.instanceColor){r=gn("vec3","vInstanceColor").mul(r)}if(e.isBatchedMesh&&e._colorsTexture){r=gn("vec3","vBatchColor").mul(r)}mn.assign(r);const s=this.opacityNode?Hi(this.opacityNode):jd;if(mn.a.assign(mn.a.mul(s)),null!==this.alphaTestNode||this.alphaTest>0){const e=null!==this.alphaTestNode?Hi(this.alphaTestNode):zd;mn.a.lessThanEqual(e).discard()}!0===this.alphaHash&&mn.a.lessThan(Uh(Dl)).discard(),!1===this.transparent&&this.blending===V&&!1===this.alphaToCoverage&&mn.a.assign(1)}setupVariants(){}setupOutgoingLight(){return!0===this.lights?Zi(0):mn.rgb}setupNormal(){return this.normalNode?Zi(this.normalNode):ec}setupEnvironment(){let e=null;return this.envNode?e=this.envNode:this.envMap&&(e=this.envMap.isCubeTexture?fd("envMap","cubeTexture"):fd("envMap","texture")),e}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new nh(Nc)),t}setupLights(e){const t=[],r=this.setupEnvironment(e);r&&r.isLightingNode&&t.push(r);const s=this.setupLightMap(e);if(s&&s.isLightingNode&&t.push(s),null!==this.aoNode||e.material.aoMap){const e=null!==this.aoNode?this.aoNode:Sc;t.push(new rh(e))}let i=this.lightsNode||e.lightsNode;return t.length>0&&(i=e.renderer.lighting.createNode([...i.getLights(),...t])),i}setupLightingModel(){}setupLighting(e){const{material:t}=e,{backdropNode:r,backdropAlphaNode:s,emissiveNode:i}=this,n=!0===this.lights||null!==this.lightsNode?this.setupLights(e):null;let a=this.setupOutgoingLight(e);if(n&&n.getScope().hasLights){const t=this.setupLightingModel(e)||null;a=ih(n,t,r,s)}else null!==r&&(a=Zi(null!==s?Fo(a,r,s):r));return(i&&!0===i.isNode||t.emissive&&!0===t.emissive.isColor)&&(fn.assign(Zi(i||Wd)),a=a.add(fn)),a}setupFog(e,t){const r=e.fogNode;return r&&(Fn.assign(t),t=rn(r)),t}setupOutput(e,t){return!0===this.fog&&(t=this.setupFog(e,t)),t}setDefaultValues(e){for(const t in e){const r=e[t];void 0===this[t]&&(this[t]=r,r&&r.clone&&(this[t]=r.clone()))}const t=Object.getOwnPropertyDescriptors(e.constructor.prototype);for(const e in t)void 0===Object.getOwnPropertyDescriptor(this.constructor.prototype,e)&&void 0!==t[e].get&&Object.defineProperty(this.constructor.prototype,e,t[e])}toJSON(e){const t=void 0===e||"string"==typeof e;t&&(e={textures:{},images:{},nodes:{}});const r=I.prototype.toJSON.call(this,e),s=Ns(this);r.inputNodes={};for(const{property:t,childNode:i}of s)r.inputNodes[t]=i.toJSON(e).uuid;function i(e){const t=[];for(const r in e){const s=e[r];delete s.metadata,t.push(s)}return t}if(t){const t=i(e.textures),s=i(e.images),n=i(e.nodes);t.length>0&&(r.textures=t),s.length>0&&(r.images=s),n.length>0&&(r.nodes=n)}return r}copy(e){return this.lightsNode=e.lightsNode,this.envNode=e.envNode,this.colorNode=e.colorNode,this.normalNode=e.normalNode,this.opacityNode=e.opacityNode,this.backdropNode=e.backdropNode,this.backdropAlphaNode=e.backdropAlphaNode,this.alphaTestNode=e.alphaTestNode,this.positionNode=e.positionNode,this.geometryNode=e.geometryNode,this.depthNode=e.depthNode,this.receivedShadowPositionNode=e.receivedShadowPositionNode,this.castShadowPositionNode=e.castShadowPositionNode,this.receivedShadowNode=e.receivedShadowNode,this.castShadowNode=e.castShadowNode,this.outputNode=e.outputNode,this.mrtNode=e.mrtNode,this.fragmentNode=e.fragmentNode,this.vertexNode=e.vertexNode,super.copy(e)}}const zh=new U;class $h extends Gh{static get type(){return"LineBasicNodeMaterial"}constructor(e){super(),this.isLineBasicNodeMaterial=!0,this.setDefaultValues(zh),this.setValues(e)}}const Hh=new O;class Wh extends Gh{static get type(){return"LineDashedNodeMaterial"}constructor(e){super(),this.isLineDashedNodeMaterial=!0,this.setDefaultValues(Hh),this.dashOffset=0,this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.setValues(e)}setupVariants(){const e=this.offsetNode?Hi(this.offsetNode):Tc,t=this.dashScaleNode?Hi(this.dashScaleNode):fc,r=this.dashSizeNode?Hi(this.dashSizeNode):yc,s=this.gapSizeNode?Hi(this.gapSizeNode):xc;Bn.assign(r),Dn.assign(s);const i=su($u("lineDistance").mul(t));(e?i.add(e):i).mod(Bn.add(Dn)).greaterThan(Bn).discard()}}let jh=null;class qh extends Th{static get type(){return"ViewportSharedTextureNode"}constructor(e=lh,t=null){null===jh&&(jh=new F),super(e,t,jh)}updateReference(){return this}}const Xh=Di(qh).setParameterLength(0,2),Kh=new O;class Yh extends Gh{static get type(){return"Line2NodeMaterial"}constructor(e={}){super(),this.isLine2NodeMaterial=!0,this.setDefaultValues(Kh),this.useColor=e.vertexColors,this.dashOffset=0,this.lineWidth=1,this.lineColorNode=null,this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.blending=k,this._useDash=e.dashed,this._useAlphaToCoverage=!0,this._useWorldUnits=!1,this.setValues(e)}setup(e){const{renderer:t}=e,r=this._useAlphaToCoverage,s=this.useColor,i=this._useDash,n=this._useWorldUnits,a=Ui((({start:e,end:t})=>{const r=ol.element(2).element(2),s=ol.element(3).element(2).mul(-.5).div(r).sub(e.z).div(t.z.sub(e.z));return rn(Fo(e.xyz,t.xyz,s),t.w)})).setLayout({name:"trimSegment",type:"vec4",inputs:[{name:"start",type:"vec4"},{name:"end",type:"vec4"}]});this.vertexNode=Ui((()=>{const e=$u("instanceStart"),t=$u("instanceEnd"),r=rn(Ml.mul(rn(e,1))).toVar("start"),s=rn(Ml.mul(rn(t,1))).toVar("end");if(i){const e=this.dashScaleNode?Hi(this.dashScaleNode):fc,t=this.offsetNode?Hi(this.offsetNode):Tc,r=$u("instanceDistanceStart"),s=$u("instanceDistanceEnd");let i=Bl.y.lessThan(.5).select(e.mul(r),e.mul(s));i=i.add(t),gn("float","lineDistance").assign(i)}n&&(gn("vec3","worldStart").assign(r.xyz),gn("vec3","worldEnd").assign(s.xyz));const o=hh.z.div(hh.w),u=ol.element(2).element(3).equal(-1);Gi(u,(()=>{Gi(r.z.lessThan(0).and(s.z.greaterThan(0)),(()=>{s.assign(a({start:r,end:s}))})).ElseIf(s.z.lessThan(0).and(r.z.greaterThanEqual(0)),(()=>{r.assign(a({start:s,end:r}))}))}));const l=ol.mul(r),d=ol.mul(s),c=l.xyz.div(l.w),h=d.xyz.div(d.w),p=h.xy.sub(c.xy).toVar();p.x.assign(p.x.mul(o)),p.assign(p.normalize());const g=rn().toVar();if(n){const e=s.xyz.sub(r.xyz).normalize(),t=Fo(r.xyz,s.xyz,.5).normalize(),n=e.cross(t).normalize(),a=e.cross(n),o=gn("vec4","worldPos");o.assign(Bl.y.lessThan(.5).select(r,s));const u=bc.mul(.5);o.addAssign(rn(Bl.x.lessThan(0).select(n.mul(u),n.mul(u).negate()),0)),i||(o.addAssign(rn(Bl.y.lessThan(.5).select(e.mul(u).negate(),e.mul(u)),0)),o.addAssign(rn(a.mul(u),0)),Gi(Bl.y.greaterThan(1).or(Bl.y.lessThan(0)),(()=>{o.subAssign(rn(a.mul(2).mul(u),0))}))),g.assign(ol.mul(o));const l=Zi().toVar();l.assign(Bl.y.lessThan(.5).select(c,h)),g.z.assign(l.z.mul(g.w))}else{const e=Xi(p.y,p.x.negate()).toVar("offset");p.x.assign(p.x.div(o)),e.x.assign(e.x.div(o)),e.assign(Bl.x.lessThan(0).select(e.negate(),e)),Gi(Bl.y.lessThan(0),(()=>{e.assign(e.sub(p))})).ElseIf(Bl.y.greaterThan(1),(()=>{e.assign(e.add(p))})),e.assign(e.mul(bc)),e.assign(e.div(hh.w)),g.assign(Bl.y.lessThan(.5).select(l,d)),e.assign(e.mul(g.w)),g.assign(g.add(rn(e,0,0)))}return g}))();const o=Ui((({p1:e,p2:t,p3:r,p4:s})=>{const i=e.sub(r),n=s.sub(r),a=t.sub(e),o=i.dot(n),u=n.dot(a),l=i.dot(a),d=n.dot(n),c=a.dot(a).mul(d).sub(u.mul(u)),h=o.mul(u).sub(l.mul(d)).div(c).clamp(),p=o.add(u.mul(h)).div(d).clamp();return Xi(h,p)}));if(this.colorNode=Ui((()=>{const e=Hu();if(i){const t=this.dashSizeNode?Hi(this.dashSizeNode):yc,r=this.gapSizeNode?Hi(this.gapSizeNode):xc;Bn.assign(t),Dn.assign(r);const s=gn("float","lineDistance");e.y.lessThan(-1).or(e.y.greaterThan(1)).discard(),s.mod(Bn.add(Dn)).greaterThan(Bn).discard()}const a=Hi(1).toVar("alpha");if(n){const e=gn("vec3","worldStart"),s=gn("vec3","worldEnd"),n=gn("vec4","worldPos").xyz.normalize().mul(1e5),u=s.sub(e),l=o({p1:e,p2:s,p3:Zi(0,0,0),p4:n}),d=e.add(u.mul(l.x)),c=n.mul(l.y),h=d.sub(c).length().div(bc);if(!i)if(r&&t.samples>1){const e=h.fwidth();a.assign(Vo(e.negate().add(.5),e.add(.5),h).oneMinus())}else h.greaterThan(.5).discard()}else if(r&&t.samples>1){const t=e.x,r=e.y.greaterThan(0).select(e.y.sub(1),e.y.add(1)),s=t.mul(t).add(r.mul(r)),i=Hi(s.fwidth()).toVar("dlen");Gi(e.y.abs().greaterThan(1),(()=>{a.assign(Vo(i.oneMinus(),i.add(1),s).oneMinus())}))}else Gi(e.y.abs().greaterThan(1),(()=>{const t=e.x,r=e.y.greaterThan(0).select(e.y.sub(1),e.y.add(1));t.mul(t).add(r.mul(r)).greaterThan(1).discard()}));let u;if(this.lineColorNode)u=this.lineColorNode;else if(s){const e=$u("instanceColorStart"),t=$u("instanceColorEnd");u=Bl.y.lessThan(.5).select(e,t).mul($d)}else u=$d;return rn(u,a)}))(),this.transparent){const e=this.opacityNode?Hi(this.opacityNode):jd;this.outputNode=rn(this.colorNode.rgb.mul(e).add(Xh().rgb.mul(e.oneMinus())),this.colorNode.a)}super.setup(e)}get worldUnits(){return this._useWorldUnits}set worldUnits(e){this._useWorldUnits!==e&&(this._useWorldUnits=e,this.needsUpdate=!0)}get dashed(){return this._useDash}set dashed(e){this._useDash!==e&&(this._useDash=e,this.needsUpdate=!0)}get alphaToCoverage(){return this._useAlphaToCoverage}set alphaToCoverage(e){this._useAlphaToCoverage!==e&&(this._useAlphaToCoverage=e,this.needsUpdate=!0)}}const Qh=e=>Li(e).mul(.5).add(.5),Zh=new G;class Jh extends Gh{static get type(){return"MeshNormalNodeMaterial"}constructor(e){super(),this.isMeshNormalNodeMaterial=!0,this.setDefaultValues(Zh),this.setValues(e)}setupDiffuseColor(){const e=this.opacityNode?Hi(this.opacityNode):jd;mn.assign(pu(rn(Qh(Kl),e),z))}}class ep extends qs{static get type(){return"EquirectUVNode"}constructor(e=Ul){super("vec2"),this.dirNode=e}setup(){const e=this.dirNode,t=e.z.atan(e.x).mul(1/(2*Math.PI)).add(.5),r=e.y.clamp(-1,1).asin().mul(1/Math.PI).add(.5);return Xi(t,r)}}const tp=Di(ep).setParameterLength(0,1);class rp extends ${constructor(e=1,t={}){super(e,t),this.isCubeRenderTarget=!0}fromEquirectangularTexture(e,t){const r=t.minFilter,s=t.generateMipmaps;t.generateMipmaps=!0,this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const i=new H(5,5,5),n=tp(Ul),a=new Gh;a.colorNode=Yu(t,n,0),a.side=N,a.blending=k;const o=new W(i,a),u=new j;u.add(o),t.minFilter===B&&(t.minFilter=q);const l=new X(1,10,this),d=e.getMRT();return e.setMRT(null),l.update(e,u),e.setMRT(d),t.minFilter=r,t.currentGenerateMipmaps=s,o.geometry.dispose(),o.material.dispose(),this}}const sp=new WeakMap;class ip extends qs{static get type(){return"CubeMapNode"}constructor(e){super("vec3"),this.envNode=e,this._cubeTexture=null,this._cubeTextureNode=dd(null);const t=new K;t.isRenderTargetTexture=!0,this._defaultTexture=t,this.updateBeforeType=Is.RENDER}updateBefore(e){const{renderer:t,material:r}=e,s=this.envNode;if(s.isTextureNode||s.isMaterialReferenceNode){const e=s.isTextureNode?s.value:r[s.property];if(e&&e.isTexture){const r=e.mapping;if(r===Y||r===Q){if(sp.has(e)){const t=sp.get(e);ap(t,e.mapping),this._cubeTexture=t}else{const r=e.image;if(function(e){return null!=e&&e.height>0}(r)){const s=new rp(r.height);s.fromEquirectangularTexture(t,e),ap(s.texture,e.mapping),this._cubeTexture=s.texture,sp.set(e,s.texture),e.addEventListener("dispose",np)}else this._cubeTexture=this._defaultTexture}this._cubeTextureNode.value=this._cubeTexture}else this._cubeTextureNode=this.envNode}}}setup(e){return this.updateBefore(e),this._cubeTextureNode}}function np(e){const t=e.target;t.removeEventListener("dispose",np);const r=sp.get(t);void 0!==r&&(sp.delete(t),r.dispose())}function ap(e,t){t===Y?e.mapping=w:t===Q&&(e.mapping=E)}const op=Di(ip).setParameterLength(1);class up extends th{static get type(){return"BasicEnvironmentNode"}constructor(e=null){super(),this.envNode=e}setup(e){e.context.environment=op(this.envNode)}}class lp extends th{static get type(){return"BasicLightMapNode"}constructor(e=null){super(),this.lightMapNode=e}setup(e){const t=Hi(1/Math.PI);e.context.irradianceLightMap=this.lightMapNode.mul(t)}}class dp{start(e){e.lightsNode.setupLights(e,e.lightsNode.getLightNodes(e)),this.indirect(e)}finish(){}direct(){}directRectArea(){}indirect(){}ambientOcclusion(){}}class cp extends dp{constructor(){super()}indirect({context:e}){const t=e.ambientOcclusion,r=e.reflectedLight,s=e.irradianceLightMap;r.indirectDiffuse.assign(rn(0)),s?r.indirectDiffuse.addAssign(s):r.indirectDiffuse.addAssign(rn(1,1,1,0)),r.indirectDiffuse.mulAssign(t),r.indirectDiffuse.mulAssign(mn.rgb)}finish(e){const{material:t,context:r}=e,s=r.outgoingLight,i=e.context.environment;if(i)switch(t.combine){case ee:s.rgb.assign(Fo(s.rgb,s.rgb.mul(i.rgb),Yd.mul(Qd)));break;case J:s.rgb.assign(Fo(s.rgb,i.rgb,Yd.mul(Qd)));break;case Z:s.rgb.addAssign(i.rgb.mul(Yd.mul(Qd)));break;default:console.warn("THREE.BasicLightingModel: Unsupported .combine value:",t.combine)}}}const hp=new te;class pp extends Gh{static get type(){return"MeshBasicNodeMaterial"}constructor(e){super(),this.isMeshBasicNodeMaterial=!0,this.lights=!0,this.setDefaultValues(hp),this.setValues(e)}setupNormal(){return ql}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new up(t):null}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new lp(Nc)),t}setupOutgoingLight(){return mn.rgb}setupLightingModel(){return new cp}}const gp=Ui((({f0:e,f90:t,dotVH:r})=>{const s=r.mul(-5.55473).sub(6.98316).mul(r).exp2();return e.mul(s.oneMinus()).add(t.mul(s))})),mp=Ui((e=>e.diffuseColor.mul(1/Math.PI))),fp=Ui((({dotNH:e})=>Ln.mul(Hi(.5)).add(1).mul(Hi(1/Math.PI)).mul(e.pow(Ln)))),yp=Ui((({lightDirection:e})=>{const t=e.add(kl).normalize(),r=Kl.dot(t).clamp(),s=kl.dot(t).clamp(),i=gp({f0:Mn,f90:1,dotVH:s}),n=Hi(.25),a=fp({dotNH:r});return i.mul(n).mul(a)}));class xp extends cp{constructor(e=!0){super(),this.specular=e}direct({lightDirection:e,lightColor:t,reflectedLight:r}){const s=Kl.dot(e).clamp().mul(t);r.directDiffuse.addAssign(s.mul(mp({diffuseColor:mn.rgb}))),!0===this.specular&&r.directSpecular.addAssign(s.mul(yp({lightDirection:e})).mul(Yd))}indirect(e){const{ambientOcclusion:t,irradiance:r,reflectedLight:s}=e.context;s.indirectDiffuse.addAssign(r.mul(mp({diffuseColor:mn}))),s.indirectDiffuse.mulAssign(t)}}const bp=new re;class Tp extends Gh{static get type(){return"MeshLambertNodeMaterial"}constructor(e){super(),this.isMeshLambertNodeMaterial=!0,this.lights=!0,this.setDefaultValues(bp),this.setValues(e)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new up(t):null}setupLightingModel(){return new xp(!1)}}const _p=new se;class vp extends Gh{static get type(){return"MeshPhongNodeMaterial"}constructor(e){super(),this.isMeshPhongNodeMaterial=!0,this.lights=!0,this.shininessNode=null,this.specularNode=null,this.setDefaultValues(_p),this.setValues(e)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new up(t):null}setupLightingModel(){return new xp}setupVariants(){const e=(this.shininessNode?Hi(this.shininessNode):Hd).max(1e-4);Ln.assign(e);const t=this.specularNode||qd;Mn.assign(t)}copy(e){return this.shininessNode=e.shininessNode,this.specularNode=e.specularNode,super.copy(e)}}const Np=Ui((e=>{if(!1===e.geometry.hasAttribute("normal"))return Hi(0);const t=ql.dFdx().abs().max(ql.dFdy().abs());return t.x.max(t.y).max(t.z)})),Sp=Ui((e=>{const{roughness:t}=e,r=Np();let s=t.max(.0525);return s=s.add(r),s=s.min(1),s})),wp=Ui((({alpha:e,dotNL:t,dotNV:r})=>{const s=e.pow2(),i=t.mul(s.add(s.oneMinus().mul(r.pow2())).sqrt()),n=r.mul(s.add(s.oneMinus().mul(t.pow2())).sqrt());return ua(.5,i.add(n).max(Fa))})).setLayout({name:"V_GGX_SmithCorrelated",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNL",type:"float"},{name:"dotNV",type:"float"}]}),Ep=Ui((({alphaT:e,alphaB:t,dotTV:r,dotBV:s,dotTL:i,dotBL:n,dotNV:a,dotNL:o})=>{const u=o.mul(Zi(e.mul(r),t.mul(s),a).length()),l=a.mul(Zi(e.mul(i),t.mul(n),o).length());return ua(.5,u.add(l)).saturate()})).setLayout({name:"V_GGX_SmithCorrelated_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotTV",type:"float",qualifier:"in"},{name:"dotBV",type:"float",qualifier:"in"},{name:"dotTL",type:"float",qualifier:"in"},{name:"dotBL",type:"float",qualifier:"in"},{name:"dotNV",type:"float",qualifier:"in"},{name:"dotNL",type:"float",qualifier:"in"}]}),Ap=Ui((({alpha:e,dotNH:t})=>{const r=e.pow2(),s=t.pow2().mul(r.oneMinus()).oneMinus();return r.div(s.pow2()).mul(1/Math.PI)})).setLayout({name:"D_GGX",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNH",type:"float"}]}),Rp=Hi(1/Math.PI),Cp=Ui((({alphaT:e,alphaB:t,dotNH:r,dotTH:s,dotBH:i})=>{const n=e.mul(t),a=Zi(t.mul(s),e.mul(i),n.mul(r)),o=a.dot(a),u=n.div(o);return Rp.mul(n.mul(u.pow2()))})).setLayout({name:"D_GGX_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotNH",type:"float",qualifier:"in"},{name:"dotTH",type:"float",qualifier:"in"},{name:"dotBH",type:"float",qualifier:"in"}]}),Mp=Ui((e=>{const{lightDirection:t,f0:r,f90:s,roughness:i,f:n,USE_IRIDESCENCE:a,USE_ANISOTROPY:o}=e,u=e.normalView||Kl,l=i.pow2(),d=t.add(kl).normalize(),c=u.dot(t).clamp(),h=u.dot(kl).clamp(),p=u.dot(d).clamp(),g=kl.dot(d).clamp();let m,f,y=gp({f0:r,f90:s,dotVH:g});if(Ci(a)&&(y=Nn.mix(y,n)),Ci(o)){const e=Rn.dot(t),r=Rn.dot(kl),s=Rn.dot(d),i=Cn.dot(t),n=Cn.dot(kl),a=Cn.dot(d);m=Ep({alphaT:En,alphaB:l,dotTV:r,dotBV:n,dotTL:e,dotBL:i,dotNV:h,dotNL:c}),f=Cp({alphaT:En,alphaB:l,dotNH:p,dotTH:s,dotBH:a})}else m=wp({alpha:l,dotNL:c,dotNV:h}),f=Ap({alpha:l,dotNH:p});return y.mul(m).mul(f)})),Pp=Ui((({roughness:e,dotNV:t})=>{const r=rn(-1,-.0275,-.572,.022),s=rn(1,.0425,1.04,-.04),i=e.mul(r).add(s),n=i.x.mul(i.x).min(t.mul(-9.28).exp2()).mul(i.x).add(i.y);return Xi(-1.04,1.04).mul(n).add(i.zw)})).setLayout({name:"DFGApprox",type:"vec2",inputs:[{name:"roughness",type:"float"},{name:"dotNV",type:"vec3"}]}),Lp=Ui((e=>{const{dotNV:t,specularColor:r,specularF90:s,roughness:i}=e,n=Pp({dotNV:t,roughness:i});return r.mul(n.x).add(s.mul(n.y))})),Fp=Ui((({f:e,f90:t,dotVH:r})=>{const s=r.oneMinus().saturate(),i=s.mul(s),n=s.mul(i,i).clamp(0,.9999);return e.sub(Zi(t).mul(n)).div(n.oneMinus())})).setLayout({name:"Schlick_to_F0",type:"vec3",inputs:[{name:"f",type:"vec3"},{name:"f90",type:"float"},{name:"dotVH",type:"float"}]}),Bp=Ui((({roughness:e,dotNH:t})=>{const r=e.pow2(),s=Hi(1).div(r),i=t.pow2().oneMinus().max(.0078125);return Hi(2).add(s).mul(i.pow(s.mul(.5))).div(2*Math.PI)})).setLayout({name:"D_Charlie",type:"float",inputs:[{name:"roughness",type:"float"},{name:"dotNH",type:"float"}]}),Dp=Ui((({dotNV:e,dotNL:t})=>Hi(1).div(Hi(4).mul(t.add(e).sub(t.mul(e)))))).setLayout({name:"V_Neubelt",type:"float",inputs:[{name:"dotNV",type:"float"},{name:"dotNL",type:"float"}]}),Ip=Ui((({lightDirection:e})=>{const t=e.add(kl).normalize(),r=Kl.dot(e).clamp(),s=Kl.dot(kl).clamp(),i=Kl.dot(t).clamp(),n=Bp({roughness:vn,dotNH:i}),a=Dp({dotNV:s,dotNL:r});return _n.mul(n).mul(a)})),Vp=Ui((({N:e,V:t,roughness:r})=>{const s=e.dot(t).saturate(),i=Xi(r,s.oneMinus().sqrt());return i.assign(i.mul(.984375).add(.0078125)),i})).setLayout({name:"LTC_Uv",type:"vec2",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"roughness",type:"float"}]}),Up=Ui((({f:e})=>{const t=e.length();return bo(t.mul(t).add(e.z).div(t.add(1)),0)})).setLayout({name:"LTC_ClippedSphereFormFactor",type:"float",inputs:[{name:"f",type:"vec3"}]}),Op=Ui((({v1:e,v2:t})=>{const r=e.dot(t),s=r.abs().toVar(),i=s.mul(.0145206).add(.4965155).mul(s).add(.8543985).toVar(),n=s.add(4.1616724).mul(s).add(3.417594).toVar(),a=i.div(n),o=r.greaterThan(0).select(a,bo(r.mul(r).oneMinus(),1e-7).inverseSqrt().mul(.5).sub(a));return e.cross(t).mul(o)})).setLayout({name:"LTC_EdgeVectorFormFactor",type:"vec3",inputs:[{name:"v1",type:"vec3"},{name:"v2",type:"vec3"}]}),kp=Ui((({N:e,V:t,P:r,mInv:s,p0:i,p1:n,p2:a,p3:o})=>{const u=n.sub(i).toVar(),l=o.sub(i).toVar(),d=u.cross(l),c=Zi().toVar();return Gi(d.dot(r.sub(i)).greaterThanEqual(0),(()=>{const u=t.sub(e.mul(t.dot(e))).normalize(),l=e.cross(u).negate(),d=s.mul(un(u,l,e).transpose()).toVar(),h=d.mul(i.sub(r)).normalize().toVar(),p=d.mul(n.sub(r)).normalize().toVar(),g=d.mul(a.sub(r)).normalize().toVar(),m=d.mul(o.sub(r)).normalize().toVar(),f=Zi(0).toVar();f.addAssign(Op({v1:h,v2:p})),f.addAssign(Op({v1:p,v2:g})),f.addAssign(Op({v1:g,v2:m})),f.addAssign(Op({v1:m,v2:h})),c.assign(Zi(Up({f:f})))})),c})).setLayout({name:"LTC_Evaluate",type:"vec3",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"P",type:"vec3"},{name:"mInv",type:"mat3"},{name:"p0",type:"vec3"},{name:"p1",type:"vec3"},{name:"p2",type:"vec3"},{name:"p3",type:"vec3"}]}),Gp=Ui((({P:e,p0:t,p1:r,p2:s,p3:i})=>{const n=r.sub(t).toVar(),a=i.sub(t).toVar(),o=n.cross(a),u=Zi().toVar();return Gi(o.dot(e.sub(t)).greaterThanEqual(0),(()=>{const n=t.sub(e).normalize().toVar(),a=r.sub(e).normalize().toVar(),o=s.sub(e).normalize().toVar(),l=i.sub(e).normalize().toVar(),d=Zi(0).toVar();d.addAssign(Op({v1:n,v2:a})),d.addAssign(Op({v1:a,v2:o})),d.addAssign(Op({v1:o,v2:l})),d.addAssign(Op({v1:l,v2:n})),u.assign(Zi(Up({f:d.abs()})))})),u})).setLayout({name:"LTC_Evaluate",type:"vec3",inputs:[{name:"P",type:"vec3"},{name:"p0",type:"vec3"},{name:"p1",type:"vec3"},{name:"p2",type:"vec3"},{name:"p3",type:"vec3"}]}),zp=1/6,$p=e=>oa(zp,oa(e,oa(e,e.negate().add(3)).sub(3)).add(1)),Hp=e=>oa(zp,oa(e,oa(e,oa(3,e).sub(6))).add(4)),Wp=e=>oa(zp,oa(e,oa(e,oa(-3,e).add(3)).add(3)).add(1)),jp=e=>oa(zp,Eo(e,3)),qp=e=>$p(e).add(Hp(e)),Xp=e=>Wp(e).add(jp(e)),Kp=e=>na(-1,Hp(e).div($p(e).add(Hp(e)))),Yp=e=>na(1,jp(e).div(Wp(e).add(jp(e)))),Qp=(e,t,r)=>{const s=e.uvNode,i=oa(s,t.zw).add(.5),n=qa(i),a=Ya(i),o=qp(a.x),u=Xp(a.x),l=Kp(a.x),d=Yp(a.x),c=Kp(a.y),h=Yp(a.y),p=Xi(n.x.add(l),n.y.add(c)).sub(.5).mul(t.xy),g=Xi(n.x.add(d),n.y.add(c)).sub(.5).mul(t.xy),m=Xi(n.x.add(l),n.y.add(h)).sub(.5).mul(t.xy),f=Xi(n.x.add(d),n.y.add(h)).sub(.5).mul(t.xy),y=qp(a.y).mul(na(o.mul(e.sample(p).level(r)),u.mul(e.sample(g).level(r)))),x=Xp(a.y).mul(na(o.mul(e.sample(m).level(r)),u.mul(e.sample(f).level(r))));return y.add(x)},Zp=Ui((([e,t=Hi(3)])=>{const r=Xi(e.size(Wi(t))),s=Xi(e.size(Wi(t.add(1)))),i=ua(1,r),n=ua(1,s),a=Qp(e,rn(i,r),qa(t)),o=Qp(e,rn(n,s),Xa(t));return Ya(t).mix(a,o)})),Jp=Ui((([e,t,r,s,i])=>{const n=Zi(Io(t.negate(),Ka(e),ua(1,s))),a=Zi(no(i[0].xyz),no(i[1].xyz),no(i[2].xyz));return Ka(n).mul(r.mul(a))})).setLayout({name:"getVolumeTransmissionRay",type:"vec3",inputs:[{name:"n",type:"vec3"},{name:"v",type:"vec3"},{name:"thickness",type:"float"},{name:"ior",type:"float"},{name:"modelMatrix",type:"mat4"}]}),eg=Ui((([e,t])=>e.mul(Bo(t.mul(2).sub(2),0,1)))).setLayout({name:"applyIorToRoughness",type:"float",inputs:[{name:"roughness",type:"float"},{name:"ior",type:"float"}]}),tg=vh(),rg=vh(),sg=Ui((([e,t,r],{material:s})=>{const i=(s.side===N?tg:rg).sample(e),n=Ha(dh.x).mul(eg(t,r));return Zp(i,n)})),ig=Ui((([e,t,r])=>(Gi(r.notEqual(0),(()=>{const s=$a(t).negate().div(r);return Ga(s.negate().mul(e))})),Zi(1)))).setLayout({name:"volumeAttenuation",type:"vec3",inputs:[{name:"transmissionDistance",type:"float"},{name:"attenuationColor",type:"vec3"},{name:"attenuationDistance",type:"float"}]}),ng=Ui((([e,t,r,s,i,n,a,o,u,l,d,c,h,p,g])=>{let m,f;if(g){m=rn().toVar(),f=Zi().toVar();const i=d.sub(1).mul(g.mul(.025)),n=Zi(d.sub(i),d,d.add(i));Xc({start:0,end:3},(({i:i})=>{const d=n.element(i),g=Jp(e,t,c,d,o),y=a.add(g),x=l.mul(u.mul(rn(y,1))),b=Xi(x.xy.div(x.w)).toVar();b.addAssign(1),b.divAssign(2),b.assign(Xi(b.x,b.y.oneMinus()));const T=sg(b,r,d);m.element(i).assign(T.element(i)),m.a.addAssign(T.a),f.element(i).assign(s.element(i).mul(ig(no(g),h,p).element(i)))})),m.a.divAssign(3)}else{const i=Jp(e,t,c,d,o),n=a.add(i),g=l.mul(u.mul(rn(n,1))),y=Xi(g.xy.div(g.w)).toVar();y.addAssign(1),y.divAssign(2),y.assign(Xi(y.x,y.y.oneMinus())),m=sg(y,r,d),f=s.mul(ig(no(i),h,p))}const y=f.rgb.mul(m.rgb),x=e.dot(t).clamp(),b=Zi(Lp({dotNV:x,specularColor:i,specularF90:n,roughness:r})),T=f.r.add(f.g,f.b).div(3);return rn(b.oneMinus().mul(y),m.a.oneMinus().mul(T).oneMinus())})),ag=un(3.2404542,-.969266,.0556434,-1.5371385,1.8760108,-.2040259,-.4985314,.041556,1.0572252),og=(e,t)=>e.sub(t).div(e.add(t)).pow2(),ug=Ui((({outsideIOR:e,eta2:t,cosTheta1:r,thinFilmThickness:s,baseF0:i})=>{const n=Fo(e,t,Vo(0,.03,s)),a=e.div(n).pow2().mul(r.pow2().oneMinus()).oneMinus();Gi(a.lessThan(0),(()=>Zi(1)));const o=a.sqrt(),u=og(n,e),l=gp({f0:u,f90:1,dotVH:r}),d=l.oneMinus(),c=n.lessThan(e).select(Math.PI,0),h=Hi(Math.PI).sub(c),p=(e=>{const t=e.sqrt();return Zi(1).add(t).div(Zi(1).sub(t))})(i.clamp(0,.9999)),g=og(p,n.toVec3()),m=gp({f0:g,f90:1,dotVH:o}),f=Zi(p.x.lessThan(n).select(Math.PI,0),p.y.lessThan(n).select(Math.PI,0),p.z.lessThan(n).select(Math.PI,0)),y=n.mul(s,o,2),x=Zi(h).add(f),b=l.mul(m).clamp(1e-5,.9999),T=b.sqrt(),_=d.pow2().mul(m).div(Zi(1).sub(b)),v=l.add(_).toVar(),N=_.sub(d).toVar();return Xc({start:1,end:2,condition:"<=",name:"m"},(({m:e})=>{N.mulAssign(T);const t=((e,t)=>{const r=e.mul(2*Math.PI*1e-9),s=Zi(54856e-17,44201e-17,52481e-17),i=Zi(1681e3,1795300,2208400),n=Zi(43278e5,93046e5,66121e5),a=Hi(9747e-17*Math.sqrt(2*Math.PI*45282e5)).mul(r.mul(2239900).add(t.x).cos()).mul(r.pow2().mul(-45282e5).exp());let o=s.mul(n.mul(2*Math.PI).sqrt()).mul(i.mul(r).add(t).cos()).mul(r.pow2().negate().mul(n).exp());return o=Zi(o.x.add(a),o.y,o.z).div(1.0685e-7),ag.mul(o)})(Hi(e).mul(y),Hi(e).mul(x)).mul(2);v.addAssign(N.mul(t))})),v.max(Zi(0))})).setLayout({name:"evalIridescence",type:"vec3",inputs:[{name:"outsideIOR",type:"float"},{name:"eta2",type:"float"},{name:"cosTheta1",type:"float"},{name:"thinFilmThickness",type:"float"},{name:"baseF0",type:"vec3"}]}),lg=Ui((({normal:e,viewDir:t,roughness:r})=>{const s=e.dot(t).saturate(),i=r.pow2(),n=jo(r.lessThan(.25),Hi(-339.2).mul(i).add(Hi(161.4).mul(r)).sub(25.9),Hi(-8.48).mul(i).add(Hi(14.3).mul(r)).sub(9.95)),a=jo(r.lessThan(.25),Hi(44).mul(i).sub(Hi(23.7).mul(r)).add(3.26),Hi(1.97).mul(i).sub(Hi(3.27).mul(r)).add(.72));return jo(r.lessThan(.25),0,Hi(.1).mul(r).sub(.025)).add(n.mul(s).add(a).exp()).mul(1/Math.PI).saturate()})),dg=Zi(.04),cg=Hi(1);class hg extends dp{constructor(e=!1,t=!1,r=!1,s=!1,i=!1,n=!1){super(),this.clearcoat=e,this.sheen=t,this.iridescence=r,this.anisotropy=s,this.transmission=i,this.dispersion=n,this.clearcoatRadiance=null,this.clearcoatSpecularDirect=null,this.clearcoatSpecularIndirect=null,this.sheenSpecularDirect=null,this.sheenSpecularIndirect=null,this.iridescenceFresnel=null,this.iridescenceF0=null}start(e){if(!0===this.clearcoat&&(this.clearcoatRadiance=Zi().toVar("clearcoatRadiance"),this.clearcoatSpecularDirect=Zi().toVar("clearcoatSpecularDirect"),this.clearcoatSpecularIndirect=Zi().toVar("clearcoatSpecularIndirect")),!0===this.sheen&&(this.sheenSpecularDirect=Zi().toVar("sheenSpecularDirect"),this.sheenSpecularIndirect=Zi().toVar("sheenSpecularIndirect")),!0===this.iridescence){const e=Kl.dot(kl).clamp();this.iridescenceFresnel=ug({outsideIOR:Hi(1),eta2:Sn,cosTheta1:e,thinFilmThickness:wn,baseF0:Mn}),this.iridescenceF0=Fp({f:this.iridescenceFresnel,f90:1,dotVH:e})}if(!0===this.transmission){const t=Vl,r=hl.sub(Vl).normalize(),s=Yl,i=e.context;i.backdrop=ng(s,r,yn,mn,Mn,Pn,t,Nl,ll,ol,Vn,On,Gn,kn,this.dispersion?zn:null),i.backdropAlpha=Un,mn.a.mulAssign(Fo(1,i.backdrop.a,Un))}super.start(e)}computeMultiscattering(e,t,r){const s=Kl.dot(kl).clamp(),i=Pp({roughness:yn,dotNV:s}),n=(this.iridescenceF0?Nn.mix(Mn,this.iridescenceF0):Mn).mul(i.x).add(r.mul(i.y)),a=i.x.add(i.y).oneMinus(),o=Mn.add(Mn.oneMinus().mul(.047619)),u=n.mul(o).div(a.mul(o).oneMinus());e.addAssign(n),t.addAssign(u.mul(a))}direct({lightDirection:e,lightColor:t,reflectedLight:r}){const s=Kl.dot(e).clamp().mul(t);if(!0===this.sheen&&this.sheenSpecularDirect.addAssign(s.mul(Ip({lightDirection:e}))),!0===this.clearcoat){const r=Ql.dot(e).clamp().mul(t);this.clearcoatSpecularDirect.addAssign(r.mul(Mp({lightDirection:e,f0:dg,f90:cg,roughness:Tn,normalView:Ql})))}r.directDiffuse.addAssign(s.mul(mp({diffuseColor:mn.rgb}))),r.directSpecular.addAssign(s.mul(Mp({lightDirection:e,f0:Mn,f90:1,roughness:yn,iridescence:this.iridescence,f:this.iridescenceFresnel,USE_IRIDESCENCE:this.iridescence,USE_ANISOTROPY:this.anisotropy})))}directRectArea({lightColor:e,lightPosition:t,halfWidth:r,halfHeight:s,reflectedLight:i,ltc_1:n,ltc_2:a}){const o=t.add(r).sub(s),u=t.sub(r).sub(s),l=t.sub(r).add(s),d=t.add(r).add(s),c=Kl,h=kl,p=Ol.toVar(),g=Vp({N:c,V:h,roughness:yn}),m=n.sample(g).toVar(),f=a.sample(g).toVar(),y=un(Zi(m.x,0,m.y),Zi(0,1,0),Zi(m.z,0,m.w)).toVar(),x=Mn.mul(f.x).add(Mn.oneMinus().mul(f.y)).toVar();i.directSpecular.addAssign(e.mul(x).mul(kp({N:c,V:h,P:p,mInv:y,p0:o,p1:u,p2:l,p3:d}))),i.directDiffuse.addAssign(e.mul(mn).mul(kp({N:c,V:h,P:p,mInv:un(1,0,0,0,1,0,0,0,1),p0:o,p1:u,p2:l,p3:d})))}indirect(e){this.indirectDiffuse(e),this.indirectSpecular(e),this.ambientOcclusion(e)}indirectDiffuse(e){const{irradiance:t,reflectedLight:r}=e.context;r.indirectDiffuse.addAssign(t.mul(mp({diffuseColor:mn})))}indirectSpecular(e){const{radiance:t,iblIrradiance:r,reflectedLight:s}=e.context;if(!0===this.sheen&&this.sheenSpecularIndirect.addAssign(r.mul(_n,lg({normal:Kl,viewDir:kl,roughness:vn}))),!0===this.clearcoat){const e=Ql.dot(kl).clamp(),t=Lp({dotNV:e,specularColor:dg,specularF90:cg,roughness:Tn});this.clearcoatSpecularIndirect.addAssign(this.clearcoatRadiance.mul(t))}const i=Zi().toVar("singleScattering"),n=Zi().toVar("multiScattering"),a=r.mul(1/Math.PI);this.computeMultiscattering(i,n,Pn);const o=i.add(n),u=mn.mul(o.r.max(o.g).max(o.b).oneMinus());s.indirectSpecular.addAssign(t.mul(i)),s.indirectSpecular.addAssign(n.mul(a)),s.indirectDiffuse.addAssign(u.mul(a))}ambientOcclusion(e){const{ambientOcclusion:t,reflectedLight:r}=e.context,s=Kl.dot(kl).clamp().add(t),i=yn.mul(-16).oneMinus().negate().exp2(),n=t.sub(s.pow(i).oneMinus()).clamp();!0===this.clearcoat&&this.clearcoatSpecularIndirect.mulAssign(t),!0===this.sheen&&this.sheenSpecularIndirect.mulAssign(t),r.indirectDiffuse.mulAssign(t),r.indirectSpecular.mulAssign(n)}finish({context:e}){const{outgoingLight:t}=e;if(!0===this.clearcoat){const e=Ql.dot(kl).clamp(),r=gp({dotVH:e,f0:dg,f90:cg}),s=t.mul(bn.mul(r).oneMinus()).add(this.clearcoatSpecularDirect.add(this.clearcoatSpecularIndirect).mul(bn));t.assign(s)}if(!0===this.sheen){const e=_n.r.max(_n.g).max(_n.b).mul(.157).oneMinus(),r=t.mul(e).add(this.sheenSpecularDirect,this.sheenSpecularIndirect);t.assign(r)}}}const pg=Hi(1),gg=Hi(-2),mg=Hi(.8),fg=Hi(-1),yg=Hi(.4),xg=Hi(2),bg=Hi(.305),Tg=Hi(3),_g=Hi(.21),vg=Hi(4),Ng=Hi(4),Sg=Hi(16),wg=Ui((([e])=>{const t=Zi(so(e)).toVar(),r=Hi(-1).toVar();return Gi(t.x.greaterThan(t.z),(()=>{Gi(t.x.greaterThan(t.y),(()=>{r.assign(jo(e.x.greaterThan(0),0,3))})).Else((()=>{r.assign(jo(e.y.greaterThan(0),1,4))}))})).Else((()=>{Gi(t.z.greaterThan(t.y),(()=>{r.assign(jo(e.z.greaterThan(0),2,5))})).Else((()=>{r.assign(jo(e.y.greaterThan(0),1,4))}))})),r})).setLayout({name:"getFace",type:"float",inputs:[{name:"direction",type:"vec3"}]}),Eg=Ui((([e,t])=>{const r=Xi().toVar();return Gi(t.equal(0),(()=>{r.assign(Xi(e.z,e.y).div(so(e.x)))})).ElseIf(t.equal(1),(()=>{r.assign(Xi(e.x.negate(),e.z.negate()).div(so(e.y)))})).ElseIf(t.equal(2),(()=>{r.assign(Xi(e.x.negate(),e.y).div(so(e.z)))})).ElseIf(t.equal(3),(()=>{r.assign(Xi(e.z.negate(),e.y).div(so(e.x)))})).ElseIf(t.equal(4),(()=>{r.assign(Xi(e.x.negate(),e.z).div(so(e.y)))})).Else((()=>{r.assign(Xi(e.x,e.y).div(so(e.z)))})),oa(.5,r.add(1))})).setLayout({name:"getUV",type:"vec2",inputs:[{name:"direction",type:"vec3"},{name:"face",type:"float"}]}),Ag=Ui((([e])=>{const t=Hi(0).toVar();return Gi(e.greaterThanEqual(mg),(()=>{t.assign(pg.sub(e).mul(fg.sub(gg)).div(pg.sub(mg)).add(gg))})).ElseIf(e.greaterThanEqual(yg),(()=>{t.assign(mg.sub(e).mul(xg.sub(fg)).div(mg.sub(yg)).add(fg))})).ElseIf(e.greaterThanEqual(bg),(()=>{t.assign(yg.sub(e).mul(Tg.sub(xg)).div(yg.sub(bg)).add(xg))})).ElseIf(e.greaterThanEqual(_g),(()=>{t.assign(bg.sub(e).mul(vg.sub(Tg)).div(bg.sub(_g)).add(Tg))})).Else((()=>{t.assign(Hi(-2).mul(Ha(oa(1.16,e))))})),t})).setLayout({name:"roughnessToMip",type:"float",inputs:[{name:"roughness",type:"float"}]}),Rg=Ui((([e,t])=>{const r=e.toVar();r.assign(oa(2,r).sub(1));const s=Zi(r,1).toVar();return Gi(t.equal(0),(()=>{s.assign(s.zyx)})).ElseIf(t.equal(1),(()=>{s.assign(s.xzy),s.xz.mulAssign(-1)})).ElseIf(t.equal(2),(()=>{s.x.mulAssign(-1)})).ElseIf(t.equal(3),(()=>{s.assign(s.zyx),s.xz.mulAssign(-1)})).ElseIf(t.equal(4),(()=>{s.assign(s.xzy),s.xy.mulAssign(-1)})).ElseIf(t.equal(5),(()=>{s.z.mulAssign(-1)})),s})).setLayout({name:"getDirection",type:"vec3",inputs:[{name:"uv",type:"vec2"},{name:"face",type:"float"}]}),Cg=Ui((([e,t,r,s,i,n])=>{const a=Hi(r),o=Zi(t),u=Bo(Ag(a),gg,n),l=Ya(u),d=qa(u),c=Zi(Mg(e,o,d,s,i,n)).toVar();return Gi(l.notEqual(0),(()=>{const t=Zi(Mg(e,o,d.add(1),s,i,n)).toVar();c.assign(Fo(c,t,l))})),c})),Mg=Ui((([e,t,r,s,i,n])=>{const a=Hi(r).toVar(),o=Zi(t),u=Hi(wg(o)).toVar(),l=Hi(bo(Ng.sub(a),0)).toVar();a.assign(bo(a,Ng));const d=Hi(za(a)).toVar(),c=Xi(Eg(o,u).mul(d.sub(2)).add(1)).toVar();return Gi(u.greaterThan(2),(()=>{c.y.addAssign(d),u.subAssign(3)})),c.x.addAssign(u.mul(d)),c.x.addAssign(l.mul(oa(3,Sg))),c.y.addAssign(oa(4,za(n).sub(d))),c.x.mulAssign(s),c.y.mulAssign(i),e.sample(c).grad(Xi(),Xi())})),Pg=Ui((({envMap:e,mipInt:t,outputDirection:r,theta:s,axis:i,CUBEUV_TEXEL_WIDTH:n,CUBEUV_TEXEL_HEIGHT:a,CUBEUV_MAX_MIP:o})=>{const u=Za(s),l=r.mul(u).add(i.cross(r).mul(Qa(s))).add(i.mul(i.dot(r).mul(u.oneMinus())));return Mg(e,l,t,n,a,o)})),Lg=Ui((({n:e,latitudinal:t,poleAxis:r,outputDirection:s,weights:i,samples:n,dTheta:a,mipInt:o,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c})=>{const h=Zi(jo(t,r,wo(r,s))).toVar();Gi(h.equal(Zi(0)),(()=>{h.assign(Zi(s.z,0,s.x.negate()))})),h.assign(Ka(h));const p=Zi().toVar();return p.addAssign(i.element(0).mul(Pg({theta:0,axis:h,outputDirection:s,mipInt:o,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c}))),Xc({start:Wi(1),end:e},(({i:e})=>{Gi(e.greaterThanEqual(n),(()=>{Kc()}));const t=Hi(a.mul(Hi(e))).toVar();p.addAssign(i.element(e).mul(Pg({theta:t.mul(-1),axis:h,outputDirection:s,mipInt:o,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c}))),p.addAssign(i.element(e).mul(Pg({theta:t,axis:h,outputDirection:s,mipInt:o,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c})))})),rn(p,1)})),Fg=[.125,.215,.35,.446,.526,.582],Bg=20,Dg=new ie(-1,1,1,-1,0,1),Ig=new ne(90,1),Vg=new e;let Ug=null,Og=0,kg=0;const Gg=(1+Math.sqrt(5))/2,zg=1/Gg,$g=[new r(-Gg,zg,0),new r(Gg,zg,0),new r(-zg,0,Gg),new r(zg,0,Gg),new r(0,Gg,-zg),new r(0,Gg,zg),new r(-1,1,-1),new r(1,1,-1),new r(-1,1,1),new r(1,1,1)],Hg=new r,Wg=new WeakMap,jg=[3,1,5,0,4,2],qg=Rg(Hu(),$u("faceIndex")).normalize(),Xg=Zi(qg.x,qg.y,qg.z);class Kg{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._lodMeshes=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._backgroundBox=null}get _hasInitialized(){return this._renderer.hasInitialized()}fromScene(e,t=0,r=.1,s=100,i={}){const{size:n=256,position:a=Hg,renderTarget:o=null}=i;if(this._setSize(n),!1===this._hasInitialized){console.warn("THREE.PMREMGenerator: .fromScene() called before the backend is initialized. Try using .fromSceneAsync() instead.");const n=o||this._allocateTargets();return i.renderTarget=n,this.fromSceneAsync(e,t,r,s,i),n}Ug=this._renderer.getRenderTarget(),Og=this._renderer.getActiveCubeFace(),kg=this._renderer.getActiveMipmapLevel();const u=o||this._allocateTargets();return u.depthBuffer=!0,this._sceneToCubeUV(e,r,s,u,a),t>0&&this._blur(u,0,0,t),this._applyPMREM(u),this._cleanup(u),u}async fromSceneAsync(e,t=0,r=.1,s=100,i={}){return!1===this._hasInitialized&&await this._renderer.init(),this.fromScene(e,t,r,s,i)}fromEquirectangular(e,t=null){if(!1===this._hasInitialized){console.warn("THREE.PMREMGenerator: .fromEquirectangular() called before the backend is initialized. Try using .fromEquirectangularAsync() instead."),this._setSizeFromTexture(e);const r=t||this._allocateTargets();return this.fromEquirectangularAsync(e,r),r}return this._fromTexture(e,t)}async fromEquirectangularAsync(e,t=null){return!1===this._hasInitialized&&await this._renderer.init(),this._fromTexture(e,t)}fromCubemap(e,t=null){if(!1===this._hasInitialized){console.warn("THREE.PMREMGenerator: .fromCubemap() called before the backend is initialized. Try using .fromCubemapAsync() instead."),this._setSizeFromTexture(e);const r=t||this._allocateTargets();return this.fromCubemapAsync(e,t),r}return this._fromTexture(e,t)}async fromCubemapAsync(e,t=null){return!1===this._hasInitialized&&await this._renderer.init(),this._fromTexture(e,t)}async compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=Jg(),await this._compileMaterial(this._cubemapMaterial))}async compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=em(),await this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose(),null!==this._backgroundBox&&(this._backgroundBox.geometry.dispose(),this._backgroundBox.material.dispose())}_setSizeFromTexture(e){e.mapping===w||e.mapping===E?this._setSize(0===e.image.length?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4)}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(Ug,Og,kg),e.scissorTest=!1,Qg(e,0,0,e.width,e.height)}_fromTexture(e,t){this._setSizeFromTexture(e),Ug=this._renderer.getRenderTarget(),Og=this._renderer.getActiveCubeFace(),kg=this._renderer.getActiveMipmapLevel();const r=t||this._allocateTargets();return this._textureToCubeUV(e,r),this._applyPMREM(r),this._cleanup(r),r}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,s={magFilter:q,minFilter:q,generateMipmaps:!1,type:he,format:ce,colorSpace:de},i=Yg(e,t,s);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=Yg(e,t,s);const{_lodMax:i}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas,lodMeshes:this._lodMeshes}=function(e){const t=[],r=[],s=[],i=[];let n=e;const a=e-4+1+Fg.length;for(let o=0;o<a;o++){const a=Math.pow(2,n);r.push(a);let u=1/a;o>e-4?u=Fg[o-e+4-1]:0===o&&(u=0),s.push(u);const l=1/(a-2),d=-l,c=1+l,h=[d,d,c,d,c,c,d,d,c,c,d,c],p=6,g=6,m=3,f=2,y=1,x=new Float32Array(m*g*p),b=new Float32Array(f*g*p),T=new Float32Array(y*g*p);for(let e=0;e<p;e++){const t=e%3*2/3-1,r=e>2?0:-1,s=[t,r,0,t+2/3,r,0,t+2/3,r+1,0,t,r,0,t+2/3,r+1,0,t,r+1,0],i=jg[e];x.set(s,m*g*i),b.set(h,f*g*i);const n=[i,i,i,i,i,i];T.set(n,y*g*i)}const _=new ue;_.setAttribute("position",new le(x,m)),_.setAttribute("uv",new le(b,f)),_.setAttribute("faceIndex",new le(T,y)),t.push(_),i.push(new W(_,null)),n>4&&n--}return{lodPlanes:t,sizeLods:r,sigmas:s,lodMeshes:i}}(i)),this._blurMaterial=function(e,t,s){const i=rl(new Array(Bg).fill(0)),n=Yn(new r(0,1,0)),a=Yn(0),o=Hi(Bg),u=Yn(0),l=Yn(1),d=Yu(null),c=Yn(0),h=Hi(1/t),p=Hi(1/s),g=Hi(e),m={n:o,latitudinal:u,weights:i,poleAxis:n,outputDirection:Xg,dTheta:a,samples:l,envMap:d,mipInt:c,CUBEUV_TEXEL_WIDTH:h,CUBEUV_TEXEL_HEIGHT:p,CUBEUV_MAX_MIP:g},f=Zg("blur");return f.fragmentNode=Lg({...m,latitudinal:u.equal(1)}),Wg.set(f,m),f}(i,e,t)}return i}async _compileMaterial(e){const t=new W(this._lodPlanes[0],e);await this._renderer.compile(t,Dg)}_sceneToCubeUV(e,t,r,s,i){const n=Ig;n.near=t,n.far=r;const a=[1,1,1,1,-1,1],o=[1,-1,1,-1,1,-1],u=this._renderer,l=u.autoClear;u.getClearColor(Vg),u.autoClear=!1;let d=this._backgroundBox;if(null===d){const e=new te({name:"PMREM.Background",side:N,depthWrite:!1,depthTest:!1});d=new W(new H,e)}let c=!1;const h=e.background;h?h.isColor&&(d.material.color.copy(h),e.background=null,c=!0):(d.material.color.copy(Vg),c=!0),u.setRenderTarget(s),u.clear(),c&&u.render(d,n);for(let t=0;t<6;t++){const r=t%3;0===r?(n.up.set(0,a[t],0),n.position.set(i.x,i.y,i.z),n.lookAt(i.x+o[t],i.y,i.z)):1===r?(n.up.set(0,0,a[t]),n.position.set(i.x,i.y,i.z),n.lookAt(i.x,i.y+o[t],i.z)):(n.up.set(0,a[t],0),n.position.set(i.x,i.y,i.z),n.lookAt(i.x,i.y,i.z+o[t]));const l=this._cubeSize;Qg(s,r*l,t>2?l:0,l,l),u.render(e,n)}u.autoClear=l,e.background=h}_textureToCubeUV(e,t){const r=this._renderer,s=e.mapping===w||e.mapping===E;s?null===this._cubemapMaterial&&(this._cubemapMaterial=Jg(e)):null===this._equirectMaterial&&(this._equirectMaterial=em(e));const i=s?this._cubemapMaterial:this._equirectMaterial;i.fragmentNode.value=e;const n=this._lodMeshes[0];n.material=i;const a=this._cubeSize;Qg(t,0,0,3*a,2*a),r.setRenderTarget(t),r.render(n,Dg)}_applyPMREM(e){const t=this._renderer,r=t.autoClear;t.autoClear=!1;const s=this._lodPlanes.length;for(let t=1;t<s;t++){const r=Math.sqrt(this._sigmas[t]*this._sigmas[t]-this._sigmas[t-1]*this._sigmas[t-1]),i=$g[(s-t-1)%$g.length];this._blur(e,t-1,t,r,i)}t.autoClear=r}_blur(e,t,r,s,i){const n=this._pingPongRenderTarget;this._halfBlur(e,n,t,r,s,"latitudinal",i),this._halfBlur(n,e,r,r,s,"longitudinal",i)}_halfBlur(e,t,r,s,i,n,a){const o=this._renderer,u=this._blurMaterial;"latitudinal"!==n&&"longitudinal"!==n&&console.error("blur direction must be either latitudinal or longitudinal!");const l=this._lodMeshes[s];l.material=u;const d=Wg.get(u),c=this._sizeLods[r]-1,h=isFinite(i)?Math.PI/(2*c):2*Math.PI/39,p=i/h,g=isFinite(i)?1+Math.floor(3*p):Bg;g>Bg&&console.warn(`sigmaRadians, ${i}, is too large and will clip, as it requested ${g} samples when the maximum is set to 20`);const m=[];let f=0;for(let e=0;e<Bg;++e){const t=e/p,r=Math.exp(-t*t/2);m.push(r),0===e?f+=r:e<g&&(f+=2*r)}for(let e=0;e<m.length;e++)m[e]=m[e]/f;e.texture.frame=(e.texture.frame||0)+1,d.envMap.value=e.texture,d.samples.value=g,d.weights.array=m,d.latitudinal.value="latitudinal"===n?1:0,a&&(d.poleAxis.value=a);const{_lodMax:y}=this;d.dTheta.value=h,d.mipInt.value=y-r;const x=this._sizeLods[s];Qg(t,3*x*(s>y-4?s-y+4:0),4*(this._cubeSize-x),3*x,2*x),o.setRenderTarget(t),o.render(l,Dg)}}function Yg(e,t,r){const s=new ae(e,t,r);return s.texture.mapping=oe,s.texture.name="PMREM.cubeUv",s.texture.isPMREMTexture=!0,s.scissorTest=!0,s}function Qg(e,t,r,s,i){e.viewport.set(t,r,s,i),e.scissor.set(t,r,s,i)}function Zg(e){const t=new Gh;return t.depthTest=!1,t.depthWrite=!1,t.blending=k,t.name=`PMREM_${e}`,t}function Jg(e){const t=Zg("cubemap");return t.fragmentNode=dd(e,Xg),t}function em(e){const t=Zg("equirect");return t.fragmentNode=Yu(e,tp(Xg),0),t}const tm=new WeakMap;function rm(e,t,r){const s=function(e){let t=tm.get(e);void 0===t&&(t=new WeakMap,tm.set(e,t));return t}(t);let i=s.get(e);if((void 0!==i?i.pmremVersion:-1)!==e.pmremVersion){const t=e.image;if(e.isCubeTexture){if(!function(e){if(null==e)return!1;let t=0;const r=6;for(let s=0;s<r;s++)void 0!==e[s]&&t++;return t===r}(t))return null;i=r.fromCubemap(e,i)}else{if(!function(e){return null!=e&&e.height>0}(t))return null;i=r.fromEquirectangular(e,i)}i.pmremVersion=e.pmremVersion,s.set(e,i)}return i.texture}class sm extends qs{static get type(){return"PMREMNode"}constructor(e,t=null,r=null){super("vec3"),this._value=e,this._pmrem=null,this.uvNode=t,this.levelNode=r,this._generator=null;const s=new pe;s.isRenderTargetTexture=!0,this._texture=Yu(s),this._width=Yn(0),this._height=Yn(0),this._maxMip=Yn(0),this.updateBeforeType=Is.RENDER}set value(e){this._value=e,this._pmrem=null}get value(){return this._value}updateFromTexture(e){const t=function(e){const t=Math.log2(e)-2,r=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),112)),texelHeight:r,maxMip:t}}(e.image.height);this._texture.value=e,this._width.value=t.texelWidth,this._height.value=t.texelHeight,this._maxMip.value=t.maxMip}updateBefore(e){let t=this._pmrem;const r=t?t.pmremVersion:-1,s=this._value;r!==s.pmremVersion&&(t=!0===s.isPMREMTexture?s:rm(s,e.renderer,this._generator),null!==t&&(this._pmrem=t,this.updateFromTexture(t)))}setup(e){null===this._generator&&(this._generator=new Kg(e.renderer)),this.updateBefore(e);let t=this.uvNode;null===t&&e.context.getUV&&(t=e.context.getUV(this)),t=id.mul(Zi(t.x,t.y.negate(),t.z));let r=this.levelNode;return null===r&&e.context.getTextureLevel&&(r=e.context.getTextureLevel(this)),Cg(this._texture,t,r,this._width,this._height,this._maxMip)}dispose(){super.dispose(),null!==this._generator&&this._generator.dispose()}}const im=Di(sm).setParameterLength(1,3),nm=new WeakMap;class am extends th{static get type(){return"EnvironmentNode"}constructor(e=null){super(),this.envNode=e}setup(e){const{material:t}=e;let r=this.envNode;if(r.isTextureNode||r.isMaterialReferenceNode){const e=r.isTextureNode?r.value:t[r.property];let s=nm.get(e);void 0===s&&(s=im(e),nm.set(e,s)),r=s}const s=!0===t.useAnisotropy||t.anisotropy>0?Ld:Kl,i=r.context(om(yn,s)).mul(sd),n=r.context(um(Yl)).mul(Math.PI).mul(sd),a=Cu(i),o=Cu(n);e.context.radiance.addAssign(a),e.context.iblIrradiance.addAssign(o);const u=e.context.lightingModel.clearcoatRadiance;if(u){const e=r.context(om(Tn,Ql)).mul(sd),t=Cu(e);u.addAssign(t)}}}const om=(e,t)=>{let r=null;return{getUV:()=>(null===r&&(r=kl.negate().reflect(t),r=e.mul(e).mix(r,t).normalize(),r=r.transformDirection(ll)),r),getTextureLevel:()=>e}},um=e=>({getUV:()=>e,getTextureLevel:()=>Hi(1)}),lm=new ge;class dm extends Gh{static get type(){return"MeshStandardNodeMaterial"}constructor(e){super(),this.isMeshStandardNodeMaterial=!0,this.lights=!0,this.emissiveNode=null,this.metalnessNode=null,this.roughnessNode=null,this.setDefaultValues(lm),this.setValues(e)}setupEnvironment(e){let t=super.setupEnvironment(e);return null===t&&e.environmentNode&&(t=e.environmentNode),t?new am(t):null}setupLightingModel(){return new hg}setupSpecular(){const e=Fo(Zi(.04),mn.rgb,xn);Mn.assign(e),Pn.assign(1)}setupVariants(){const e=this.metalnessNode?Hi(this.metalnessNode):Jd;xn.assign(e);let t=this.roughnessNode?Hi(this.roughnessNode):Zd;t=Sp({roughness:t}),yn.assign(t),this.setupSpecular(),mn.assign(rn(mn.rgb.mul(e.oneMinus()),mn.a))}copy(e){return this.emissiveNode=e.emissiveNode,this.metalnessNode=e.metalnessNode,this.roughnessNode=e.roughnessNode,super.copy(e)}}const cm=new me;class hm extends dm{static get type(){return"MeshPhysicalNodeMaterial"}constructor(e){super(),this.isMeshPhysicalNodeMaterial=!0,this.clearcoatNode=null,this.clearcoatRoughnessNode=null,this.clearcoatNormalNode=null,this.sheenNode=null,this.sheenRoughnessNode=null,this.iridescenceNode=null,this.iridescenceIORNode=null,this.iridescenceThicknessNode=null,this.specularIntensityNode=null,this.specularColorNode=null,this.iorNode=null,this.transmissionNode=null,this.thicknessNode=null,this.attenuationDistanceNode=null,this.attenuationColorNode=null,this.dispersionNode=null,this.anisotropyNode=null,this.setDefaultValues(cm),this.setValues(e)}get useClearcoat(){return this.clearcoat>0||null!==this.clearcoatNode}get useIridescence(){return this.iridescence>0||null!==this.iridescenceNode}get useSheen(){return this.sheen>0||null!==this.sheenNode}get useAnisotropy(){return this.anisotropy>0||null!==this.anisotropyNode}get useTransmission(){return this.transmission>0||null!==this.transmissionNode}get useDispersion(){return this.dispersion>0||null!==this.dispersionNode}setupSpecular(){const e=this.iorNode?Hi(this.iorNode):pc;Vn.assign(e),Mn.assign(Fo(xo(Ao(Vn.sub(1).div(Vn.add(1))).mul(Kd),Zi(1)).mul(Xd),mn.rgb,xn)),Pn.assign(Fo(Xd,1,xn))}setupLightingModel(){return new hg(this.useClearcoat,this.useSheen,this.useIridescence,this.useAnisotropy,this.useTransmission,this.useDispersion)}setupVariants(e){if(super.setupVariants(e),this.useClearcoat){const e=this.clearcoatNode?Hi(this.clearcoatNode):tc,t=this.clearcoatRoughnessNode?Hi(this.clearcoatRoughnessNode):rc;bn.assign(e),Tn.assign(Sp({roughness:t}))}if(this.useSheen){const e=this.sheenNode?Zi(this.sheenNode):nc,t=this.sheenRoughnessNode?Hi(this.sheenRoughnessNode):ac;_n.assign(e),vn.assign(t)}if(this.useIridescence){const e=this.iridescenceNode?Hi(this.iridescenceNode):uc,t=this.iridescenceIORNode?Hi(this.iridescenceIORNode):lc,r=this.iridescenceThicknessNode?Hi(this.iridescenceThicknessNode):dc;Nn.assign(e),Sn.assign(t),wn.assign(r)}if(this.useAnisotropy){const e=(this.anisotropyNode?Xi(this.anisotropyNode):oc).toVar();An.assign(e.length()),Gi(An.equal(0),(()=>{e.assign(Xi(1,0))})).Else((()=>{e.divAssign(Xi(An)),An.assign(An.saturate())})),En.assign(An.pow2().mix(yn.pow2(),1)),Rn.assign(Md[0].mul(e.x).add(Md[1].mul(e.y))),Cn.assign(Md[1].mul(e.x).sub(Md[0].mul(e.y)))}if(this.useTransmission){const e=this.transmissionNode?Hi(this.transmissionNode):cc,t=this.thicknessNode?Hi(this.thicknessNode):hc,r=this.attenuationDistanceNode?Hi(this.attenuationDistanceNode):gc,s=this.attenuationColorNode?Zi(this.attenuationColorNode):mc;if(Un.assign(e),On.assign(t),kn.assign(r),Gn.assign(s),this.useDispersion){const e=this.dispersionNode?Hi(this.dispersionNode):vc;zn.assign(e)}}}setupClearcoatNormal(){return this.clearcoatNormalNode?Zi(this.clearcoatNormalNode):sc}setup(e){e.context.setupClearcoatNormal=()=>this.setupClearcoatNormal(e),super.setup(e)}copy(e){return this.clearcoatNode=e.clearcoatNode,this.clearcoatRoughnessNode=e.clearcoatRoughnessNode,this.clearcoatNormalNode=e.clearcoatNormalNode,this.sheenNode=e.sheenNode,this.sheenRoughnessNode=e.sheenRoughnessNode,this.iridescenceNode=e.iridescenceNode,this.iridescenceIORNode=e.iridescenceIORNode,this.iridescenceThicknessNode=e.iridescenceThicknessNode,this.specularIntensityNode=e.specularIntensityNode,this.specularColorNode=e.specularColorNode,this.transmissionNode=e.transmissionNode,this.thicknessNode=e.thicknessNode,this.attenuationDistanceNode=e.attenuationDistanceNode,this.attenuationColorNode=e.attenuationColorNode,this.dispersionNode=e.dispersionNode,this.anisotropyNode=e.anisotropyNode,super.copy(e)}}class pm extends hg{constructor(e=!1,t=!1,r=!1,s=!1,i=!1,n=!1,a=!1){super(e,t,r,s,i,n),this.useSSS=a}direct({lightDirection:e,lightColor:t,reflectedLight:r},s){if(!0===this.useSSS){const i=s.material,{thicknessColorNode:n,thicknessDistortionNode:a,thicknessAmbientNode:o,thicknessAttenuationNode:u,thicknessPowerNode:l,thicknessScaleNode:d}=i,c=e.add(Kl.mul(a)).normalize(),h=Hi(kl.dot(c.negate()).saturate().pow(l).mul(d)),p=Zi(h.add(o).mul(n));r.directDiffuse.addAssign(p.mul(u.mul(t)))}super.direct({lightDirection:e,lightColor:t,reflectedLight:r},s)}}class gm extends hm{static get type(){return"MeshSSSNodeMaterial"}constructor(e){super(e),this.thicknessColorNode=null,this.thicknessDistortionNode=Hi(.1),this.thicknessAmbientNode=Hi(0),this.thicknessAttenuationNode=Hi(.1),this.thicknessPowerNode=Hi(2),this.thicknessScaleNode=Hi(10)}get useSSS(){return null!==this.thicknessColorNode}setupLightingModel(){return new pm(this.useClearcoat,this.useSheen,this.useIridescence,this.useAnisotropy,this.useTransmission,this.useDispersion,this.useSSS)}copy(e){return this.thicknessColorNode=e.thicknessColorNode,this.thicknessDistortionNode=e.thicknessDistortionNode,this.thicknessAmbientNode=e.thicknessAmbientNode,this.thicknessAttenuationNode=e.thicknessAttenuationNode,this.thicknessPowerNode=e.thicknessPowerNode,this.thicknessScaleNode=e.thicknessScaleNode,super.copy(e)}}const mm=Ui((({normal:e,lightDirection:t,builder:r})=>{const s=e.dot(t),i=Xi(s.mul(.5).add(.5),0);if(r.material.gradientMap){const e=fd("gradientMap","texture").context({getUV:()=>i});return Zi(e.r)}{const e=i.fwidth().mul(.5);return Fo(Zi(.7),Zi(1),Vo(Hi(.7).sub(e.x),Hi(.7).add(e.x),i.x))}}));class fm extends dp{direct({lightDirection:e,lightColor:t,reflectedLight:r},s){const i=mm({normal:Hl,lightDirection:e,builder:s}).mul(t);r.directDiffuse.addAssign(i.mul(mp({diffuseColor:mn.rgb})))}indirect(e){const{ambientOcclusion:t,irradiance:r,reflectedLight:s}=e.context;s.indirectDiffuse.addAssign(r.mul(mp({diffuseColor:mn}))),s.indirectDiffuse.mulAssign(t)}}const ym=new fe;class xm extends Gh{static get type(){return"MeshToonNodeMaterial"}constructor(e){super(),this.isMeshToonNodeMaterial=!0,this.lights=!0,this.setDefaultValues(ym),this.setValues(e)}setupLightingModel(){return new fm}}class bm extends qs{static get type(){return"MatcapUVNode"}constructor(){super("vec2")}setup(){const e=Zi(kl.z,0,kl.x.negate()).normalize(),t=kl.cross(e);return Xi(e.dot(Kl),t.dot(Kl)).mul(.495).add(.5)}}const Tm=Ii(bm),_m=new ye;class vm extends Gh{static get type(){return"MeshMatcapNodeMaterial"}constructor(e){super(),this.isMeshMatcapNodeMaterial=!0,this.setDefaultValues(_m),this.setValues(e)}setupVariants(e){const t=Tm;let r;r=e.material.matcap?fd("matcap","texture").context({getUV:()=>t}):Zi(Fo(.2,.8,t.y)),mn.rgb.mulAssign(r.rgb)}}class Nm extends qs{static get type(){return"RotateNode"}constructor(e,t){super(),this.positionNode=e,this.rotationNode=t}getNodeType(e){return this.positionNode.getNodeType(e)}setup(e){const{rotationNode:t,positionNode:r}=this;if("vec2"===this.getNodeType(e)){const e=t.cos(),s=t.sin();return on(e,s,s.negate(),e).mul(r)}{const e=t,s=ln(rn(1,0,0,0),rn(0,Za(e.x),Qa(e.x).negate(),0),rn(0,Qa(e.x),Za(e.x),0),rn(0,0,0,1)),i=ln(rn(Za(e.y),0,Qa(e.y),0),rn(0,1,0,0),rn(Qa(e.y).negate(),0,Za(e.y),0),rn(0,0,0,1)),n=ln(rn(Za(e.z),Qa(e.z).negate(),0,0),rn(Qa(e.z),Za(e.z),0,0),rn(0,0,1,0),rn(0,0,0,1));return s.mul(i).mul(n).mul(rn(r,1)).xyz}}}const Sm=Di(Nm).setParameterLength(2),wm=new xe;class Em extends Gh{static get type(){return"SpriteNodeMaterial"}constructor(e){super(),this.isSpriteNodeMaterial=!0,this._useSizeAttenuation=!0,this.positionNode=null,this.rotationNode=null,this.scaleNode=null,this.transparent=!0,this.setDefaultValues(wm),this.setValues(e)}setupPositionView(e){const{object:t,camera:r}=e,s=this.sizeAttenuation,{positionNode:i,rotationNode:n,scaleNode:a}=this,o=Ml.mul(Zi(i||0));let u=Xi(Nl[0].xyz.length(),Nl[1].xyz.length());if(null!==a&&(u=u.mul(Xi(a))),!1===s)if(r.isPerspectiveCamera)u=u.mul(o.z.negate());else{const e=Hi(2).div(ol.element(1).element(1));u=u.mul(e.mul(2))}let l=Bl.xy;if(t.center&&!0===t.center.isVector2){const e=((e,t,r)=>Li(new mu(e,t,r)))("center","vec2",t);l=l.sub(e.sub(.5))}l=l.mul(u);const d=Hi(n||ic),c=Sm(l,d);return rn(o.xy.add(c),o.zw)}copy(e){return this.positionNode=e.positionNode,this.rotationNode=e.rotationNode,this.scaleNode=e.scaleNode,super.copy(e)}get sizeAttenuation(){return this._useSizeAttenuation}set sizeAttenuation(e){this._useSizeAttenuation!==e&&(this._useSizeAttenuation=e,this.needsUpdate=!0)}}const Am=new be;class Rm extends Em{static get type(){return"PointsNodeMaterial"}constructor(e){super(),this.sizeNode=null,this.isPointsNodeMaterial=!0,this.setDefaultValues(Am),this.setValues(e)}setupPositionView(){const{positionNode:e}=this;return Ml.mul(Zi(e||Dl)).xyz}setupVertex(e){const t=super.setupVertex(e);if(!0!==e.material.isNodeMaterial)return t;const{rotationNode:r,scaleNode:s,sizeNode:i}=this,n=Bl.xy.toVar(),a=hh.z.div(hh.w);if(r&&r.isNode){const e=Hi(r);n.assign(Sm(n,e))}let o=null!==i?Xi(i):_c;return!0===this.sizeAttenuation&&(o=o.mul(o.div(Ol.z.negate()))),s&&s.isNode&&(o=o.mul(Xi(s))),n.mulAssign(o.mul(2)),n.assign(n.div(hh.z)),n.y.assign(n.y.mul(a)),n.assign(n.mul(t.w)),t.addAssign(rn(n,0,0)),t}get alphaToCoverage(){return this._useAlphaToCoverage}set alphaToCoverage(e){this._useAlphaToCoverage!==e&&(this._useAlphaToCoverage=e,this.needsUpdate=!0)}}class Cm extends dp{constructor(){super(),this.shadowNode=Hi(1).toVar("shadowMask")}direct({lightNode:e}){this.shadowNode.mulAssign(e.shadowNode)}finish({context:e}){mn.a.mulAssign(this.shadowNode.oneMinus()),e.outgoingLight.rgb.assign(mn.rgb)}}const Mm=new Te;class Pm extends Gh{static get type(){return"ShadowNodeMaterial"}constructor(e){super(),this.isShadowNodeMaterial=!0,this.lights=!0,this.transparent=!0,this.setDefaultValues(Mm),this.setValues(e)}setupLightingModel(){return new Cm}}const Lm=pn("vec3"),Fm=pn("vec3"),Bm=pn("vec3");class Dm extends dp{constructor(){super()}start(e){const{material:t,context:r}=e,s=pn("vec3"),i=pn("vec3");Gi(hl.sub(Vl).length().greaterThan(Al.mul(2)),(()=>{s.assign(hl),i.assign(Vl)})).Else((()=>{s.assign(Vl),i.assign(hl)}));const n=i.sub(s),a=Yn("int").onRenderUpdate((({material:e})=>e.steps)),o=n.length().div(a).toVar(),u=n.normalize().toVar(),l=Hi(0).toVar(),d=Zi(1).toVar();t.offsetNode&&l.addAssign(t.offsetNode.mul(o)),Xc(a,(()=>{const i=s.add(u.mul(l)),n=ll.mul(rn(i,1)).xyz;let a;null!==t.depthNode&&(Fm.assign(Fh(Rh(n.z,nl,al))),r.sceneDepthNode=Fh(t.depthNode).toVar()),r.positionWorld=i,r.shadowPositionWorld=i,r.positionView=n,Lm.assign(0),t.scatteringNode&&(a=t.scatteringNode({positionRay:i})),super.start(e),a&&Lm.mulAssign(a);const c=Lm.mul(.01).negate().mul(o).exp();d.mulAssign(c),l.addAssign(o)})),Bm.addAssign(d.saturate().oneMinus())}scatteringLight(e,t){const r=t.context.sceneDepthNode;r?Gi(r.greaterThanEqual(Fm),(()=>{Lm.addAssign(e)})):Lm.addAssign(e)}direct({lightNode:e,lightColor:t},r){if(void 0===e.light.distance)return;const s=t.xyz.toVar();s.mulAssign(e.shadowNode),this.scatteringLight(s,r)}directRectArea({lightColor:e,lightPosition:t,halfWidth:r,halfHeight:s},i){const n=t.add(r).sub(s),a=t.sub(r).sub(s),o=t.sub(r).add(s),u=t.add(r).add(s),l=i.context.positionView,d=e.xyz.mul(Gp({P:l,p0:n,p1:a,p2:o,p3:u})).pow(1.5);this.scatteringLight(d,i)}finish(e){e.context.outgoingLight.assign(Bm)}}class Im extends Gh{static get type(){return"VolumeNodeMaterial"}constructor(e){super(),this.isVolumeNodeMaterial=!0,this.steps=25,this.offsetNode=null,this.scatteringNode=null,this.lights=!0,this.transparent=!0,this.side=N,this.depthTest=!1,this.depthWrite=!1,this.setValues(e)}setupLightingModel(){return new Dm}}class Vm{constructor(e,t){this.nodes=e,this.info=t,this._context="undefined"!=typeof self?self:null,this._animationLoop=null,this._requestId=null}start(){const e=(t,r)=>{this._requestId=this._context.requestAnimationFrame(e),!0===this.info.autoReset&&this.info.reset(),this.nodes.nodeFrame.update(),this.info.frame=this.nodes.nodeFrame.frameId,null!==this._animationLoop&&this._animationLoop(t,r)};e()}stop(){this._context.cancelAnimationFrame(this._requestId),this._requestId=null}getAnimationLoop(){return this._animationLoop}setAnimationLoop(e){this._animationLoop=e}getContext(){return this._context}setContext(e){this._context=e}dispose(){this.stop()}}class Um{constructor(){this.weakMap=new WeakMap}get(e){let t=this.weakMap;for(let r=0;r<e.length-1;r++)if(t=t.get(e[r]),void 0===t)return;return t.get(e[e.length-1])}set(e,t){let r=this.weakMap;for(let t=0;t<e.length-1;t++){const s=e[t];!1===r.has(s)&&r.set(s,new WeakMap),r=r.get(s)}return r.set(e[e.length-1],t),this}delete(e){let t=this.weakMap;for(let r=0;r<e.length-1;r++)if(t=t.get(e[r]),void 0===t)return!1;return t.delete(e[e.length-1])}}let Om=0;class km{constructor(e,t,r,s,i,n,a,o,u,l){this.id=Om++,this._nodes=e,this._geometries=t,this.renderer=r,this.object=s,this.material=i,this.scene=n,this.camera=a,this.lightsNode=o,this.context=u,this.geometry=s.geometry,this.version=i.version,this.drawRange=null,this.attributes=null,this.pipeline=null,this.group=null,this.vertexBuffers=null,this.drawParams=null,this.bundle=null,this.clippingContext=l,this.clippingContextCacheKey=null!==l?l.cacheKey:"",this.initialNodesCacheKey=this.getDynamicCacheKey(),this.initialCacheKey=this.getCacheKey(),this._nodeBuilderState=null,this._bindings=null,this._monitor=null,this.onDispose=null,this.isRenderObject=!0,this.onMaterialDispose=()=>{this.dispose()},this.material.addEventListener("dispose",this.onMaterialDispose)}updateClipping(e){this.clippingContext=e}get clippingNeedsUpdate(){return null!==this.clippingContext&&this.clippingContext.cacheKey!==this.clippingContextCacheKey&&(this.clippingContextCacheKey=this.clippingContext.cacheKey,!0)}get hardwareClippingPlanes(){return!0===this.material.hardwareClipping?this.clippingContext.unionClippingCount:0}getNodeBuilderState(){return this._nodeBuilderState||(this._nodeBuilderState=this._nodes.getForRender(this))}getMonitor(){return this._monitor||(this._monitor=this.getNodeBuilderState().observer)}getBindings(){return this._bindings||(this._bindings=this.getNodeBuilderState().createBindings())}getBindingGroup(e){for(const t of this.getBindings())if(t.name===e)return t}getIndex(){return this._geometries.getIndex(this)}getIndirect(){return this._geometries.getIndirect(this)}getChainArray(){return[this.object,this.material,this.context,this.lightsNode]}setGeometry(e){this.geometry=e,this.attributes=null}getAttributes(){if(null!==this.attributes)return this.attributes;const e=this.getNodeBuilderState().nodeAttributes,t=this.geometry,r=[],s=new Set;for(const i of e){const e=i.node&&i.node.attribute?i.node.attribute:t.getAttribute(i.name);if(void 0===e)continue;r.push(e);const n=e.isInterleavedBufferAttribute?e.data:e;s.add(n)}return this.attributes=r,this.vertexBuffers=Array.from(s.values()),r}getVertexBuffers(){return null===this.vertexBuffers&&this.getAttributes(),this.vertexBuffers}getDrawParameters(){const{object:e,material:t,geometry:r,group:s,drawRange:i}=this,n=this.drawParams||(this.drawParams={vertexCount:0,firstVertex:0,instanceCount:0,firstInstance:0}),a=this.getIndex(),o=null!==a;let u=1;if(!0===r.isInstancedBufferGeometry?u=r.instanceCount:void 0!==e.count&&(u=Math.max(0,e.count)),0===u)return null;if(n.instanceCount=u,!0===e.isBatchedMesh)return n;let l=1;!0!==t.wireframe||e.isPoints||e.isLineSegments||e.isLine||e.isLineLoop||(l=2);let d=i.start*l,c=(i.start+i.count)*l;null!==s&&(d=Math.max(d,s.start*l),c=Math.min(c,(s.start+s.count)*l));const h=r.attributes.position;let p=1/0;o?p=a.count:null!=h&&(p=h.count),d=Math.max(d,0),c=Math.min(c,p);const g=c-d;return g<0||g===1/0?null:(n.vertexCount=g,n.firstVertex=d,n)}getGeometryCacheKey(){const{geometry:e}=this;let t="";for(const r of Object.keys(e.attributes).sort()){const s=e.attributes[r];t+=r+",",s.data&&(t+=s.data.stride+","),s.offset&&(t+=s.offset+","),s.itemSize&&(t+=s.itemSize+","),s.normalized&&(t+="n,")}for(const r of Object.keys(e.morphAttributes).sort()){const s=e.morphAttributes[r];t+="morph-"+r+",";for(let e=0,r=s.length;e<r;e++){t+=s[e].id+","}}return e.index&&(t+="index,"),t}getMaterialCacheKey(){const{object:e,material:t}=this;let r=t.customProgramCacheKey();for(const e of function(e){const t=Object.keys(e);let r=Object.getPrototypeOf(e);for(;r;){const e=Object.getOwnPropertyDescriptors(r);for(const r in e)if(void 0!==e[r]){const s=e[r];s&&"function"==typeof s.get&&t.push(r)}r=Object.getPrototypeOf(r)}return t}(t)){if(/^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test(e))continue;const s=t[e];let i;if(null!==s){const e=typeof s;"number"===e?i=0!==s?"1":"0":"object"===e?(i="{",s.isTexture&&(i+=s.mapping),i+="}"):i=String(s)}else i=String(s);r+=i+","}return r+=this.clippingContextCacheKey+",",e.geometry&&(r+=this.getGeometryCacheKey()),e.skeleton&&(r+=e.skeleton.bones.length+","),e.isBatchedMesh&&(r+=e._matricesTexture.uuid+",",null!==e._colorsTexture&&(r+=e._colorsTexture.uuid+",")),e.count>1&&(r+=e.uuid+","),r+=e.receiveShadow+",",bs(r)}get needsGeometryUpdate(){return this.geometry.id!==this.object.geometry.id}get needsUpdate(){return this.initialNodesCacheKey!==this.getDynamicCacheKey()||this.clippingNeedsUpdate}getDynamicCacheKey(){let e=0;return!0!==this.material.isShadowPassMaterial&&(e=this._nodes.getCacheKey(this.scene,this.lightsNode)),this.camera.isArrayCamera&&(e=_s(e,this.camera.cameras.length)),this.object.receiveShadow&&(e=_s(e,1)),e}getCacheKey(){return this.getMaterialCacheKey()+this.getDynamicCacheKey()}dispose(){this.material.removeEventListener("dispose",this.onMaterialDispose),this.onDispose()}}const Gm=[];class zm{constructor(e,t,r,s,i,n){this.renderer=e,this.nodes=t,this.geometries=r,this.pipelines=s,this.bindings=i,this.info=n,this.chainMaps={}}get(e,t,r,s,i,n,a,o){const u=this.getChainMap(o);Gm[0]=e,Gm[1]=t,Gm[2]=n,Gm[3]=i;let l=u.get(Gm);return void 0===l?(l=this.createRenderObject(this.nodes,this.geometries,this.renderer,e,t,r,s,i,n,a,o),u.set(Gm,l)):(l.updateClipping(a),l.needsGeometryUpdate&&l.setGeometry(e.geometry),(l.version!==t.version||l.needsUpdate)&&(l.initialCacheKey!==l.getCacheKey()?(l.dispose(),l=this.get(e,t,r,s,i,n,a,o)):l.version=t.version)),Gm.length=0,l}getChainMap(e="default"){return this.chainMaps[e]||(this.chainMaps[e]=new Um)}dispose(){this.chainMaps={}}createRenderObject(e,t,r,s,i,n,a,o,u,l,d){const c=this.getChainMap(d),h=new km(e,t,r,s,i,n,a,o,u,l);return h.onDispose=()=>{this.pipelines.delete(h),this.bindings.delete(h),this.nodes.delete(h),c.delete(h.getChainArray())},h}}class $m{constructor(){this.data=new WeakMap}get(e){let t=this.data.get(e);return void 0===t&&(t={},this.data.set(e,t)),t}delete(e){let t=null;return this.data.has(e)&&(t=this.data.get(e),this.data.delete(e)),t}has(e){return this.data.has(e)}dispose(){this.data=new WeakMap}}const Hm=1,Wm=2,jm=3,qm=4,Xm=16;class Km extends $m{constructor(e){super(),this.backend=e}delete(e){const t=super.delete(e);return null!==t&&this.backend.destroyAttribute(e),t}update(e,t){const r=this.get(e);if(void 0===r.version)t===Hm?this.backend.createAttribute(e):t===Wm?this.backend.createIndexAttribute(e):t===jm?this.backend.createStorageAttribute(e):t===qm&&this.backend.createIndirectStorageAttribute(e),r.version=this._getBufferAttribute(e).version;else{const t=this._getBufferAttribute(e);(r.version<t.version||t.usage===y)&&(this.backend.updateAttribute(e),r.version=t.version)}}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}}function Ym(e){return null!==e.index?e.index.version:e.attributes.position.version}function Qm(e){const t=[],r=e.index,s=e.attributes.position;if(null!==r){const e=r.array;for(let r=0,s=e.length;r<s;r+=3){const s=e[r+0],i=e[r+1],n=e[r+2];t.push(s,i,i,n,n,s)}}else{for(let e=0,r=s.array.length/3-1;e<r;e+=3){const r=e+0,s=e+1,i=e+2;t.push(r,s,s,i,i,r)}}const i=new(Ne(t)?_e:ve)(t,1);return i.version=Ym(e),i}class Zm extends $m{constructor(e,t){super(),this.attributes=e,this.info=t,this.wireframes=new WeakMap,this.attributeCall=new WeakMap}has(e){const t=e.geometry;return super.has(t)&&!0===this.get(t).initialized}updateForRender(e){!1===this.has(e)&&this.initGeometry(e),this.updateAttributes(e)}initGeometry(e){const t=e.geometry;this.get(t).initialized=!0,this.info.memory.geometries++;const r=()=>{this.info.memory.geometries--;const s=t.index,i=e.getAttributes();null!==s&&this.attributes.delete(s);for(const e of i)this.attributes.delete(e);const n=this.wireframes.get(t);void 0!==n&&this.attributes.delete(n),t.removeEventListener("dispose",r)};t.addEventListener("dispose",r)}updateAttributes(e){const t=e.getAttributes();for(const e of t)e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute?this.updateAttribute(e,jm):this.updateAttribute(e,Hm);const r=this.getIndex(e);null!==r&&this.updateAttribute(r,Wm);const s=e.geometry.indirect;null!==s&&this.updateAttribute(s,qm)}updateAttribute(e,t){const r=this.info.render.calls;e.isInterleavedBufferAttribute?void 0===this.attributeCall.get(e)?(this.attributes.update(e,t),this.attributeCall.set(e,r)):this.attributeCall.get(e.data)!==r&&(this.attributes.update(e,t),this.attributeCall.set(e.data,r),this.attributeCall.set(e,r)):this.attributeCall.get(e)!==r&&(this.attributes.update(e,t),this.attributeCall.set(e,r))}getIndirect(e){return e.geometry.indirect}getIndex(e){const{geometry:t,material:r}=e;let s=t.index;if(!0===r.wireframe){const e=this.wireframes;let r=e.get(t);void 0===r?(r=Qm(t),e.set(t,r)):r.version!==Ym(t)&&(this.attributes.delete(r),r=Qm(t),e.set(t,r)),s=r}return s}}class Jm{constructor(){this.autoReset=!0,this.frame=0,this.calls=0,this.render={calls:0,frameCalls:0,drawCalls:0,triangles:0,points:0,lines:0,timestamp:0},this.compute={calls:0,frameCalls:0,timestamp:0},this.memory={geometries:0,textures:0}}update(e,t,r){this.render.drawCalls++,e.isMesh||e.isSprite?this.render.triangles+=r*(t/3):e.isPoints?this.render.points+=r*t:e.isLineSegments?this.render.lines+=r*(t/2):e.isLine?this.render.lines+=r*(t-1):console.error("THREE.WebGPUInfo: Unknown object type.")}reset(){this.render.drawCalls=0,this.render.frameCalls=0,this.compute.frameCalls=0,this.render.triangles=0,this.render.points=0,this.render.lines=0}dispose(){this.reset(),this.calls=0,this.render.calls=0,this.compute.calls=0,this.render.timestamp=0,this.compute.timestamp=0,this.memory.geometries=0,this.memory.textures=0}}class ef{constructor(e){this.cacheKey=e,this.usedTimes=0}}class tf extends ef{constructor(e,t,r){super(e),this.vertexProgram=t,this.fragmentProgram=r}}class rf extends ef{constructor(e,t){super(e),this.computeProgram=t,this.isComputePipeline=!0}}let sf=0;class nf{constructor(e,t,r,s=null,i=null){this.id=sf++,this.code=e,this.stage=t,this.name=r,this.transforms=s,this.attributes=i,this.usedTimes=0}}class af extends $m{constructor(e,t){super(),this.backend=e,this.nodes=t,this.bindings=null,this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}getForCompute(e,t){const{backend:r}=this,s=this.get(e);if(this._needsComputeUpdate(e)){const i=s.pipeline;i&&(i.usedTimes--,i.computeProgram.usedTimes--);const n=this.nodes.getForCompute(e);let a=this.programs.compute.get(n.computeShader);void 0===a&&(i&&0===i.computeProgram.usedTimes&&this._releaseProgram(i.computeProgram),a=new nf(n.computeShader,"compute",e.name,n.transforms,n.nodeAttributes),this.programs.compute.set(n.computeShader,a),r.createProgram(a));const o=this._getComputeCacheKey(e,a);let u=this.caches.get(o);void 0===u&&(i&&0===i.usedTimes&&this._releasePipeline(i),u=this._getComputePipeline(e,a,o,t)),u.usedTimes++,a.usedTimes++,s.version=e.version,s.pipeline=u}return s.pipeline}getForRender(e,t=null){const{backend:r}=this,s=this.get(e);if(this._needsRenderUpdate(e)){const i=s.pipeline;i&&(i.usedTimes--,i.vertexProgram.usedTimes--,i.fragmentProgram.usedTimes--);const n=e.getNodeBuilderState(),a=e.material?e.material.name:"";let o=this.programs.vertex.get(n.vertexShader);void 0===o&&(i&&0===i.vertexProgram.usedTimes&&this._releaseProgram(i.vertexProgram),o=new nf(n.vertexShader,"vertex",a),this.programs.vertex.set(n.vertexShader,o),r.createProgram(o));let u=this.programs.fragment.get(n.fragmentShader);void 0===u&&(i&&0===i.fragmentProgram.usedTimes&&this._releaseProgram(i.fragmentProgram),u=new nf(n.fragmentShader,"fragment",a),this.programs.fragment.set(n.fragmentShader,u),r.createProgram(u));const l=this._getRenderCacheKey(e,o,u);let d=this.caches.get(l);void 0===d?(i&&0===i.usedTimes&&this._releasePipeline(i),d=this._getRenderPipeline(e,o,u,l,t)):e.pipeline=d,d.usedTimes++,o.usedTimes++,u.usedTimes++,s.pipeline=d}return s.pipeline}delete(e){const t=this.get(e).pipeline;return t&&(t.usedTimes--,0===t.usedTimes&&this._releasePipeline(t),t.isComputePipeline?(t.computeProgram.usedTimes--,0===t.computeProgram.usedTimes&&this._releaseProgram(t.computeProgram)):(t.fragmentProgram.usedTimes--,t.vertexProgram.usedTimes--,0===t.vertexProgram.usedTimes&&this._releaseProgram(t.vertexProgram),0===t.fragmentProgram.usedTimes&&this._releaseProgram(t.fragmentProgram))),super.delete(e)}dispose(){super.dispose(),this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}updateForRender(e){this.getForRender(e)}_getComputePipeline(e,t,r,s){r=r||this._getComputeCacheKey(e,t);let i=this.caches.get(r);return void 0===i&&(i=new rf(r,t),this.caches.set(r,i),this.backend.createComputePipeline(i,s)),i}_getRenderPipeline(e,t,r,s,i){s=s||this._getRenderCacheKey(e,t,r);let n=this.caches.get(s);return void 0===n&&(n=new tf(s,t,r),this.caches.set(s,n),e.pipeline=n,this.backend.createRenderPipeline(e,i)),n}_getComputeCacheKey(e,t){return e.id+","+t.id}_getRenderCacheKey(e,t,r){return t.id+","+r.id+","+this.backend.getRenderCacheKey(e)}_releasePipeline(e){this.caches.delete(e.cacheKey)}_releaseProgram(e){const t=e.code,r=e.stage;this.programs[r].delete(t)}_needsComputeUpdate(e){const t=this.get(e);return void 0===t.pipeline||t.version!==e.version}_needsRenderUpdate(e){return void 0===this.get(e).pipeline||this.backend.needsRenderUpdate(e)}}class of extends $m{constructor(e,t,r,s,i,n){super(),this.backend=e,this.textures=r,this.pipelines=i,this.attributes=s,this.nodes=t,this.info=n,this.pipelines.bindings=this}getForRender(e){const t=e.getBindings();for(const e of t){const r=this.get(e);void 0===r.bindGroup&&(this._init(e),this.backend.createBindings(e,t,0),r.bindGroup=e)}return t}getForCompute(e){const t=this.nodes.getForCompute(e).bindings;for(const e of t){const r=this.get(e);void 0===r.bindGroup&&(this._init(e),this.backend.createBindings(e,t,0),r.bindGroup=e)}return t}updateForCompute(e){this._updateBindings(this.getForCompute(e))}updateForRender(e){this._updateBindings(this.getForRender(e))}_updateBindings(e){for(const t of e)this._update(t,e)}_init(e){for(const t of e.bindings)if(t.isSampledTexture)this.textures.updateTexture(t.texture);else if(t.isStorageBuffer){const e=t.attribute,r=e.isIndirectStorageBufferAttribute?qm:jm;this.attributes.update(e,r)}}_update(e,t){const{backend:r}=this;let s=!1,i=!0,n=0,a=0;for(const t of e.bindings){if(t.isNodeUniformsGroup){if(!1===this.nodes.updateGroup(t))continue}if(t.isStorageBuffer){const e=t.attribute,r=e.isIndirectStorageBufferAttribute?qm:jm;this.attributes.update(e,r)}if(t.isUniformBuffer){t.update()&&r.updateBinding(t)}else if(t.isSampler)t.update();else if(t.isSampledTexture){const e=this.textures.get(t.texture);t.needsBindingsUpdate(e.generation)&&(s=!0);const o=t.update(),u=t.texture;o&&this.textures.updateTexture(u);const l=r.get(u);if(void 0!==l.externalTexture||e.isDefaultTexture?i=!1:(n=10*n+u.id,a+=u.version),!0===r.isWebGPUBackend&&void 0===l.texture&&void 0===l.externalTexture&&(console.error("Bindings._update: binding should be available:",t,o,u,t.textureNode.value,s),this.textures.updateTexture(u),s=!0),!0===u.isStorageTexture){const e=this.get(u);!0===t.store?e.needsMipmap=!0:this.textures.needsMipmaps(u)&&!0===e.needsMipmap&&(this.backend.generateMipmaps(u),e.needsMipmap=!1)}}}!0===s&&this.backend.updateBindings(e,t,i?n:0,a)}}function uf(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?e.z-t.z:e.id-t.id}function lf(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function df(e){return(e.transmission>0||e.transmissionNode)&&e.side===Se&&!1===e.forceSinglePass}class cf{constructor(e,t,r){this.renderItems=[],this.renderItemsIndex=0,this.opaque=[],this.transparentDoublePass=[],this.transparent=[],this.bundles=[],this.lightsNode=e.getNode(t,r),this.lightsArray=[],this.scene=t,this.camera=r,this.occlusionQueryCount=0}begin(){return this.renderItemsIndex=0,this.opaque.length=0,this.transparentDoublePass.length=0,this.transparent.length=0,this.bundles.length=0,this.lightsArray.length=0,this.occlusionQueryCount=0,this}getNextRenderItem(e,t,r,s,i,n,a){let o=this.renderItems[this.renderItemsIndex];return void 0===o?(o={id:e.id,object:e,geometry:t,material:r,groupOrder:s,renderOrder:e.renderOrder,z:i,group:n,clippingContext:a},this.renderItems[this.renderItemsIndex]=o):(o.id=e.id,o.object=e,o.geometry=t,o.material=r,o.groupOrder=s,o.renderOrder=e.renderOrder,o.z=i,o.group=n,o.clippingContext=a),this.renderItemsIndex++,o}push(e,t,r,s,i,n,a){const o=this.getNextRenderItem(e,t,r,s,i,n,a);!0===e.occlusionTest&&this.occlusionQueryCount++,!0===r.transparent||r.transmission>0?(df(r)&&this.transparentDoublePass.push(o),this.transparent.push(o)):this.opaque.push(o)}unshift(e,t,r,s,i,n,a){const o=this.getNextRenderItem(e,t,r,s,i,n,a);!0===r.transparent||r.transmission>0?(df(r)&&this.transparentDoublePass.unshift(o),this.transparent.unshift(o)):this.opaque.unshift(o)}pushBundle(e){this.bundles.push(e)}pushLight(e){this.lightsArray.push(e)}sort(e,t){this.opaque.length>1&&this.opaque.sort(e||uf),this.transparentDoublePass.length>1&&this.transparentDoublePass.sort(t||lf),this.transparent.length>1&&this.transparent.sort(t||lf)}finish(){this.lightsNode.setLights(this.lightsArray);for(let e=this.renderItemsIndex,t=this.renderItems.length;e<t;e++){const t=this.renderItems[e];if(null===t.id)break;t.id=null,t.object=null,t.geometry=null,t.material=null,t.groupOrder=null,t.renderOrder=null,t.z=null,t.group=null,t.clippingContext=null}}}const hf=[];class pf{constructor(e){this.lighting=e,this.lists=new Um}get(e,t){const r=this.lists;hf[0]=e,hf[1]=t;let s=r.get(hf);return void 0===s&&(s=new cf(this.lighting,e,t),r.set(hf,s)),hf.length=0,s}dispose(){this.lists=new Um}}let gf=0;class mf{constructor(){this.id=gf++,this.color=!0,this.clearColor=!0,this.clearColorValue={r:0,g:0,b:0,a:1},this.depth=!0,this.clearDepth=!0,this.clearDepthValue=1,this.stencil=!1,this.clearStencil=!0,this.clearStencilValue=1,this.viewport=!1,this.viewportValue=new s,this.scissor=!1,this.scissorValue=new s,this.renderTarget=null,this.textures=null,this.depthTexture=null,this.activeCubeFace=0,this.activeMipmapLevel=0,this.sampleCount=1,this.width=0,this.height=0,this.occlusionQueryCount=0,this.clippingContext=null,this.isRenderContext=!0}getCacheKey(){return ff(this)}}function ff(e){const{textures:t,activeCubeFace:r}=e,s=[r];for(const e of t)s.push(e.id);return Ts(s)}const yf=[],xf=new j,bf=new we;class Tf{constructor(){this.chainMaps={}}get(e,t,r=null){let s;if(yf[0]=e,yf[1]=t,null===r)s="default";else{const e=r.texture.format;s=`${r.textures.length}:${e}:${r.samples}:${r.depthBuffer}:${r.stencilBuffer}`}const i=this._getChainMap(s);let n=i.get(yf);return void 0===n&&(n=new mf,i.set(yf,n)),yf.length=0,null!==r&&(n.sampleCount=0===r.samples?1:r.samples),n}getForClear(e=null){return this.get(xf,bf,e)}_getChainMap(e){return this.chainMaps[e]||(this.chainMaps[e]=new Um)}dispose(){this.chainMaps={}}}const _f=new r;class vf extends $m{constructor(e,t,r){super(),this.renderer=e,this.backend=t,this.info=r}updateRenderTarget(e,t=0){const r=this.get(e),s=0===e.samples?1:e.samples,i=r.depthTextureMips||(r.depthTextureMips={}),n=e.textures,a=this.getSize(n[0]),o=a.width>>t,u=a.height>>t;let l=e.depthTexture||i[t];const d=!0===e.depthBuffer||!0===e.stencilBuffer;let c=!1;void 0===l&&d&&(l=!0===e.multiview&&a.depth>1?new Ee:new D,l.format=e.stencilBuffer?Ae:Re,l.type=e.stencilBuffer?Ce:b,l.image.width=o,l.image.height=u,l.image.depth=a.depth,i[t]=l),r.width===a.width&&a.height===r.height||(c=!0,l&&(l.needsUpdate=!0,l.image.width=o,l.image.height=u,l.image.depth=l.isDepthArrayTexture?l.image.depth:1)),r.width=a.width,r.height=a.height,r.textures=n,r.depthTexture=l||null,r.depth=e.depthBuffer,r.stencil=e.stencilBuffer,r.renderTarget=e,r.sampleCount!==s&&(c=!0,l&&(l.needsUpdate=!0),r.sampleCount=s);const h={sampleCount:s};if(!0!==e.isXRRenderTarget){for(let t=0;t<n.length;t++){const r=n[t];r.isTextureArray=!0===e.multiview&&a.depth>1,c&&(r.needsUpdate=!0),this.updateTexture(r,h)}l&&this.updateTexture(l,h)}if(!0!==r.initialized){r.initialized=!0;const t=()=>{e.removeEventListener("dispose",t);for(let e=0;e<n.length;e++)this._destroyTexture(n[e]);l&&this._destroyTexture(l),this.delete(e)};e.addEventListener("dispose",t)}}updateTexture(e,t={}){const r=this.get(e);if(!0===r.initialized&&r.version===e.version)return;const s=e.isRenderTargetTexture||e.isDepthTexture||e.isFramebufferTexture,i=this.backend;if(s&&!0===r.initialized&&(i.destroySampler(e),i.destroyTexture(e)),e.isFramebufferTexture){const t=this.renderer.getRenderTarget();e.type=t?t.texture.type:Me}const{width:n,height:a,depth:o}=this.getSize(e);if(t.width=n,t.height=a,t.depth=o,t.needsMipmaps=this.needsMipmaps(e),t.levels=t.needsMipmaps?this.getMipLevels(e,n,a):1,s||!0===e.isStorageTexture)i.createSampler(e),i.createTexture(e,t),r.generation=e.version;else{if(!0!==r.initialized&&i.createSampler(e),e.version>0){const s=e.image;if(void 0===s)console.warn("THREE.Renderer: Texture marked for update but image is undefined.");else if(!1===s.complete)console.warn("THREE.Renderer: Texture marked for update but image is incomplete.");else{if(e.images){const r=[];for(const t of e.images)r.push(t);t.images=r}else t.image=s;void 0!==r.isDefaultTexture&&!0!==r.isDefaultTexture||(i.createTexture(e,t),r.isDefaultTexture=!1,r.generation=e.version),!0===e.source.dataReady&&i.updateTexture(e,t),t.needsMipmaps&&0===e.mipmaps.length&&i.generateMipmaps(e)}}else i.createDefaultTexture(e),r.isDefaultTexture=!0,r.generation=e.version}if(!0!==r.initialized){r.initialized=!0,r.generation=e.version,this.info.memory.textures++;const t=()=>{e.removeEventListener("dispose",t),this._destroyTexture(e)};e.addEventListener("dispose",t)}r.version=e.version}getSize(e,t=_f){let r=e.images?e.images[0]:e.image;return r?(void 0!==r.image&&(r=r.image),t.width=r.width||1,t.height=r.height||1,t.depth=e.isCubeTexture?6:r.depth||1):t.width=t.height=t.depth=1,t}getMipLevels(e,t,r){let s;return s=e.isCompressedTexture?e.mipmaps?e.mipmaps.length:1:Math.floor(Math.log2(Math.max(t,r)))+1,s}needsMipmaps(e){return!0===e.isCompressedTexture||e.generateMipmaps}_destroyTexture(e){!0===this.has(e)&&(this.backend.destroySampler(e),this.backend.destroyTexture(e),this.delete(e),this.info.memory.textures--)}}class Nf extends e{constructor(e,t,r,s=1){super(e,t,r),this.a=s}set(e,t,r,s=1){return this.a=s,super.set(e,t,r)}copy(e){return void 0!==e.a&&(this.a=e.a),super.copy(e)}clone(){return new this.constructor(this.r,this.g,this.b,this.a)}}class Sf extends hn{static get type(){return"ParameterNode"}constructor(e,t=null){super(e,t),this.isParameterNode=!0}getHash(){return this.uuid}generate(){return this.name}}class wf extends Hs{static get type(){return"StackNode"}constructor(e=null){super(),this.nodes=[],this.outputNode=null,this.parent=e,this._currentCond=null,this._expressionNode=null,this.isStackNode=!0}getNodeType(e){return this.outputNode?this.outputNode.getNodeType(e):"void"}getMemberType(e,t){return this.outputNode?this.outputNode.getMemberType(e,t):"void"}add(e){return this.nodes.push(e),this}If(e,t){const r=new Pi(t);return this._currentCond=jo(e,r),this.add(this._currentCond)}ElseIf(e,t){const r=new Pi(t),s=jo(e,r);return this._currentCond.elseNode=s,this._currentCond=s,this}Else(e){return this._currentCond.elseNode=new Pi(e),this}Switch(e){return this._expressionNode=Li(e),this}Case(...e){const t=[];if(!(e.length>=2))throw new Error("TSL: Invalid parameter length. Case() requires at least two parameters.");for(let r=0;r<e.length-1;r++)t.push(this._expressionNode.equal(Li(e[r])));const r=new Pi(e[e.length-1]);let s=t[0];for(let e=1;e<t.length;e++)s=s.or(t[e]);const i=jo(s,r);return null===this._currentCond?(this._currentCond=i,this.add(this._currentCond)):(this._currentCond.elseNode=i,this._currentCond=i,this)}Default(e){return this.Else(e),this}build(e,...t){const r=ki();Oi(this);for(const t of this.nodes)t.build(e,"void");return Oi(r),this.outputNode?this.outputNode.build(e,...t):super.build(e,...t)}else(...e){return console.warn("THREE.TSL: .else() has been renamed to .Else()."),this.Else(...e)}elseif(...e){return console.warn("THREE.TSL: .elseif() has been renamed to .ElseIf()."),this.ElseIf(...e)}}const Ef=Di(wf).setParameterLength(0,1);class Af extends Hs{static get type(){return"StructTypeNode"}constructor(e,t=null){var r;super("struct"),this.membersLayout=(r=e,Object.entries(r).map((([e,t])=>"string"==typeof t?{name:e,type:t,atomic:!1}:{name:e,type:t.type,atomic:t.atomic||!1}))),this.name=t,this.isStructLayoutNode=!0}getLength(){let e=0;for(const t of this.membersLayout)e+=Rs(t.type);return e}getMemberType(e,t){const r=this.membersLayout.find((e=>e.name===t));return r?r.type:"void"}getNodeType(e){return e.getStructTypeFromNode(this,this.membersLayout,this.name).name}setup(e){e.addInclude(this)}generate(e){return this.getNodeType(e)}}class Rf extends Hs{static get type(){return"StructNode"}constructor(e,t){super("vec3"),this.structLayoutNode=e,this.values=t,this.isStructNode=!0}getNodeType(e){return this.structLayoutNode.getNodeType(e)}getMemberType(e,t){return this.structLayoutNode.getMemberType(e,t)}generate(e){const t=e.getVarFromNode(this),r=t.type,s=e.getPropertyName(t);return e.addLineFlowCode(`${s} = ${e.generateStruct(r,this.structLayoutNode.membersLayout,this.values)}`,this),t.name}}class Cf extends Hs{static get type(){return"OutputStructNode"}constructor(...e){super(),this.members=e,this.isOutputStructNode=!0}getNodeType(e){const t=e.getNodeProperties(this);if(void 0===t.membersLayout){const r=this.members,s=[];for(let t=0;t<r.length;t++){const i="m"+t,n=r[t].getNodeType(e);s.push({name:i,type:n,index:t})}t.membersLayout=s,t.structType=e.getOutputStructTypeFromNode(this,t.membersLayout)}return t.structType.name}generate(e){const t=e.getOutputStructName(),r=this.members,s=""!==t?t+".":"";for(let t=0;t<r.length;t++){const i=r[t].build(e);e.addLineFlowCode(`${s}m${t} = ${i}`,this)}return t}}const Mf=Di(Cf);function Pf(e,t){for(let r=0;r<e.length;r++)if(e[r].name===t)return r;return-1}class Lf extends Cf{static get type(){return"MRTNode"}constructor(e){super(),this.outputNodes=e,this.isMRTNode=!0}has(e){return void 0!==this.outputNodes[e]}get(e){return this.outputNodes[e]}merge(e){const t={...this.outputNodes,...e.outputNodes};return Ff(t)}setup(e){const t=this.outputNodes,r=[],s=e.renderer.getRenderTarget().textures;for(const e in t){r[Pf(s,e)]=rn(t[e])}return this.members=r,super.setup(e)}}const Ff=Di(Lf),Bf=Ui((([e])=>{const t=e.toUint().mul(747796405).add(2891336453),r=t.shiftRight(t.shiftRight(28).add(4)).bitXor(t).mul(277803737);return r.shiftRight(22).bitXor(r).toFloat().mul(1/2**32)})),Df=(e,t)=>Eo(oa(4,e.mul(aa(1,e))),t),If=Ui((([e])=>e.fract().sub(.5).abs())).setLayout({name:"tri",type:"float",inputs:[{name:"x",type:"float"}]}),Vf=Ui((([e])=>Zi(If(e.z.add(If(e.y.mul(1)))),If(e.z.add(If(e.x.mul(1)))),If(e.y.add(If(e.x.mul(1))))))).setLayout({name:"tri3",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),Uf=Ui((([e,t,r])=>{const s=Zi(e).toVar(),i=Hi(1.4).toVar(),n=Hi(0).toVar(),a=Zi(s).toVar();return Xc({start:Hi(0),end:Hi(3),type:"float",condition:"<="},(()=>{const e=Zi(Vf(a.mul(2))).toVar();s.addAssign(e.add(r.mul(Hi(.1).mul(t)))),a.mulAssign(1.8),i.mulAssign(1.5),s.mulAssign(1.2);const o=Hi(If(s.z.add(If(s.x.add(If(s.y)))))).toVar();n.addAssign(o.div(i)),a.addAssign(.14)})),n})).setLayout({name:"triNoise3D",type:"float",inputs:[{name:"position",type:"vec3"},{name:"speed",type:"float"},{name:"time",type:"float"}]});class Of extends Hs{static get type(){return"FunctionOverloadingNode"}constructor(e=[],...t){super(),this.functionNodes=e,this.parametersNodes=t,this._candidateFnCall=null,this.global=!0}getNodeType(){return this.functionNodes[0].shaderNode.layout.type}setup(e){const t=this.parametersNodes;let r=this._candidateFnCall;if(null===r){let s=null,i=-1;for(const r of this.functionNodes){const n=r.shaderNode.layout;if(null===n)throw new Error("FunctionOverloadingNode: FunctionNode must be a layout.");const a=n.inputs;if(t.length===a.length){let n=0;for(let r=0;r<t.length;r++){const s=t[r],i=a[r];s.getNodeType(e)===i.type?n++:n=0}n>i&&(s=r,i=n)}}this._candidateFnCall=r=s(...t)}return r}}const kf=Di(Of),Gf=e=>(...t)=>kf(e,...t),zf=Yn(0).setGroup(qn).onRenderUpdate((e=>e.time)),$f=Yn(0).setGroup(qn).onRenderUpdate((e=>e.deltaTime)),Hf=Yn(0,"uint").setGroup(qn).onRenderUpdate((e=>e.frameId)),Wf=Ui((([e,t,r=Xi(.5)])=>Sm(e.sub(r),t).add(r))),jf=Ui((([e,t,r=Xi(.5)])=>{const s=e.sub(r),i=s.dot(s),n=i.mul(i).mul(t);return e.add(s.mul(n))})),qf=Ui((({position:e=null,horizontal:t=!0,vertical:r=!1})=>{let s;null!==e?(s=Nl.toVar(),s[3][0]=e.x,s[3][1]=e.y,s[3][2]=e.z):s=Nl;const i=ll.mul(s);return Ci(t)&&(i[0][0]=Nl[0].length(),i[0][1]=0,i[0][2]=0),Ci(r)&&(i[1][0]=0,i[1][1]=Nl[1].length(),i[1][2]=0),i[2][0]=0,i[2][1]=0,i[2][2]=1,ol.mul(i).mul(Dl)})),Xf=Ui((([e=null])=>{const t=Fh();return Fh(wh(e)).sub(t).lessThan(0).select(lh,e)}));class Kf extends Hs{static get type(){return"SpriteSheetUVNode"}constructor(e,t=Hu(),r=Hi(0)){super("vec2"),this.countNode=e,this.uvNode=t,this.frameNode=r}setup(){const{frameNode:e,uvNode:t,countNode:r}=this,{width:s,height:i}=r,n=e.mod(s.mul(i)).floor(),a=n.mod(s),o=i.sub(n.add(1).div(s).ceil()),u=r.reciprocal(),l=Xi(a,o);return t.add(l).mul(u)}}const Yf=Di(Kf).setParameterLength(3);class Qf extends Hs{static get type(){return"TriplanarTexturesNode"}constructor(e,t=null,r=null,s=Hi(1),i=Dl,n=Wl){super("vec4"),this.textureXNode=e,this.textureYNode=t,this.textureZNode=r,this.scaleNode=s,this.positionNode=i,this.normalNode=n}setup(){const{textureXNode:e,textureYNode:t,textureZNode:r,scaleNode:s,positionNode:i,normalNode:n}=this;let a=n.abs().normalize();a=a.div(a.dot(Zi(1)));const o=i.yz.mul(s),u=i.zx.mul(s),l=i.xy.mul(s),d=e.value,c=null!==t?t.value:d,h=null!==r?r.value:d,p=Yu(d,o).mul(a.x),g=Yu(c,u).mul(a.y),m=Yu(h,l).mul(a.z);return na(p,g,m)}}const Zf=Di(Qf).setParameterLength(1,6),Jf=new Pe,ey=new r,ty=new r,ry=new r,sy=new a,iy=new r(0,0,-1),ny=new s,ay=new r,oy=new r,uy=new s,ly=new t,dy=new ae,cy=lh.flipX();dy.depthTexture=new D(1,1);let hy=!1;class py extends Ku{static get type(){return"ReflectorNode"}constructor(e={}){super(e.defaultTexture||dy.texture,cy),this._reflectorBaseNode=e.reflector||new gy(this,e),this._depthNode=null,this.setUpdateMatrix(!1)}get reflector(){return this._reflectorBaseNode}get target(){return this._reflectorBaseNode.target}getDepthNode(){if(null===this._depthNode){if(!0!==this._reflectorBaseNode.depth)throw new Error("THREE.ReflectorNode: Depth node can only be requested when the reflector is created with { depth: true }. ");this._depthNode=Li(new py({defaultTexture:dy.depthTexture,reflector:this._reflectorBaseNode}))}return this._depthNode}setup(e){return e.object.isQuadMesh||this._reflectorBaseNode.build(e),super.setup(e)}clone(){const e=new this.constructor(this.reflectorNode);return e._reflectorBaseNode=this._reflectorBaseNode,e}dispose(){super.dispose(),this._reflectorBaseNode.dispose()}}class gy extends Hs{static get type(){return"ReflectorBaseNode"}constructor(e,t={}){super();const{target:r=new Le,resolution:s=1,generateMipmaps:i=!1,bounces:n=!0,depth:a=!1}=t;this.textureNode=e,this.target=r,this.resolution=s,this.generateMipmaps=i,this.bounces=n,this.depth=a,this.updateBeforeType=n?Is.RENDER:Is.FRAME,this.virtualCameras=new WeakMap,this.renderTargets=new Map,this.forceUpdate=!1}_updateResolution(e,t){const r=this.resolution;t.getDrawingBufferSize(ly),e.setSize(Math.round(ly.width*r),Math.round(ly.height*r))}setup(e){return this._updateResolution(dy,e.renderer),super.setup(e)}dispose(){super.dispose();for(const e of this.renderTargets.values())e.dispose()}getVirtualCamera(e){let t=this.virtualCameras.get(e);return void 0===t&&(t=e.clone(),this.virtualCameras.set(e,t)),t}getRenderTarget(e){let t=this.renderTargets.get(e);return void 0===t&&(t=new ae(0,0,{type:he}),!0===this.generateMipmaps&&(t.texture.minFilter=Fe,t.texture.generateMipmaps=!0),!0===this.depth&&(t.depthTexture=new D),this.renderTargets.set(e,t)),t}updateBefore(e){if(!1===this.bounces&&hy)return!1;hy=!0;const{scene:t,camera:r,renderer:s,material:i}=e,{target:n}=this,a=this.getVirtualCamera(r),o=this.getRenderTarget(a);s.getDrawingBufferSize(ly),this._updateResolution(o,s),ty.setFromMatrixPosition(n.matrixWorld),ry.setFromMatrixPosition(r.matrixWorld),sy.extractRotation(n.matrixWorld),ey.set(0,0,1),ey.applyMatrix4(sy),ay.subVectors(ty,ry);if(!0===ay.dot(ey)>0&&!1===this.forceUpdate)return;ay.reflect(ey).negate(),ay.add(ty),sy.extractRotation(r.matrixWorld),iy.set(0,0,-1),iy.applyMatrix4(sy),iy.add(ry),oy.subVectors(ty,iy),oy.reflect(ey).negate(),oy.add(ty),a.coordinateSystem=r.coordinateSystem,a.position.copy(ay),a.up.set(0,1,0),a.up.applyMatrix4(sy),a.up.reflect(ey),a.lookAt(oy),a.near=r.near,a.far=r.far,a.updateMatrixWorld(),a.projectionMatrix.copy(r.projectionMatrix),Jf.setFromNormalAndCoplanarPoint(ey,ty),Jf.applyMatrix4(a.matrixWorldInverse),ny.set(Jf.normal.x,Jf.normal.y,Jf.normal.z,Jf.constant);const u=a.projectionMatrix;uy.x=(Math.sign(ny.x)+u.elements[8])/u.elements[0],uy.y=(Math.sign(ny.y)+u.elements[9])/u.elements[5],uy.z=-1,uy.w=(1+u.elements[10])/u.elements[14],ny.multiplyScalar(1/ny.dot(uy));u.elements[2]=ny.x,u.elements[6]=ny.y,u.elements[10]=s.coordinateSystem===d?ny.z-0:ny.z+1-0,u.elements[14]=ny.w,this.textureNode.value=o.texture,!0===this.depth&&(this.textureNode.getDepthNode().value=o.depthTexture),i.visible=!1;const l=s.getRenderTarget(),c=s.getMRT(),h=s.autoClear;s.setMRT(null),s.setRenderTarget(o),s.autoClear=!0,s.render(t,a),s.setMRT(c),s.setRenderTarget(l),s.autoClear=h,i.visible=!0,hy=!1,this.forceUpdate=!1}}const my=new ie(-1,1,1,-1,0,1);class fy extends ue{constructor(e=!1){super();const t=!1===e?[0,-1,0,1,2,1]:[0,2,0,0,2,0];this.setAttribute("position",new Be([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new Be(t,2))}}const yy=new fy;class xy extends W{constructor(e=null){super(yy,e),this.camera=my,this.isQuadMesh=!0}async renderAsync(e){return e.renderAsync(this,my)}render(e){e.render(this,my)}}const by=new t;class Ty extends Ku{static get type(){return"RTTNode"}constructor(e,t=null,r=null,s={type:he}){const i=new ae(t,r,s);super(i.texture,Hu()),this.node=e,this.width=t,this.height=r,this.pixelRatio=1,this.renderTarget=i,this.textureNeedsUpdate=!0,this.autoUpdate=!0,this._rttNode=null,this._quadMesh=new xy(new Gh),this.updateBeforeType=Is.RENDER}get autoSize(){return null===this.width}setup(e){return this._rttNode=this.node.context(e.getSharedContext()),this._quadMesh.material.name="RTT",this._quadMesh.material.needsUpdate=!0,super.setup(e)}setSize(e,t){this.width=e,this.height=t;const r=e*this.pixelRatio,s=t*this.pixelRatio;this.renderTarget.setSize(r,s),this.textureNeedsUpdate=!0}setPixelRatio(e){this.pixelRatio=e,this.setSize(this.width,this.height)}updateBefore({renderer:e}){if(!1===this.textureNeedsUpdate&&!1===this.autoUpdate)return;if(this.textureNeedsUpdate=!1,!0===this.autoSize){this.pixelRatio=e.getPixelRatio();const t=e.getSize(by);this.setSize(t.width,t.height)}this._quadMesh.material.fragmentNode=this._rttNode;const t=e.getRenderTarget();e.setRenderTarget(this.renderTarget),this._quadMesh.render(e),e.setRenderTarget(t)}clone(){const e=new Ku(this.value,this.uvNode,this.levelNode);return e.sampler=this.sampler,e.referenceNode=this,e}}const _y=(e,...t)=>Li(new Ty(Li(e),...t)),vy=Ui((([e,t,r],s)=>{let i;s.renderer.coordinateSystem===d?(e=Xi(e.x,e.y.oneMinus()).mul(2).sub(1),i=rn(Zi(e,t),1)):i=rn(Zi(e.x,e.y.oneMinus(),t).mul(2).sub(1),1);const n=rn(r.mul(i));return n.xyz.div(n.w)})),Ny=Ui((([e,t])=>{const r=t.mul(rn(e,1)),s=r.xy.div(r.w).mul(.5).add(.5).toVar();return Xi(s.x,s.y.oneMinus())})),Sy=Ui((([e,t,r])=>{const s=ju(Qu(t)),i=Ki(e.mul(s)).toVar(),n=Qu(t,i).toVar(),a=Qu(t,i.sub(Ki(2,0))).toVar(),o=Qu(t,i.sub(Ki(1,0))).toVar(),u=Qu(t,i.add(Ki(1,0))).toVar(),l=Qu(t,i.add(Ki(2,0))).toVar(),d=Qu(t,i.add(Ki(0,2))).toVar(),c=Qu(t,i.add(Ki(0,1))).toVar(),h=Qu(t,i.sub(Ki(0,1))).toVar(),p=Qu(t,i.sub(Ki(0,2))).toVar(),g=so(aa(Hi(2).mul(o).sub(a),n)).toVar(),m=so(aa(Hi(2).mul(u).sub(l),n)).toVar(),f=so(aa(Hi(2).mul(c).sub(d),n)).toVar(),y=so(aa(Hi(2).mul(h).sub(p),n)).toVar(),x=vy(e,n,r).toVar(),b=g.lessThan(m).select(x.sub(vy(e.sub(Xi(Hi(1).div(s.x),0)),o,r)),x.negate().add(vy(e.add(Xi(Hi(1).div(s.x),0)),u,r))),T=f.lessThan(y).select(x.sub(vy(e.add(Xi(0,Hi(1).div(s.y))),c,r)),x.negate().add(vy(e.sub(Xi(0,Hi(1).div(s.y))),h,r)));return Ka(wo(b,T))}));class wy extends M{constructor(e,t,r=Float32Array){super(ArrayBuffer.isView(e)?e:new r(e*t),t),this.isStorageInstancedBufferAttribute=!0}}class Ey extends le{constructor(e,t,r=Float32Array){super(ArrayBuffer.isView(e)?e:new r(e*t),t),this.isStorageBufferAttribute=!0}}class Ay extends Hs{static get type(){return"PointUVNode"}constructor(){super("vec2"),this.isPointUVNode=!0}generate(){return"vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y )"}}const Ry=Ii(Ay),Cy=new S,My=new a;class Py extends Hs{static get type(){return"SceneNode"}constructor(e=Py.BACKGROUND_BLURRINESS,t=null){super(),this.scope=e,this.scene=t}setup(e){const t=this.scope,r=null!==this.scene?this.scene:e.scene;let s;return t===Py.BACKGROUND_BLURRINESS?s=pd("backgroundBlurriness","float",r):t===Py.BACKGROUND_INTENSITY?s=pd("backgroundIntensity","float",r):t===Py.BACKGROUND_ROTATION?s=Yn("mat4").label("backgroundRotation").setGroup(qn).onRenderUpdate((()=>{const e=r.background;return null!==e&&e.isTexture&&e.mapping!==De?(Cy.copy(r.backgroundRotation),Cy.x*=-1,Cy.y*=-1,Cy.z*=-1,My.makeRotationFromEuler(Cy)):My.identity(),My})):console.error("THREE.SceneNode: Unknown scope:",t),s}}Py.BACKGROUND_BLURRINESS="backgroundBlurriness",Py.BACKGROUND_INTENSITY="backgroundIntensity",Py.BACKGROUND_ROTATION="backgroundRotation";const Ly=Ii(Py,Py.BACKGROUND_BLURRINESS),Fy=Ii(Py,Py.BACKGROUND_INTENSITY),By=Ii(Py,Py.BACKGROUND_ROTATION);class Dy extends Ku{static get type(){return"StorageTextureNode"}constructor(e,t,r=null){super(e,t),this.storeNode=r,this.isStorageTextureNode=!0,this.access=Us.WRITE_ONLY}getInputType(){return"storageTexture"}setup(e){super.setup(e);e.getNodeProperties(this).storeNode=this.storeNode}setAccess(e){return this.access=e,this}generate(e,t){let r;return r=null!==this.storeNode?this.generateStore(e):super.generate(e,t),r}toReadWrite(){return this.setAccess(Us.READ_WRITE)}toReadOnly(){return this.setAccess(Us.READ_ONLY)}toWriteOnly(){return this.setAccess(Us.WRITE_ONLY)}generateStore(e){const t=e.getNodeProperties(this),{uvNode:r,storeNode:s}=t,i=super.generate(e,"property"),n=r.build(e,"uvec2"),a=s.build(e,"vec4"),o=e.generateTextureStore(e,i,n,a);e.addLineFlowCode(o,this)}}const Iy=Di(Dy).setParameterLength(1,3),Vy=Ui((({texture:e,uv:t})=>{const r=1e-4,s=Zi().toVar();return Gi(t.x.lessThan(r),(()=>{s.assign(Zi(1,0,0))})).ElseIf(t.y.lessThan(r),(()=>{s.assign(Zi(0,1,0))})).ElseIf(t.z.lessThan(r),(()=>{s.assign(Zi(0,0,1))})).ElseIf(t.x.greaterThan(.9999),(()=>{s.assign(Zi(-1,0,0))})).ElseIf(t.y.greaterThan(.9999),(()=>{s.assign(Zi(0,-1,0))})).ElseIf(t.z.greaterThan(.9999),(()=>{s.assign(Zi(0,0,-1))})).Else((()=>{const r=.01,i=e.sample(t.add(Zi(-.01,0,0))).r.sub(e.sample(t.add(Zi(r,0,0))).r),n=e.sample(t.add(Zi(0,-.01,0))).r.sub(e.sample(t.add(Zi(0,r,0))).r),a=e.sample(t.add(Zi(0,0,-.01))).r.sub(e.sample(t.add(Zi(0,0,r))).r);s.assign(Zi(i,n,a))})),s.normalize()}));class Uy extends Ku{static get type(){return"Texture3DNode"}constructor(e,t=null,r=null){super(e,t,r),this.isTexture3DNode=!0}getInputType(){return"texture3D"}getDefaultUV(){return Zi(.5,.5,.5)}setUpdateMatrix(){}setupUV(e,t){const r=this.value;return!e.isFlipY()||!0!==r.isRenderTargetTexture&&!0!==r.isFramebufferTexture||(t=this.sampler?t.flipY():t.setY(Wi(ju(this,this.levelNode).y).sub(t.y).sub(1))),t}generateUV(e,t){return t.build(e,"vec3")}normal(e){return Vy({texture:this,uv:e})}}const Oy=Di(Uy).setParameterLength(1,3);class ky extends hd{static get type(){return"UserDataNode"}constructor(e,t,r=null){super(e,t,r),this.userData=r}updateReference(e){return this.reference=null!==this.userData?this.userData:e.object.userData,this.reference}}const Gy=new WeakMap;class zy extends qs{static get type(){return"VelocityNode"}constructor(){super("vec2"),this.projectionMatrix=null,this.updateType=Is.OBJECT,this.updateAfterType=Is.OBJECT,this.previousModelWorldMatrix=Yn(new a),this.previousProjectionMatrix=Yn(new a).setGroup(qn),this.previousCameraViewMatrix=Yn(new a)}setProjectionMatrix(e){this.projectionMatrix=e}update({frameId:e,camera:t,object:r}){const s=Hy(r);this.previousModelWorldMatrix.value.copy(s);const i=$y(t);i.frameId!==e&&(i.frameId=e,void 0===i.previousProjectionMatrix?(i.previousProjectionMatrix=new a,i.previousCameraViewMatrix=new a,i.currentProjectionMatrix=new a,i.currentCameraViewMatrix=new a,i.previousProjectionMatrix.copy(this.projectionMatrix||t.projectionMatrix),i.previousCameraViewMatrix.copy(t.matrixWorldInverse)):(i.previousProjectionMatrix.copy(i.currentProjectionMatrix),i.previousCameraViewMatrix.copy(i.currentCameraViewMatrix)),i.currentProjectionMatrix.copy(this.projectionMatrix||t.projectionMatrix),i.currentCameraViewMatrix.copy(t.matrixWorldInverse),this.previousProjectionMatrix.value.copy(i.previousProjectionMatrix),this.previousCameraViewMatrix.value.copy(i.previousCameraViewMatrix))}updateAfter({object:e}){Hy(e).copy(e.matrixWorld)}setup(){const e=null===this.projectionMatrix?ol:Yn(this.projectionMatrix),t=this.previousCameraViewMatrix.mul(this.previousModelWorldMatrix),r=e.mul(Ml).mul(Dl),s=this.previousProjectionMatrix.mul(t).mul(Il),i=r.xy.div(r.w),n=s.xy.div(s.w);return aa(i,n)}}function $y(e){let t=Gy.get(e);return void 0===t&&(t={},Gy.set(e,t)),t}function Hy(e,t=0){const r=$y(e);let s=r[t];return void 0===s&&(r[t]=s=new a,r[t].copy(e.matrixWorld)),s}const Wy=Ii(zy),jy=Ui((([e,t])=>xo(1,e.oneMinus().div(t)).oneMinus())).setLayout({name:"blendBurn",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),qy=Ui((([e,t])=>xo(e.div(t.oneMinus()),1))).setLayout({name:"blendDodge",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),Xy=Ui((([e,t])=>e.oneMinus().mul(t.oneMinus()).oneMinus())).setLayout({name:"blendScreen",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),Ky=Ui((([e,t])=>Fo(e.mul(2).mul(t),e.oneMinus().mul(2).mul(t.oneMinus()).oneMinus(),To(.5,e)))).setLayout({name:"blendOverlay",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),Yy=Ui((([e,t])=>{const r=t.a.add(e.a.mul(t.a.oneMinus()));return rn(t.rgb.mul(t.a).add(e.rgb.mul(e.a).mul(t.a.oneMinus())).div(r),r)})).setLayout({name:"blendColor",type:"vec4",inputs:[{name:"base",type:"vec4"},{name:"blend",type:"vec4"}]}),Qy=Ui((([e])=>tx(e.rgb))),Zy=Ui((([e,t=Hi(1)])=>t.mix(tx(e.rgb),e.rgb))),Jy=Ui((([e,t=Hi(1)])=>{const r=na(e.r,e.g,e.b).div(3),s=e.r.max(e.g.max(e.b)),i=s.sub(r).mul(t).mul(-3);return Fo(e.rgb,s,i)})),ex=Ui((([e,t=Hi(1)])=>{const r=Zi(.57735,.57735,.57735),s=t.cos();return Zi(e.rgb.mul(s).add(r.cross(e.rgb).mul(t.sin()).add(r.mul(So(r,e.rgb).mul(s.oneMinus())))))})),tx=(e,t=Zi(c.getLuminanceCoefficients(new r)))=>So(e,t),rx=Ui((([e,t=Zi(1),s=Zi(0),i=Zi(1),n=Hi(1),a=Zi(c.getLuminanceCoefficients(new r,de))])=>{const o=e.rgb.dot(Zi(a)),u=bo(e.rgb.mul(t).add(s),0).toVar(),l=u.pow(i).toVar();return Gi(u.r.greaterThan(0),(()=>{u.r.assign(l.r)})),Gi(u.g.greaterThan(0),(()=>{u.g.assign(l.g)})),Gi(u.b.greaterThan(0),(()=>{u.b.assign(l.b)})),u.assign(o.add(u.sub(o).mul(n))),rn(u.rgb,e.a)}));class sx extends qs{static get type(){return"PosterizeNode"}constructor(e,t){super(),this.sourceNode=e,this.stepsNode=t}setup(){const{sourceNode:e,stepsNode:t}=this;return e.mul(t).floor().div(t)}}const ix=Di(sx).setParameterLength(2),nx=new t;class ax extends Ku{static get type(){return"PassTextureNode"}constructor(e,t){super(t),this.passNode=e,this.setUpdateMatrix(!1)}setup(e){return e.object.isQuadMesh&&this.passNode.build(e),super.setup(e)}clone(){return new this.constructor(this.passNode,this.value)}}class ox extends ax{static get type(){return"PassMultipleTextureNode"}constructor(e,t,r=!1){super(e,null),this.textureName=t,this.previousTexture=r}updateTexture(){this.value=this.previousTexture?this.passNode.getPreviousTexture(this.textureName):this.passNode.getTexture(this.textureName)}setup(e){return this.updateTexture(),super.setup(e)}clone(){return new this.constructor(this.passNode,this.textureName,this.previousTexture)}}class ux extends qs{static get type(){return"PassNode"}constructor(e,t,r,s={}){super("vec4"),this.scope=e,this.scene=t,this.camera=r,this.options=s,this._pixelRatio=1,this._width=1,this._height=1;const i=new D;i.isRenderTargetTexture=!0,i.name="depth";const n=new ae(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:he,...s});n.texture.name="output",n.depthTexture=i,this.renderTarget=n,this._textures={output:n.texture,depth:i},this._textureNodes={},this._linearDepthNodes={},this._viewZNodes={},this._previousTextures={},this._previousTextureNodes={},this._cameraNear=Yn(0),this._cameraFar=Yn(0),this._mrt=null,this._layers=null,this._resolution=1,this.isPassNode=!0,this.updateBeforeType=Is.FRAME}setResolution(e){return this._resolution=e,this}getResolution(){return this._resolution}setLayers(e){return this._layers=e,this}getLayers(){return this._layers}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}isGlobal(){return!0}getTexture(e){let t=this._textures[e];if(void 0===t){t=this.renderTarget.texture.clone(),t.name=e,this._textures[e]=t,this.renderTarget.textures.push(t)}return t}getPreviousTexture(e){let t=this._previousTextures[e];return void 0===t&&(t=this.getTexture(e).clone(),this._previousTextures[e]=t),t}toggleTexture(e){const t=this._previousTextures[e];if(void 0!==t){const r=this._textures[e],s=this.renderTarget.textures.indexOf(r);this.renderTarget.textures[s]=t,this._textures[e]=t,this._previousTextures[e]=r,this._textureNodes[e].updateTexture(),this._previousTextureNodes[e].updateTexture()}}getTextureNode(e="output"){let t=this._textureNodes[e];return void 0===t&&(t=Li(new ox(this,e)),t.updateTexture(),this._textureNodes[e]=t),t}getPreviousTextureNode(e="output"){let t=this._previousTextureNodes[e];return void 0===t&&(void 0===this._textureNodes[e]&&this.getTextureNode(e),t=Li(new ox(this,e,!0)),t.updateTexture(),this._previousTextureNodes[e]=t),t}getViewZNode(e="depth"){let t=this._viewZNodes[e];if(void 0===t){const r=this._cameraNear,s=this._cameraFar;this._viewZNodes[e]=t=Ch(this.getTextureNode(e),r,s)}return t}getLinearDepthNode(e="depth"){let t=this._linearDepthNodes[e];if(void 0===t){const r=this._cameraNear,s=this._cameraFar,i=this.getViewZNode(e);this._linearDepthNodes[e]=t=Ah(i,r,s)}return t}setup({renderer:e}){return this.renderTarget.samples=void 0===this.options.samples?e.samples:this.options.samples,!0===e.backend.isWebGLBackend&&(this.renderTarget.samples=0),this.renderTarget.texture.type=e.getColorBufferType(),this.scope===ux.COLOR?this.getTextureNode():this.getLinearDepthNode()}updateBefore(e){const{renderer:t}=e,{scene:r}=this;let s,i;const n=t.getOutputRenderTarget();n&&!0===n.isXRRenderTarget?(i=1,s=t.xr.getCamera(),t.xr.updateCamera(s),nx.set(n.width,n.height)):(s=this.camera,i=t.getPixelRatio(),t.getSize(nx)),this._pixelRatio=i,this.setSize(nx.width,nx.height);const a=t.getRenderTarget(),o=t.getMRT(),u=s.layers.mask;this._cameraNear.value=s.near,this._cameraFar.value=s.far,null!==this._layers&&(s.layers.mask=this._layers.mask);for(const e in this._previousTextures)this.toggleTexture(e);t.setRenderTarget(this.renderTarget),t.setMRT(this._mrt),t.render(r,s),t.setRenderTarget(a),t.setMRT(o),s.layers.mask=u}setSize(e,t){this._width=e,this._height=t;const r=this._width*this._pixelRatio*this._resolution,s=this._height*this._pixelRatio*this._resolution;this.renderTarget.setSize(r,s)}setPixelRatio(e){this._pixelRatio=e,this.setSize(this._width,this._height)}dispose(){this.renderTarget.dispose()}}ux.COLOR="color",ux.DEPTH="depth";class lx extends ux{static get type(){return"ToonOutlinePassNode"}constructor(e,t,r,s,i){super(ux.COLOR,e,t),this.colorNode=r,this.thicknessNode=s,this.alphaNode=i,this._materialCache=new WeakMap}updateBefore(e){const{renderer:t}=e,r=t.getRenderObjectFunction();t.setRenderObjectFunction(((e,r,s,i,n,a,o,u)=>{if((n.isMeshToonMaterial||n.isMeshToonNodeMaterial)&&!1===n.wireframe){const l=this._getOutlineMaterial(n);t.renderObject(e,r,s,i,l,a,o,u)}t.renderObject(e,r,s,i,n,a,o,u)})),super.updateBefore(e),t.setRenderObjectFunction(r)}_createMaterial(){const e=new Gh;e.isMeshToonOutlineMaterial=!0,e.name="Toon_Outline",e.side=N;const t=Wl.negate(),r=ol.mul(Ml),s=Hi(1),i=r.mul(rn(Dl,1)),n=r.mul(rn(Dl.add(t),1)),a=Ka(i.sub(n));return e.vertexNode=i.add(a.mul(this.thicknessNode).mul(i.w).mul(s)),e.colorNode=rn(this.colorNode,this.alphaNode),e}_getOutlineMaterial(e){let t=this._materialCache.get(e);return void 0===t&&(t=this._createMaterial(),this._materialCache.set(e,t)),t}}const dx=Ui((([e,t])=>e.mul(t).clamp())).setLayout({name:"linearToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),cx=Ui((([e,t])=>(e=e.mul(t)).div(e.add(1)).clamp())).setLayout({name:"reinhardToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),hx=Ui((([e,t])=>{const r=(e=(e=e.mul(t)).sub(.004).max(0)).mul(e.mul(6.2).add(.5)),s=e.mul(e.mul(6.2).add(1.7)).add(.06);return r.div(s).pow(2.2)})).setLayout({name:"cineonToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),px=Ui((([e])=>{const t=e.mul(e.add(.0245786)).sub(90537e-9),r=e.mul(e.add(.432951).mul(.983729)).add(.238081);return t.div(r)})),gx=Ui((([e,t])=>{const r=un(.59719,.35458,.04823,.076,.90834,.01566,.0284,.13383,.83777),s=un(1.60475,-.53108,-.07367,-.10208,1.10813,-.00605,-.00327,-.07276,1.07602);return e=e.mul(t).div(.6),e=r.mul(e),e=px(e),(e=s.mul(e)).clamp()})).setLayout({name:"acesFilmicToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),mx=un(Zi(1.6605,-.1246,-.0182),Zi(-.5876,1.1329,-.1006),Zi(-.0728,-.0083,1.1187)),fx=un(Zi(.6274,.0691,.0164),Zi(.3293,.9195,.088),Zi(.0433,.0113,.8956)),yx=Ui((([e])=>{const t=Zi(e).toVar(),r=Zi(t.mul(t)).toVar(),s=Zi(r.mul(r)).toVar();return Hi(15.5).mul(s.mul(r)).sub(oa(40.14,s.mul(t))).add(oa(31.96,s).sub(oa(6.868,r.mul(t))).add(oa(.4298,r).add(oa(.1191,t).sub(.00232))))})),xx=Ui((([e,t])=>{const r=Zi(e).toVar(),s=un(Zi(.856627153315983,.137318972929847,.11189821299995),Zi(.0951212405381588,.761241990602591,.0767994186031903),Zi(.0482516061458583,.101439036467562,.811302368396859)),i=un(Zi(1.1271005818144368,-.1413297634984383,-.14132976349843826),Zi(-.11060664309660323,1.157823702216272,-.11060664309660294),Zi(-.016493938717834573,-.016493938717834257,1.2519364065950405)),n=Hi(-12.47393),a=Hi(4.026069);return r.mulAssign(t),r.assign(fx.mul(r)),r.assign(s.mul(r)),r.assign(bo(r,1e-10)),r.assign(Ha(r)),r.assign(r.sub(n).div(a.sub(n))),r.assign(Bo(r,0,1)),r.assign(yx(r)),r.assign(i.mul(r)),r.assign(Eo(bo(Zi(0),r),Zi(2.2))),r.assign(mx.mul(r)),r.assign(Bo(r,0,1)),r})).setLayout({name:"agxToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),bx=Ui((([e,t])=>{const r=Hi(.76),s=Hi(.15);e=e.mul(t);const i=xo(e.r,xo(e.g,e.b)),n=jo(i.lessThan(.08),i.sub(oa(6.25,i.mul(i))),.04);e.subAssign(n);const a=bo(e.r,bo(e.g,e.b));Gi(a.lessThan(r),(()=>e));const o=aa(1,r),u=aa(1,o.mul(o).div(a.add(o.sub(r))));e.mulAssign(u.div(a));const l=aa(1,ua(1,s.mul(a.sub(u)).add(1)));return Fo(e,Zi(u),l)})).setLayout({name:"neutralToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]});class Tx extends Hs{static get type(){return"CodeNode"}constructor(e="",t=[],r=""){super("code"),this.isCodeNode=!0,this.code=e,this.includes=t,this.language=r}isGlobal(){return!0}setIncludes(e){return this.includes=e,this}getIncludes(){return this.includes}generate(e){const t=this.getIncludes(e);for(const r of t)r.build(e);const r=e.getCodeFromNode(this,this.getNodeType(e));return r.code=this.code,r.code}serialize(e){super.serialize(e),e.code=this.code,e.language=this.language}deserialize(e){super.deserialize(e),this.code=e.code,this.language=e.language}}const _x=Di(Tx).setParameterLength(1,3);class vx extends Tx{static get type(){return"FunctionNode"}constructor(e="",t=[],r=""){super(e,t,r)}getNodeType(e){return this.getNodeFunction(e).type}getInputs(e){return this.getNodeFunction(e).inputs}getNodeFunction(e){const t=e.getDataFromNode(this);let r=t.nodeFunction;return void 0===r&&(r=e.parser.parseFunction(this.code),t.nodeFunction=r),r}generate(e,t){super.generate(e);const r=this.getNodeFunction(e),s=r.name,i=r.type,n=e.getCodeFromNode(this,i);""!==s&&(n.name=s);const a=e.getPropertyName(n),o=this.getNodeFunction(e).getCode(a);return n.code=o+"\n","property"===t?a:e.format(`${a}()`,i,t)}}const Nx=(e,t=[],r="")=>{for(let e=0;e<t.length;e++){const r=t[e];"function"==typeof r&&(t[e]=r.functionNode)}const s=Li(new vx(e,t,r)),i=(...e)=>s.call(...e);return i.functionNode=s,i};class Sx extends Hs{static get type(){return"ScriptableValueNode"}constructor(e=null){super(),this._value=e,this._cache=null,this.inputType=null,this.outputType=null,this.events=new o,this.isScriptableValueNode=!0}get isScriptableOutputNode(){return null!==this.outputType}set value(e){this._value!==e&&(this._cache&&"URL"===this.inputType&&this.value.value instanceof ArrayBuffer&&(URL.revokeObjectURL(this._cache),this._cache=null),this._value=e,this.events.dispatchEvent({type:"change"}),this.refresh())}get value(){return this._value}refresh(){this.events.dispatchEvent({type:"refresh"})}getValue(){const e=this.value;if(e&&null===this._cache&&"URL"===this.inputType&&e.value instanceof ArrayBuffer)this._cache=URL.createObjectURL(new Blob([e.value]));else if(e&&null!==e.value&&void 0!==e.value&&(("URL"===this.inputType||"String"===this.inputType)&&"string"==typeof e.value||"Number"===this.inputType&&"number"==typeof e.value||"Vector2"===this.inputType&&e.value.isVector2||"Vector3"===this.inputType&&e.value.isVector3||"Vector4"===this.inputType&&e.value.isVector4||"Color"===this.inputType&&e.value.isColor||"Matrix3"===this.inputType&&e.value.isMatrix3||"Matrix4"===this.inputType&&e.value.isMatrix4))return e.value;return this._cache||e}getNodeType(e){return this.value&&this.value.isNode?this.value.getNodeType(e):"float"}setup(){return this.value&&this.value.isNode?this.value:Hi()}serialize(e){super.serialize(e),null!==this.value?"ArrayBuffer"===this.inputType?e.value=Ls(this.value):e.value=this.value?this.value.toJSON(e.meta).uuid:null:e.value=null,e.inputType=this.inputType,e.outputType=this.outputType}deserialize(e){super.deserialize(e);let t=null;null!==e.value&&(t="ArrayBuffer"===e.inputType?Fs(e.value):"Texture"===e.inputType?e.meta.textures[e.value]:e.meta.nodes[e.value]||null),this.value=t,this.inputType=e.inputType,this.outputType=e.outputType}}const wx=Di(Sx).setParameterLength(1);class Ex extends Map{get(e,t=null,...r){if(this.has(e))return super.get(e);if(null!==t){const s=t(...r);return this.set(e,s),s}}}class Ax{constructor(e){this.scriptableNode=e}get parameters(){return this.scriptableNode.parameters}get layout(){return this.scriptableNode.getLayout()}getInputLayout(e){return this.scriptableNode.getInputLayout(e)}get(e){const t=this.parameters[e];return t?t.getValue():null}}const Rx=new Ex;class Cx extends Hs{static get type(){return"ScriptableNode"}constructor(e=null,t={}){super(),this.codeNode=e,this.parameters=t,this._local=new Ex,this._output=wx(null),this._outputs={},this._source=this.source,this._method=null,this._object=null,this._value=null,this._needsOutputUpdate=!0,this.onRefresh=this.onRefresh.bind(this),this.isScriptableNode=!0}get source(){return this.codeNode?this.codeNode.code:""}setLocal(e,t){return this._local.set(e,t)}getLocal(e){return this._local.get(e)}onRefresh(){this._refresh()}getInputLayout(e){for(const t of this.getLayout())if(t.inputType&&(t.id===e||t.name===e))return t}getOutputLayout(e){for(const t of this.getLayout())if(t.outputType&&(t.id===e||t.name===e))return t}setOutput(e,t){const r=this._outputs;return void 0===r[e]?r[e]=wx(t):r[e].value=t,this}getOutput(e){return this._outputs[e]}getParameter(e){return this.parameters[e]}setParameter(e,t){const r=this.parameters;return t&&t.isScriptableNode?(this.deleteParameter(e),r[e]=t,r[e].getDefaultOutput().events.addEventListener("refresh",this.onRefresh)):t&&t.isScriptableValueNode?(this.deleteParameter(e),r[e]=t,r[e].events.addEventListener("refresh",this.onRefresh)):void 0===r[e]?(r[e]=wx(t),r[e].events.addEventListener("refresh",this.onRefresh)):r[e].value=t,this}getValue(){return this.getDefaultOutput().getValue()}deleteParameter(e){let t=this.parameters[e];return t&&(t.isScriptableNode&&(t=t.getDefaultOutput()),t.events.removeEventListener("refresh",this.onRefresh)),this}clearParameters(){for(const e of Object.keys(this.parameters))this.deleteParameter(e);return this.needsUpdate=!0,this}call(e,...t){const r=this.getObject()[e];if("function"==typeof r)return r(...t)}async callAsync(e,...t){const r=this.getObject()[e];if("function"==typeof r)return"AsyncFunction"===r.constructor.name?await r(...t):r(...t)}getNodeType(e){return this.getDefaultOutputNode().getNodeType(e)}refresh(e=null){null!==e?this.getOutput(e).refresh():this._refresh()}getObject(){if(this.needsUpdate&&this.dispose(),null!==this._object)return this._object;const e=new Ax(this),t=Rx.get("THREE"),r=Rx.get("TSL"),s=this.getMethod(),i=[e,this._local,Rx,()=>this.refresh(),(e,t)=>this.setOutput(e,t),t,r];this._object=s(...i);const n=this._object.layout;if(n&&(!1===n.cache&&this._local.clear(),this._output.outputType=n.outputType||null,Array.isArray(n.elements)))for(const e of n.elements){const t=e.id||e.name;e.inputType&&(void 0===this.getParameter(t)&&this.setParameter(t,null),this.getParameter(t).inputType=e.inputType),e.outputType&&(void 0===this.getOutput(t)&&this.setOutput(t,null),this.getOutput(t).outputType=e.outputType)}return this._object}deserialize(e){super.deserialize(e);for(const e in this.parameters){let t=this.parameters[e];t.isScriptableNode&&(t=t.getDefaultOutput()),t.events.addEventListener("refresh",this.onRefresh)}}getLayout(){return this.getObject().layout}getDefaultOutputNode(){const e=this.getDefaultOutput().value;return e&&e.isNode?e:Hi()}getDefaultOutput(){return this._exec()._output}getMethod(){if(this.needsUpdate&&this.dispose(),null!==this._method)return this._method;const e=["layout","init","main","dispose"].join(", "),t="\nreturn { ...output, "+e+" };",r="var "+e+"; var output = {};\n"+this.codeNode.code+t;return this._method=new Function(...["parameters","local","global","refresh","setOutput","THREE","TSL"],r),this._method}dispose(){null!==this._method&&(this._object&&"function"==typeof this._object.dispose&&this._object.dispose(),this._method=null,this._object=null,this._source=null,this._value=null,this._needsOutputUpdate=!0,this._output.value=null,this._outputs={})}setup(){return this.getDefaultOutputNode()}getCacheKey(e){const t=[bs(this.source),this.getDefaultOutputNode().getCacheKey(e)];for(const r in this.parameters)t.push(this.parameters[r].getCacheKey(e));return Ts(t)}set needsUpdate(e){!0===e&&this.dispose()}get needsUpdate(){return this.source!==this._source}_exec(){return null===this.codeNode||(!0===this._needsOutputUpdate&&(this._value=this.call("main"),this._needsOutputUpdate=!1),this._output.value=this._value),this}_refresh(){this.needsUpdate=!0,this._exec(),this._output.refresh()}}const Mx=Di(Cx).setParameterLength(1,2);function Px(e){let t;const r=e.context.getViewZ;return void 0!==r&&(t=r(this)),(t||Ol.z).negate()}const Lx=Ui((([e,t],r)=>{const s=Px(r);return Vo(e,t,s)})),Fx=Ui((([e],t)=>{const r=Px(t);return e.mul(e,r,r).negate().exp().oneMinus()})),Bx=Ui((([e,t])=>rn(t.toFloat().mix(Fn.rgb,e.toVec3()),Fn.a)));let Dx=null,Ix=null;class Vx extends Hs{static get type(){return"RangeNode"}constructor(e=Hi(),t=Hi()){super(),this.minNode=e,this.maxNode=t}getVectorLength(e){const t=e.getTypeLength(Cs(this.minNode.value)),r=e.getTypeLength(Cs(this.maxNode.value));return t>r?t:r}getNodeType(e){return e.object.count>1?e.getTypeFromLength(this.getVectorLength(e)):"float"}setup(e){const t=e.object;let r=null;if(t.count>1){const i=this.minNode.value,n=this.maxNode.value,a=e.getTypeLength(Cs(i)),o=e.getTypeLength(Cs(n));Dx=Dx||new s,Ix=Ix||new s,Dx.setScalar(0),Ix.setScalar(0),1===a?Dx.setScalar(i):i.isColor?Dx.set(i.r,i.g,i.b,1):Dx.set(i.x,i.y,i.z||0,i.w||0),1===o?Ix.setScalar(n):n.isColor?Ix.set(n.r,n.g,n.b,1):Ix.set(n.x,n.y,n.z||0,n.w||0);const l=4,d=l*t.count,c=new Float32Array(d);for(let e=0;e<d;e++){const t=e%l,r=Dx.getComponent(t),s=Ix.getComponent(t);c[e]=u.lerp(r,s,Math.random())}const h=this.getNodeType(e);if(t.count<=4096)r=Ju(c,"vec4",t.count).element(Cc).convert(h);else{const t=new M(c,4);e.geometry.setAttribute("__range"+this.id,t),r=Su(t).convert(h)}}else r=Hi(0);return r}}const Ux=Di(Vx).setParameterLength(2);class Ox extends Hs{static get type(){return"ComputeBuiltinNode"}constructor(e,t){super(t),this._builtinName=e}getHash(e){return this.getBuiltinName(e)}getNodeType(){return this.nodeType}setBuiltinName(e){return this._builtinName=e,this}getBuiltinName(){return this._builtinName}hasBuiltin(e){return e.hasBuiltin(this._builtinName)}generate(e,t){const r=this.getBuiltinName(e),s=this.getNodeType(e);return"compute"===e.shaderStage?e.format(r,s,t):(console.warn(`ComputeBuiltinNode: Compute built-in value ${r} can not be accessed in the ${e.shaderStage} stage`),e.generateConst(s))}serialize(e){super.serialize(e),e.global=this.global,e._builtinName=this._builtinName}deserialize(e){super.deserialize(e),this.global=e.global,this._builtinName=e._builtinName}}const kx=(e,t)=>Li(new Ox(e,t)),Gx=kx("numWorkgroups","uvec3"),zx=kx("workgroupId","uvec3"),$x=kx("globalId","uvec3"),Hx=kx("localId","uvec3"),Wx=kx("subgroupSize","uint");const jx=Di(class extends Hs{constructor(e){super(),this.scope=e}generate(e){const{scope:t}=this,{renderer:r}=e;!0===r.backend.isWebGLBackend?e.addFlowCode(`\t// ${t}Barrier \n`):e.addLineFlowCode(`${t}Barrier()`,this)}});class qx extends Ws{constructor(e,t){super(e,t),this.isWorkgroupInfoElementNode=!0}generate(e,t){let r;const s=e.context.assign;if(r=super.generate(e),!0!==s){const s=this.getNodeType(e);r=e.format(r,s,t)}return r}}class Xx extends Hs{constructor(e,t,r=0){super(t),this.bufferType=t,this.bufferCount=r,this.isWorkgroupInfoNode=!0,this.elementType=t,this.scope=e}label(e){return this.name=e,this}setScope(e){return this.scope=e,this}getElementType(){return this.elementType}getInputType(){return`${this.scope}Array`}element(e){return Li(new qx(this,e))}generate(e){return e.getScopedArray(this.name||`${this.scope}Array_${this.id}`,this.scope.toLowerCase(),this.bufferType,this.bufferCount)}}class Kx extends Hs{static get type(){return"AtomicFunctionNode"}constructor(e,t,r){super("uint"),this.method=e,this.pointerNode=t,this.valueNode=r,this.parents=!0}getInputType(e){return this.pointerNode.getNodeType(e)}getNodeType(e){return this.getInputType(e)}generate(e){const t=e.getNodeProperties(this),r=t.parents,s=this.method,i=this.getNodeType(e),n=this.getInputType(e),a=this.pointerNode,o=this.valueNode,u=[];u.push(`&${a.build(e,n)}`),null!==o&&u.push(o.build(e,n));const l=`${e.getMethod(s,i)}( ${u.join(", ")} )`;if(!(1===r.length&&!0===r[0].isStackNode))return void 0===t.constNode&&(t.constNode=Iu(l,i).toConst()),t.constNode.build(e);e.addLineFlowCode(l,this)}}Kx.ATOMIC_LOAD="atomicLoad",Kx.ATOMIC_STORE="atomicStore",Kx.ATOMIC_ADD="atomicAdd",Kx.ATOMIC_SUB="atomicSub",Kx.ATOMIC_MAX="atomicMax",Kx.ATOMIC_MIN="atomicMin",Kx.ATOMIC_AND="atomicAnd",Kx.ATOMIC_OR="atomicOr",Kx.ATOMIC_XOR="atomicXor";const Yx=Di(Kx),Qx=(e,t,r)=>Yx(e,t,r).toStack();let Zx;function Jx(e){Zx=Zx||new WeakMap;let t=Zx.get(e);return void 0===t&&Zx.set(e,t={}),t}function eb(e){const t=Jx(e);return t.shadowMatrix||(t.shadowMatrix=Yn("mat4").setGroup(qn).onRenderUpdate((()=>(!0!==e.castShadow&&e.shadow.updateMatrices(e),e.shadow.matrix))))}function tb(e,t=Vl){const r=eb(e).mul(t);return r.xyz.div(r.w)}function rb(e){const t=Jx(e);return t.position||(t.position=Yn(new r).setGroup(qn).onRenderUpdate(((t,r)=>r.value.setFromMatrixPosition(e.matrixWorld))))}function sb(e){const t=Jx(e);return t.targetPosition||(t.targetPosition=Yn(new r).setGroup(qn).onRenderUpdate(((t,r)=>r.value.setFromMatrixPosition(e.target.matrixWorld))))}function ib(e){const t=Jx(e);return t.viewPosition||(t.viewPosition=Yn(new r).setGroup(qn).onRenderUpdate((({camera:t},s)=>{s.value=s.value||new r,s.value.setFromMatrixPosition(e.matrixWorld),s.value.applyMatrix4(t.matrixWorldInverse)})))}const nb=e=>ll.transformDirection(rb(e).sub(sb(e))),ab=(e,t)=>{for(const r of t)if(r.isAnalyticLightNode&&r.light.id===e)return r;return null},ob=new WeakMap;class ub extends Hs{static get type(){return"LightsNode"}constructor(){super("vec3"),this.totalDiffuseNode=Zi().toVar(),this.totalSpecularNode=Zi().toVar(),this.outgoingLightNode=Zi().toVar(),this._lights=[],this._lightNodes=null,this._lightNodesHash=null,this.global=!0}customCacheKey(){const e=[],t=this._lights;for(let r=0;r<t.length;r++){const s=t[r];if(e.push(s.id),!0===s.isSpotLight){const t=null!==s.map?s.map.id:-1;e.push(t)}}return Ts(e)}getHash(e){if(null===this._lightNodesHash){null===this._lightNodes&&this.setupLightsNode(e);const t=[];for(const e of this._lightNodes)t.push(e.getSelf().getHash());this._lightNodesHash="lights-"+t.join(",")}return this._lightNodesHash}analyze(e){const t=e.getDataFromNode(this);for(const r of t.nodes)r.build(e)}setupLightsNode(e){const t=[],r=this._lightNodes,s=(e=>e.sort(((e,t)=>e.id-t.id)))(this._lights),i=e.renderer.library;for(const e of s)if(e.isNode)t.push(Li(e));else{let s=null;if(null!==r&&(s=ab(e.id,r)),null===s){const r=i.getLightNodeClass(e.constructor);if(null===r){console.warn(`LightsNode.setupNodeLights: Light node not found for ${e.constructor.name}`);continue}let s=null;ob.has(e)?s=ob.get(e):(s=Li(new r(e)),ob.set(e,s)),t.push(s)}}this._lightNodes=t}setupDirectLight(e,t,r){const{lightingModel:s,reflectedLight:i}=e.context;s.direct({...r,lightNode:t,reflectedLight:i},e)}setupDirectRectAreaLight(e,t,r){const{lightingModel:s,reflectedLight:i}=e.context;s.directRectArea({...r,lightNode:t,reflectedLight:i},e)}setupLights(e,t){for(const r of t)r.build(e)}getLightNodes(e){return null===this._lightNodes&&this.setupLightsNode(e),this._lightNodes}setup(e){const t=e.lightsNode;e.lightsNode=this;let r=this.outgoingLightNode;const s=e.context,i=s.lightingModel,n=e.getDataFromNode(this);if(i){const{totalDiffuseNode:t,totalSpecularNode:a}=this;s.outgoingLight=r;const o=e.addStack();n.nodes=o.nodes,i.start(e);const{backdrop:u,backdropAlpha:l}=s,{directDiffuse:d,directSpecular:c,indirectDiffuse:h,indirectSpecular:p}=s.reflectedLight;let g=d.add(h);null!==u&&(g=Zi(null!==l?l.mix(g,u):u),s.material.transparent=!0),t.assign(g),a.assign(c.add(p)),r.assign(t.add(a)),i.finish(e),r=r.bypass(e.removeStack())}else n.nodes=[];return e.lightsNode=t,r}setLights(e){return this._lights=e,this._lightNodes=null,this._lightNodesHash=null,this}getLights(){return this._lights}get hasLights(){return this._lights.length>0}}class lb extends Hs{static get type(){return"ShadowBaseNode"}constructor(e){super(),this.light=e,this.updateBeforeType=Is.RENDER,this.isShadowBaseNode=!0}setupShadowPosition({context:e,material:t}){db.assign(t.receivedShadowPositionNode||e.shadowPositionWorld||Vl)}dispose(){this.updateBeforeType=Is.NONE}}const db=pn("vec3","shadowPositionWorld");function cb(t,r={}){return r.toneMapping=t.toneMapping,r.toneMappingExposure=t.toneMappingExposure,r.outputColorSpace=t.outputColorSpace,r.renderTarget=t.getRenderTarget(),r.activeCubeFace=t.getActiveCubeFace(),r.activeMipmapLevel=t.getActiveMipmapLevel(),r.renderObjectFunction=t.getRenderObjectFunction(),r.pixelRatio=t.getPixelRatio(),r.mrt=t.getMRT(),r.clearColor=t.getClearColor(r.clearColor||new e),r.clearAlpha=t.getClearAlpha(),r.autoClear=t.autoClear,r.scissorTest=t.getScissorTest(),r}function hb(e,t){return t=cb(e,t),e.setMRT(null),e.setRenderObjectFunction(null),e.setClearColor(0,1),e.autoClear=!0,t}function pb(e,t){e.toneMapping=t.toneMapping,e.toneMappingExposure=t.toneMappingExposure,e.outputColorSpace=t.outputColorSpace,e.setRenderTarget(t.renderTarget,t.activeCubeFace,t.activeMipmapLevel),e.setRenderObjectFunction(t.renderObjectFunction),e.setPixelRatio(t.pixelRatio),e.setMRT(t.mrt),e.setClearColor(t.clearColor,t.clearAlpha),e.autoClear=t.autoClear,e.setScissorTest(t.scissorTest)}function gb(e,t={}){return t.background=e.background,t.backgroundNode=e.backgroundNode,t.overrideMaterial=e.overrideMaterial,t}function mb(e,t){return t=gb(e,t),e.background=null,e.backgroundNode=null,e.overrideMaterial=null,t}function fb(e,t){e.background=t.background,e.backgroundNode=t.backgroundNode,e.overrideMaterial=t.overrideMaterial}function yb(e,t,r){return r=mb(t,r=hb(e,r))}function xb(e,t,r){pb(e,r),fb(t,r)}var bb=Object.freeze({__proto__:null,resetRendererAndSceneState:yb,resetRendererState:hb,resetSceneState:mb,restoreRendererAndSceneState:xb,restoreRendererState:pb,restoreSceneState:fb,saveRendererAndSceneState:function(e,t,r={}){return r=gb(t,r=cb(e,r))},saveRendererState:cb,saveSceneState:gb});const Tb=new WeakMap,_b=Ui((({depthTexture:e,shadowCoord:t,depthLayer:r})=>{let s=Yu(e,t.xy).label("t_basic");return e.isDepthArrayTexture&&(s=s.depth(r)),s.compare(t.z)})),vb=Ui((({depthTexture:e,shadowCoord:t,shadow:r,depthLayer:s})=>{const i=(t,r)=>{let i=Yu(e,t);return e.isDepthArrayTexture&&(i=i.depth(s)),i.compare(r)},n=pd("mapSize","vec2",r).setGroup(qn),a=pd("radius","float",r).setGroup(qn),o=Xi(1).div(n),u=o.x.negate().mul(a),l=o.y.negate().mul(a),d=o.x.mul(a),c=o.y.mul(a),h=u.div(2),p=l.div(2),g=d.div(2),m=c.div(2);return na(i(t.xy.add(Xi(u,l)),t.z),i(t.xy.add(Xi(0,l)),t.z),i(t.xy.add(Xi(d,l)),t.z),i(t.xy.add(Xi(h,p)),t.z),i(t.xy.add(Xi(0,p)),t.z),i(t.xy.add(Xi(g,p)),t.z),i(t.xy.add(Xi(u,0)),t.z),i(t.xy.add(Xi(h,0)),t.z),i(t.xy,t.z),i(t.xy.add(Xi(g,0)),t.z),i(t.xy.add(Xi(d,0)),t.z),i(t.xy.add(Xi(h,m)),t.z),i(t.xy.add(Xi(0,m)),t.z),i(t.xy.add(Xi(g,m)),t.z),i(t.xy.add(Xi(u,c)),t.z),i(t.xy.add(Xi(0,c)),t.z),i(t.xy.add(Xi(d,c)),t.z)).mul(1/17)})),Nb=Ui((({depthTexture:e,shadowCoord:t,shadow:r,depthLayer:s})=>{const i=(t,r)=>{let i=Yu(e,t);return e.isDepthArrayTexture&&(i=i.depth(s)),i.compare(r)},n=pd("mapSize","vec2",r).setGroup(qn),a=Xi(1).div(n),o=a.x,u=a.y,l=t.xy,d=Ya(l.mul(n).add(.5));return l.subAssign(d.mul(a)),na(i(l,t.z),i(l.add(Xi(o,0)),t.z),i(l.add(Xi(0,u)),t.z),i(l.add(a),t.z),Fo(i(l.add(Xi(o.negate(),0)),t.z),i(l.add(Xi(o.mul(2),0)),t.z),d.x),Fo(i(l.add(Xi(o.negate(),u)),t.z),i(l.add(Xi(o.mul(2),u)),t.z),d.x),Fo(i(l.add(Xi(0,u.negate())),t.z),i(l.add(Xi(0,u.mul(2))),t.z),d.y),Fo(i(l.add(Xi(o,u.negate())),t.z),i(l.add(Xi(o,u.mul(2))),t.z),d.y),Fo(Fo(i(l.add(Xi(o.negate(),u.negate())),t.z),i(l.add(Xi(o.mul(2),u.negate())),t.z),d.x),Fo(i(l.add(Xi(o.negate(),u.mul(2))),t.z),i(l.add(Xi(o.mul(2),u.mul(2))),t.z),d.x),d.y)).mul(1/9)})),Sb=Ui((({depthTexture:e,shadowCoord:t,depthLayer:r})=>{const s=Hi(1).toVar();let i=Yu(e).sample(t.xy);(e.isDepthArrayTexture||e.isDataArrayTexture)&&(i=i.depth(r)),i=i.rg;const n=To(t.z,i.x);return Gi(n.notEqual(Hi(1)),(()=>{const e=t.z.sub(i.x),r=bo(0,i.y.mul(i.y));let a=r.div(r.add(e.mul(e)));a=Bo(aa(a,.3).div(.95-.3)),s.assign(Bo(bo(n,a)))})),s})),wb=Ui((([e,t,r])=>{let s=Vl.sub(e).length();return s=s.sub(t).div(r.sub(t)),s=s.saturate(),s})),Eb=e=>{let t=Tb.get(e);if(void 0===t){const r=e.isPointLight?(e=>{const t=e.shadow.camera,r=pd("near","float",t).setGroup(qn),s=pd("far","float",t).setGroup(qn),i=yl(e);return wb(i,r,s)})(e):null;t=new Gh,t.colorNode=rn(0,0,0,1),t.depthNode=r,t.isShadowPassMaterial=!0,t.name="ShadowMaterial",t.fog=!1,Tb.set(e,t)}return t},Ab=new Um,Rb=[],Cb=(e,t,r,s)=>{Rb[0]=e,Rb[1]=t;let i=Ab.get(Rb);return void 0!==i&&i.shadowType===r&&i.useVelocity===s||(i=(i,n,a,o,u,l,...d)=>{(!0===i.castShadow||i.receiveShadow&&r===Ie)&&(s&&(Ps(i).useVelocity=!0),i.onBeforeShadow(e,i,a,t.camera,o,n.overrideMaterial,l),e.renderObject(i,n,a,o,u,l,...d),i.onAfterShadow(e,i,a,t.camera,o,n.overrideMaterial,l))},i.shadowType=r,i.useVelocity=s,Ab.set(Rb,i)),Rb[0]=null,Rb[1]=null,i},Mb=Ui((({samples:e,radius:t,size:r,shadowPass:s,depthLayer:i})=>{const n=Hi(0).toVar("meanVertical"),a=Hi(0).toVar("squareMeanVertical"),o=e.lessThanEqual(Hi(1)).select(Hi(0),Hi(2).div(e.sub(1))),u=e.lessThanEqual(Hi(1)).select(Hi(0),Hi(-1));Xc({start:Wi(0),end:Wi(e),type:"int",condition:"<"},(({i:e})=>{const l=u.add(Hi(e).mul(o));let d=s.sample(na(ch.xy,Xi(0,l).mul(t)).div(r));(s.value.isDepthArrayTexture||s.value.isDataArrayTexture)&&(d=d.depth(i)),d=d.x,n.addAssign(d),a.addAssign(d.mul(d))})),n.divAssign(e),a.divAssign(e);const l=Wa(a.sub(n.mul(n)));return Xi(n,l)})),Pb=Ui((({samples:e,radius:t,size:r,shadowPass:s,depthLayer:i})=>{const n=Hi(0).toVar("meanHorizontal"),a=Hi(0).toVar("squareMeanHorizontal"),o=e.lessThanEqual(Hi(1)).select(Hi(0),Hi(2).div(e.sub(1))),u=e.lessThanEqual(Hi(1)).select(Hi(0),Hi(-1));Xc({start:Wi(0),end:Wi(e),type:"int",condition:"<"},(({i:e})=>{const l=u.add(Hi(e).mul(o));let d=s.sample(na(ch.xy,Xi(l,0).mul(t)).div(r));(s.value.isDepthArrayTexture||s.value.isDataArrayTexture)&&(d=d.depth(i)),n.addAssign(d.x),a.addAssign(na(d.y.mul(d.y),d.x.mul(d.x)))})),n.divAssign(e),a.divAssign(e);const l=Wa(a.sub(n.mul(n)));return Xi(n,l)})),Lb=[_b,vb,Nb,Sb];let Fb;const Bb=new xy;class Db extends lb{static get type(){return"ShadowNode"}constructor(e,t=null){super(e),this.shadow=t||e.shadow,this.shadowMap=null,this.vsmShadowMapVertical=null,this.vsmShadowMapHorizontal=null,this.vsmMaterialVertical=null,this.vsmMaterialHorizontal=null,this._node=null,this._cameraFrameId=new WeakMap,this.isShadowNode=!0,this.depthLayer=0}setupShadowFilter(e,{filterFn:t,depthTexture:r,shadowCoord:s,shadow:i,depthLayer:n}){const a=s.x.greaterThanEqual(0).and(s.x.lessThanEqual(1)).and(s.y.greaterThanEqual(0)).and(s.y.lessThanEqual(1)).and(s.z.lessThanEqual(1)),o=t({depthTexture:r,shadowCoord:s,shadow:i,depthLayer:n});return a.select(o,Hi(1))}setupShadowCoord(e,t){const{shadow:r}=this,{renderer:s}=e,i=pd("bias","float",r).setGroup(qn);let n,a=t;if(r.camera.isOrthographicCamera||!0!==s.logarithmicDepthBuffer)a=a.xyz.div(a.w),n=a.z,s.coordinateSystem===d&&(n=n.mul(2).sub(1));else{const e=a.w;a=a.xy.div(e);const t=pd("near","float",r.camera).setGroup(qn),s=pd("far","float",r.camera).setGroup(qn);n=Mh(e.negate(),t,s)}return a=Zi(a.x,a.y.oneMinus(),n.add(i)),a}getShadowFilterFn(e){return Lb[e]}setupRenderTarget(e,t){const r=new D(e.mapSize.width,e.mapSize.height);r.name="ShadowDepthTexture",r.compareFunction=Ve;const s=t.createRenderTarget(e.mapSize.width,e.mapSize.height);return s.texture.name="ShadowMap",s.texture.type=e.mapType,s.depthTexture=r,{shadowMap:s,depthTexture:r}}setupShadow(e){const{renderer:t}=e,{light:r,shadow:s}=this,i=t.shadowMap.type,{depthTexture:n,shadowMap:a}=this.setupRenderTarget(s,e);if(s.camera.updateProjectionMatrix(),i===Ie){n.compareFunction=null,a.isRenderTargetArray?(a._vsmShadowMapVertical||(a._vsmShadowMapVertical=e.createRenderTargetArray(s.mapSize.width,s.mapSize.height,a.depth,{format:Ue,type:he,depthBuffer:!1}),a._vsmShadowMapVertical.texture.name="VSMVertical"),this.vsmShadowMapVertical=a._vsmShadowMapVertical,a._vsmShadowMapHorizontal||(a._vsmShadowMapHorizontal=e.createRenderTargetArray(s.mapSize.width,s.mapSize.height,a.depth,{format:Ue,type:he,depthBuffer:!1}),a._vsmShadowMapHorizontal.texture.name="VSMHorizontal"),this.vsmShadowMapHorizontal=a._vsmShadowMapHorizontal):(this.vsmShadowMapVertical=e.createRenderTarget(s.mapSize.width,s.mapSize.height,{format:Ue,type:he,depthBuffer:!1}),this.vsmShadowMapHorizontal=e.createRenderTarget(s.mapSize.width,s.mapSize.height,{format:Ue,type:he,depthBuffer:!1}));let t=Yu(n);n.isDepthArrayTexture&&(t=t.depth(this.depthLayer));let r=Yu(this.vsmShadowMapVertical.texture);n.isDepthArrayTexture&&(r=r.depth(this.depthLayer));const i=pd("blurSamples","float",s).setGroup(qn),o=pd("radius","float",s).setGroup(qn),u=pd("mapSize","vec2",s).setGroup(qn);let l=this.vsmMaterialVertical||(this.vsmMaterialVertical=new Gh);l.fragmentNode=Mb({samples:i,radius:o,size:u,shadowPass:t,depthLayer:this.depthLayer}).context(e.getSharedContext()),l.name="VSMVertical",l=this.vsmMaterialHorizontal||(this.vsmMaterialHorizontal=new Gh),l.fragmentNode=Pb({samples:i,radius:o,size:u,shadowPass:r,depthLayer:this.depthLayer}).context(e.getSharedContext()),l.name="VSMHorizontal"}const o=pd("intensity","float",s).setGroup(qn),u=pd("normalBias","float",s).setGroup(qn),l=eb(r).mul(db.add(Yl.mul(u))),d=this.setupShadowCoord(e,l),c=s.filterNode||this.getShadowFilterFn(t.shadowMap.type)||null;if(null===c)throw new Error("THREE.WebGPURenderer: Shadow map type not supported yet.");const h=i===Ie?this.vsmShadowMapHorizontal.texture:n,p=this.setupShadowFilter(e,{filterFn:c,shadowTexture:a.texture,depthTexture:h,shadowCoord:d,shadow:s,depthLayer:this.depthLayer});let g=Yu(a.texture,d);n.isDepthArrayTexture&&(g=g.depth(this.depthLayer));const m=Fo(1,p.rgb.mix(g,1),o.mul(g.a)).toVar();return this.shadowMap=a,this.shadow.map=a,m}setup(e){if(!1!==e.renderer.shadowMap.enabled)return Ui((()=>{let t=this._node;return this.setupShadowPosition(e),null===t&&(this._node=t=this.setupShadow(e)),e.material.shadowNode&&console.warn('THREE.NodeMaterial: ".shadowNode" is deprecated. Use ".castShadowNode" instead.'),e.material.receivedShadowNode&&(t=e.material.receivedShadowNode(t)),t}))()}renderShadow(e){const{shadow:t,shadowMap:r,light:s}=this,{renderer:i,scene:n}=e;t.updateMatrices(s),r.setSize(t.mapSize.width,t.mapSize.height,r.depth),i.render(n,t.camera)}updateShadow(e){const{shadowMap:t,light:r,shadow:s}=this,{renderer:i,scene:n,camera:a}=e,o=i.shadowMap.type,u=t.depthTexture.version;this._depthVersionCached=u;const l=s.camera.layers.mask;4294967294&s.camera.layers.mask||(s.camera.layers.mask=a.layers.mask);const d=i.getRenderObjectFunction(),c=i.getMRT(),h=!!c&&c.has("velocity");Fb=yb(i,n,Fb),n.overrideMaterial=Eb(r),i.setRenderObjectFunction(Cb(i,s,o,h)),i.setClearColor(0,0),i.setRenderTarget(t),this.renderShadow(e),i.setRenderObjectFunction(d),!0!==r.isPointLight&&o===Ie&&this.vsmPass(i),s.camera.layers.mask=l,xb(i,n,Fb)}vsmPass(e){const{shadow:t}=this,r=this.shadowMap.depth;this.vsmShadowMapVertical.setSize(t.mapSize.width,t.mapSize.height,r),this.vsmShadowMapHorizontal.setSize(t.mapSize.width,t.mapSize.height,r),e.setRenderTarget(this.vsmShadowMapVertical),Bb.material=this.vsmMaterialVertical,Bb.render(e),e.setRenderTarget(this.vsmShadowMapHorizontal),Bb.material=this.vsmMaterialHorizontal,Bb.render(e)}dispose(){this.shadowMap.dispose(),this.shadowMap=null,null!==this.vsmShadowMapVertical&&(this.vsmShadowMapVertical.dispose(),this.vsmShadowMapVertical=null,this.vsmMaterialVertical.dispose(),this.vsmMaterialVertical=null),null!==this.vsmShadowMapHorizontal&&(this.vsmShadowMapHorizontal.dispose(),this.vsmShadowMapHorizontal=null,this.vsmMaterialHorizontal.dispose(),this.vsmMaterialHorizontal=null),super.dispose()}updateBefore(e){const{shadow:t}=this;let r=t.needsUpdate||t.autoUpdate;r&&(this._cameraFrameId[e.camera]===e.frameId&&(r=!1),this._cameraFrameId[e.camera]=e.frameId),r&&(this.updateShadow(e),this.shadowMap.depthTexture.version===this._depthVersionCached&&(t.needsUpdate=!1))}}const Ib=(e,t)=>Li(new Db(e,t)),Vb=new e,Ub=Ui((([e,t])=>{const r=e.toVar(),s=so(r),i=ua(1,bo(s.x,bo(s.y,s.z)));s.mulAssign(i),r.mulAssign(i.mul(t.mul(2).oneMinus()));const n=Xi(r.xy).toVar(),a=t.mul(1.5).oneMinus();return Gi(s.z.greaterThanEqual(a),(()=>{Gi(r.z.greaterThan(0),(()=>{n.x.assign(aa(4,r.x))}))})).ElseIf(s.x.greaterThanEqual(a),(()=>{const e=io(r.x);n.x.assign(r.z.mul(e).add(e.mul(2)))})).ElseIf(s.y.greaterThanEqual(a),(()=>{const e=io(r.y);n.x.assign(r.x.add(e.mul(2)).add(2)),n.y.assign(r.z.mul(e).sub(2))})),Xi(.125,.25).mul(n).add(Xi(.375,.75)).flipY()})).setLayout({name:"cubeToUV",type:"vec2",inputs:[{name:"pos",type:"vec3"},{name:"texelSizeY",type:"float"}]}),Ob=Ui((({depthTexture:e,bd3D:t,dp:r,texelSize:s})=>Yu(e,Ub(t,s.y)).compare(r))),kb=Ui((({depthTexture:e,bd3D:t,dp:r,texelSize:s,shadow:i})=>{const n=pd("radius","float",i).setGroup(qn),a=Xi(-1,1).mul(n).mul(s.y);return Yu(e,Ub(t.add(a.xyy),s.y)).compare(r).add(Yu(e,Ub(t.add(a.yyy),s.y)).compare(r)).add(Yu(e,Ub(t.add(a.xyx),s.y)).compare(r)).add(Yu(e,Ub(t.add(a.yyx),s.y)).compare(r)).add(Yu(e,Ub(t,s.y)).compare(r)).add(Yu(e,Ub(t.add(a.xxy),s.y)).compare(r)).add(Yu(e,Ub(t.add(a.yxy),s.y)).compare(r)).add(Yu(e,Ub(t.add(a.xxx),s.y)).compare(r)).add(Yu(e,Ub(t.add(a.yxx),s.y)).compare(r)).mul(1/9)})),Gb=Ui((({filterFn:e,depthTexture:t,shadowCoord:r,shadow:s})=>{const i=r.xyz.toVar(),n=i.length(),a=Yn("float").setGroup(qn).onRenderUpdate((()=>s.camera.near)),o=Yn("float").setGroup(qn).onRenderUpdate((()=>s.camera.far)),u=pd("bias","float",s).setGroup(qn),l=Yn(s.mapSize).setGroup(qn),d=Hi(1).toVar();return Gi(n.sub(o).lessThanEqual(0).and(n.sub(a).greaterThanEqual(0)),(()=>{const r=n.sub(a).div(o.sub(a)).toVar();r.addAssign(u);const c=i.normalize(),h=Xi(1).div(l.mul(Xi(4,2)));d.assign(e({depthTexture:t,bd3D:c,dp:r,texelSize:h,shadow:s}))})),d})),zb=new s,$b=new t,Hb=new t;class Wb extends Db{static get type(){return"PointShadowNode"}constructor(e,t=null){super(e,t)}getShadowFilterFn(e){return e===Oe?Ob:kb}setupShadowCoord(e,t){return t}setupShadowFilter(e,{filterFn:t,shadowTexture:r,depthTexture:s,shadowCoord:i,shadow:n}){return Gb({filterFn:t,shadowTexture:r,depthTexture:s,shadowCoord:i,shadow:n})}renderShadow(e){const{shadow:t,shadowMap:r,light:s}=this,{renderer:i,scene:n}=e,a=t.getFrameExtents();Hb.copy(t.mapSize),Hb.multiply(a),r.setSize(Hb.width,Hb.height),$b.copy(t.mapSize);const o=i.autoClear,u=i.getClearColor(Vb),l=i.getClearAlpha();i.autoClear=!1,i.setClearColor(t.clearColor,t.clearAlpha),i.clear();const d=t.getViewportCount();for(let e=0;e<d;e++){const a=t.getViewport(e),o=$b.x*a.x,u=Hb.y-$b.y-$b.y*a.y;zb.set(o,u,$b.x*a.z,$b.y*a.w),r.viewport.copy(zb),t.updateMatrices(s,e),i.render(n,t.camera)}i.autoClear=o,i.setClearColor(u,l)}}const jb=(e,t)=>Li(new Wb(e,t));class qb extends th{static get type(){return"AnalyticLightNode"}constructor(t=null){super(),this.light=t,this.color=new e,this.colorNode=t&&t.colorNode||Yn(this.color).setGroup(qn),this.baseColorNode=null,this.shadowNode=null,this.shadowColorNode=null,this.isAnalyticLightNode=!0,this.updateType=Is.FRAME}customCacheKey(){return _s(this.light.id,this.light.castShadow?1:0)}getHash(){return this.light.uuid}getLightVector(e){return ib(this.light).sub(e.context.positionView||Ol)}setupDirect(){}setupDirectRectArea(){}setupShadowNode(){return Ib(this.light)}setupShadow(e){const{renderer:t}=e;if(!1===t.shadowMap.enabled)return;let r=this.shadowColorNode;if(null===r){const e=this.light.shadow.shadowNode;let t;t=void 0!==e?Li(e):this.setupShadowNode(),this.shadowNode=t,this.shadowColorNode=r=this.colorNode.mul(t),this.baseColorNode=this.colorNode}this.colorNode=r}setup(e){this.colorNode=this.baseColorNode||this.colorNode,this.light.castShadow?e.object.receiveShadow&&this.setupShadow(e):null!==this.shadowNode&&(this.shadowNode.dispose(),this.shadowNode=null,this.shadowColorNode=null);const t=this.setupDirect(e),r=this.setupDirectRectArea(e);t&&e.lightsNode.setupDirectLight(e,this,t),r&&e.lightsNode.setupDirectRectAreaLight(e,this,r)}update(){const{light:e}=this;this.color.copy(e.color).multiplyScalar(e.intensity)}}const Xb=Ui((({lightDistance:e,cutoffDistance:t,decayExponent:r})=>{const s=e.pow(r).max(.01).reciprocal();return t.greaterThan(0).select(s.mul(e.div(t).pow4().oneMinus().clamp().pow2()),s)})),Kb=({color:e,lightVector:t,cutoffDistance:r,decayExponent:s})=>{const i=t.normalize(),n=t.length(),a=Xb({lightDistance:n,cutoffDistance:r,decayExponent:s});return{lightDirection:i,lightColor:e.mul(a)}};class Yb extends qb{static get type(){return"PointLightNode"}constructor(e=null){super(e),this.cutoffDistanceNode=Yn(0).setGroup(qn),this.decayExponentNode=Yn(2).setGroup(qn)}update(e){const{light:t}=this;super.update(e),this.cutoffDistanceNode.value=t.distance,this.decayExponentNode.value=t.decay}setupShadowNode(){return jb(this.light)}setupDirect(e){return Kb({color:this.colorNode,lightVector:this.getLightVector(e),cutoffDistance:this.cutoffDistanceNode,decayExponent:this.decayExponentNode})}}const Qb=Ui((([e=t()])=>{const t=e.mul(2),r=t.x.floor(),s=t.y.floor();return r.add(s).mod(2).sign()})),Zb=Ui((([e=Hu()],{renderer:t,material:r})=>{const s=Hi(1).toVar(),i=Lo(e.mul(2).sub(1));if(r.alphaToCoverage&&t.samples>1){const e=Hi(i.fwidth()).toVar();s.assign(Vo(e.oneMinus(),e.add(1),i).oneMinus())}else i.greaterThan(1).discard();return s})),Jb=Ui((([e,t,r])=>{const s=Hi(r).toVar(),i=Hi(t).toVar(),n=qi(e).toVar();return jo(n,i,s)})).setLayout({name:"mx_select",type:"float",inputs:[{name:"b",type:"bool"},{name:"t",type:"float"},{name:"f",type:"float"}]}),eT=Ui((([e,t])=>{const r=qi(t).toVar(),s=Hi(e).toVar();return jo(r,s.negate(),s)})).setLayout({name:"mx_negate_if",type:"float",inputs:[{name:"val",type:"float"},{name:"b",type:"bool"}]}),tT=Ui((([e])=>{const t=Hi(e).toVar();return Wi(qa(t))})).setLayout({name:"mx_floor",type:"int",inputs:[{name:"x",type:"float"}]}),rT=Ui((([e,t])=>{const r=Hi(e).toVar();return t.assign(tT(r)),r.sub(Hi(t))})),sT=Gf([Ui((([e,t,r,s,i,n])=>{const a=Hi(n).toVar(),o=Hi(i).toVar(),u=Hi(s).toVar(),l=Hi(r).toVar(),d=Hi(t).toVar(),c=Hi(e).toVar(),h=Hi(aa(1,o)).toVar();return aa(1,a).mul(c.mul(h).add(d.mul(o))).add(a.mul(l.mul(h).add(u.mul(o))))})).setLayout({name:"mx_bilerp_0",type:"float",inputs:[{name:"v0",type:"float"},{name:"v1",type:"float"},{name:"v2",type:"float"},{name:"v3",type:"float"},{name:"s",type:"float"},{name:"t",type:"float"}]}),Ui((([e,t,r,s,i,n])=>{const a=Hi(n).toVar(),o=Hi(i).toVar(),u=Zi(s).toVar(),l=Zi(r).toVar(),d=Zi(t).toVar(),c=Zi(e).toVar(),h=Hi(aa(1,o)).toVar();return aa(1,a).mul(c.mul(h).add(d.mul(o))).add(a.mul(l.mul(h).add(u.mul(o))))})).setLayout({name:"mx_bilerp_1",type:"vec3",inputs:[{name:"v0",type:"vec3"},{name:"v1",type:"vec3"},{name:"v2",type:"vec3"},{name:"v3",type:"vec3"},{name:"s",type:"float"},{name:"t",type:"float"}]})]),iT=Gf([Ui((([e,t,r,s,i,n,a,o,u,l,d])=>{const c=Hi(d).toVar(),h=Hi(l).toVar(),p=Hi(u).toVar(),g=Hi(o).toVar(),m=Hi(a).toVar(),f=Hi(n).toVar(),y=Hi(i).toVar(),x=Hi(s).toVar(),b=Hi(r).toVar(),T=Hi(t).toVar(),_=Hi(e).toVar(),v=Hi(aa(1,p)).toVar(),N=Hi(aa(1,h)).toVar();return Hi(aa(1,c)).toVar().mul(N.mul(_.mul(v).add(T.mul(p))).add(h.mul(b.mul(v).add(x.mul(p))))).add(c.mul(N.mul(y.mul(v).add(f.mul(p))).add(h.mul(m.mul(v).add(g.mul(p))))))})).setLayout({name:"mx_trilerp_0",type:"float",inputs:[{name:"v0",type:"float"},{name:"v1",type:"float"},{name:"v2",type:"float"},{name:"v3",type:"float"},{name:"v4",type:"float"},{name:"v5",type:"float"},{name:"v6",type:"float"},{name:"v7",type:"float"},{name:"s",type:"float"},{name:"t",type:"float"},{name:"r",type:"float"}]}),Ui((([e,t,r,s,i,n,a,o,u,l,d])=>{const c=Hi(d).toVar(),h=Hi(l).toVar(),p=Hi(u).toVar(),g=Zi(o).toVar(),m=Zi(a).toVar(),f=Zi(n).toVar(),y=Zi(i).toVar(),x=Zi(s).toVar(),b=Zi(r).toVar(),T=Zi(t).toVar(),_=Zi(e).toVar(),v=Hi(aa(1,p)).toVar(),N=Hi(aa(1,h)).toVar();return Hi(aa(1,c)).toVar().mul(N.mul(_.mul(v).add(T.mul(p))).add(h.mul(b.mul(v).add(x.mul(p))))).add(c.mul(N.mul(y.mul(v).add(f.mul(p))).add(h.mul(m.mul(v).add(g.mul(p))))))})).setLayout({name:"mx_trilerp_1",type:"vec3",inputs:[{name:"v0",type:"vec3"},{name:"v1",type:"vec3"},{name:"v2",type:"vec3"},{name:"v3",type:"vec3"},{name:"v4",type:"vec3"},{name:"v5",type:"vec3"},{name:"v6",type:"vec3"},{name:"v7",type:"vec3"},{name:"s",type:"float"},{name:"t",type:"float"},{name:"r",type:"float"}]})]),nT=Ui((([e,t,r])=>{const s=Hi(r).toVar(),i=Hi(t).toVar(),n=ji(e).toVar(),a=ji(n.bitAnd(ji(7))).toVar(),o=Hi(Jb(a.lessThan(ji(4)),i,s)).toVar(),u=Hi(oa(2,Jb(a.lessThan(ji(4)),s,i))).toVar();return eT(o,qi(a.bitAnd(ji(1)))).add(eT(u,qi(a.bitAnd(ji(2)))))})).setLayout({name:"mx_gradient_float_0",type:"float",inputs:[{name:"hash",type:"uint"},{name:"x",type:"float"},{name:"y",type:"float"}]}),aT=Ui((([e,t,r,s])=>{const i=Hi(s).toVar(),n=Hi(r).toVar(),a=Hi(t).toVar(),o=ji(e).toVar(),u=ji(o.bitAnd(ji(15))).toVar(),l=Hi(Jb(u.lessThan(ji(8)),a,n)).toVar(),d=Hi(Jb(u.lessThan(ji(4)),n,Jb(u.equal(ji(12)).or(u.equal(ji(14))),a,i))).toVar();return eT(l,qi(u.bitAnd(ji(1)))).add(eT(d,qi(u.bitAnd(ji(2)))))})).setLayout({name:"mx_gradient_float_1",type:"float",inputs:[{name:"hash",type:"uint"},{name:"x",type:"float"},{name:"y",type:"float"},{name:"z",type:"float"}]}),oT=Gf([nT,aT]),uT=Ui((([e,t,r])=>{const s=Hi(r).toVar(),i=Hi(t).toVar(),n=en(e).toVar();return Zi(oT(n.x,i,s),oT(n.y,i,s),oT(n.z,i,s))})).setLayout({name:"mx_gradient_vec3_0",type:"vec3",inputs:[{name:"hash",type:"uvec3"},{name:"x",type:"float"},{name:"y",type:"float"}]}),lT=Ui((([e,t,r,s])=>{const i=Hi(s).toVar(),n=Hi(r).toVar(),a=Hi(t).toVar(),o=en(e).toVar();return Zi(oT(o.x,a,n,i),oT(o.y,a,n,i),oT(o.z,a,n,i))})).setLayout({name:"mx_gradient_vec3_1",type:"vec3",inputs:[{name:"hash",type:"uvec3"},{name:"x",type:"float"},{name:"y",type:"float"},{name:"z",type:"float"}]}),dT=Gf([uT,lT]),cT=Ui((([e])=>{const t=Hi(e).toVar();return oa(.6616,t)})).setLayout({name:"mx_gradient_scale2d_0",type:"float",inputs:[{name:"v",type:"float"}]}),hT=Ui((([e])=>{const t=Hi(e).toVar();return oa(.982,t)})).setLayout({name:"mx_gradient_scale3d_0",type:"float",inputs:[{name:"v",type:"float"}]}),pT=Gf([cT,Ui((([e])=>{const t=Zi(e).toVar();return oa(.6616,t)})).setLayout({name:"mx_gradient_scale2d_1",type:"vec3",inputs:[{name:"v",type:"vec3"}]})]),gT=Gf([hT,Ui((([e])=>{const t=Zi(e).toVar();return oa(.982,t)})).setLayout({name:"mx_gradient_scale3d_1",type:"vec3",inputs:[{name:"v",type:"vec3"}]})]),mT=Ui((([e,t])=>{const r=Wi(t).toVar(),s=ji(e).toVar();return s.shiftLeft(r).bitOr(s.shiftRight(Wi(32).sub(r)))})).setLayout({name:"mx_rotl32",type:"uint",inputs:[{name:"x",type:"uint"},{name:"k",type:"int"}]}),fT=Ui((([e,t,r])=>{e.subAssign(r),e.bitXorAssign(mT(r,Wi(4))),r.addAssign(t),t.subAssign(e),t.bitXorAssign(mT(e,Wi(6))),e.addAssign(r),r.subAssign(t),r.bitXorAssign(mT(t,Wi(8))),t.addAssign(e),e.subAssign(r),e.bitXorAssign(mT(r,Wi(16))),r.addAssign(t),t.subAssign(e),t.bitXorAssign(mT(e,Wi(19))),e.addAssign(r),r.subAssign(t),r.bitXorAssign(mT(t,Wi(4))),t.addAssign(e)})),yT=Ui((([e,t,r])=>{const s=ji(r).toVar(),i=ji(t).toVar(),n=ji(e).toVar();return s.bitXorAssign(i),s.subAssign(mT(i,Wi(14))),n.bitXorAssign(s),n.subAssign(mT(s,Wi(11))),i.bitXorAssign(n),i.subAssign(mT(n,Wi(25))),s.bitXorAssign(i),s.subAssign(mT(i,Wi(16))),n.bitXorAssign(s),n.subAssign(mT(s,Wi(4))),i.bitXorAssign(n),i.subAssign(mT(n,Wi(14))),s.bitXorAssign(i),s.subAssign(mT(i,Wi(24))),s})).setLayout({name:"mx_bjfinal",type:"uint",inputs:[{name:"a",type:"uint"},{name:"b",type:"uint"},{name:"c",type:"uint"}]}),xT=Ui((([e])=>{const t=ji(e).toVar();return Hi(t).div(Hi(ji(Wi(4294967295))))})).setLayout({name:"mx_bits_to_01",type:"float",inputs:[{name:"bits",type:"uint"}]}),bT=Ui((([e])=>{const t=Hi(e).toVar();return t.mul(t).mul(t).mul(t.mul(t.mul(6).sub(15)).add(10))})).setLayout({name:"mx_fade",type:"float",inputs:[{name:"t",type:"float"}]}),TT=Gf([Ui((([e])=>{const t=Wi(e).toVar(),r=ji(ji(1)).toVar(),s=ji(ji(Wi(3735928559)).add(r.shiftLeft(ji(2))).add(ji(13))).toVar();return yT(s.add(ji(t)),s,s)})).setLayout({name:"mx_hash_int_0",type:"uint",inputs:[{name:"x",type:"int"}]}),Ui((([e,t])=>{const r=Wi(t).toVar(),s=Wi(e).toVar(),i=ji(ji(2)).toVar(),n=ji().toVar(),a=ji().toVar(),o=ji().toVar();return n.assign(a.assign(o.assign(ji(Wi(3735928559)).add(i.shiftLeft(ji(2))).add(ji(13))))),n.addAssign(ji(s)),a.addAssign(ji(r)),yT(n,a,o)})).setLayout({name:"mx_hash_int_1",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"}]}),Ui((([e,t,r])=>{const s=Wi(r).toVar(),i=Wi(t).toVar(),n=Wi(e).toVar(),a=ji(ji(3)).toVar(),o=ji().toVar(),u=ji().toVar(),l=ji().toVar();return o.assign(u.assign(l.assign(ji(Wi(3735928559)).add(a.shiftLeft(ji(2))).add(ji(13))))),o.addAssign(ji(n)),u.addAssign(ji(i)),l.addAssign(ji(s)),yT(o,u,l)})).setLayout({name:"mx_hash_int_2",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"}]}),Ui((([e,t,r,s])=>{const i=Wi(s).toVar(),n=Wi(r).toVar(),a=Wi(t).toVar(),o=Wi(e).toVar(),u=ji(ji(4)).toVar(),l=ji().toVar(),d=ji().toVar(),c=ji().toVar();return l.assign(d.assign(c.assign(ji(Wi(3735928559)).add(u.shiftLeft(ji(2))).add(ji(13))))),l.addAssign(ji(o)),d.addAssign(ji(a)),c.addAssign(ji(n)),fT(l,d,c),l.addAssign(ji(i)),yT(l,d,c)})).setLayout({name:"mx_hash_int_3",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xx",type:"int"}]}),Ui((([e,t,r,s,i])=>{const n=Wi(i).toVar(),a=Wi(s).toVar(),o=Wi(r).toVar(),u=Wi(t).toVar(),l=Wi(e).toVar(),d=ji(ji(5)).toVar(),c=ji().toVar(),h=ji().toVar(),p=ji().toVar();return c.assign(h.assign(p.assign(ji(Wi(3735928559)).add(d.shiftLeft(ji(2))).add(ji(13))))),c.addAssign(ji(l)),h.addAssign(ji(u)),p.addAssign(ji(o)),fT(c,h,p),c.addAssign(ji(a)),h.addAssign(ji(n)),yT(c,h,p)})).setLayout({name:"mx_hash_int_4",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xx",type:"int"},{name:"yy",type:"int"}]})]),_T=Gf([Ui((([e,t])=>{const r=Wi(t).toVar(),s=Wi(e).toVar(),i=ji(TT(s,r)).toVar(),n=en().toVar();return n.x.assign(i.bitAnd(Wi(255))),n.y.assign(i.shiftRight(Wi(8)).bitAnd(Wi(255))),n.z.assign(i.shiftRight(Wi(16)).bitAnd(Wi(255))),n})).setLayout({name:"mx_hash_vec3_0",type:"uvec3",inputs:[{name:"x",type:"int"},{name:"y",type:"int"}]}),Ui((([e,t,r])=>{const s=Wi(r).toVar(),i=Wi(t).toVar(),n=Wi(e).toVar(),a=ji(TT(n,i,s)).toVar(),o=en().toVar();return o.x.assign(a.bitAnd(Wi(255))),o.y.assign(a.shiftRight(Wi(8)).bitAnd(Wi(255))),o.z.assign(a.shiftRight(Wi(16)).bitAnd(Wi(255))),o})).setLayout({name:"mx_hash_vec3_1",type:"uvec3",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"}]})]),vT=Gf([Ui((([e])=>{const t=Xi(e).toVar(),r=Wi().toVar(),s=Wi().toVar(),i=Hi(rT(t.x,r)).toVar(),n=Hi(rT(t.y,s)).toVar(),a=Hi(bT(i)).toVar(),o=Hi(bT(n)).toVar(),u=Hi(sT(oT(TT(r,s),i,n),oT(TT(r.add(Wi(1)),s),i.sub(1),n),oT(TT(r,s.add(Wi(1))),i,n.sub(1)),oT(TT(r.add(Wi(1)),s.add(Wi(1))),i.sub(1),n.sub(1)),a,o)).toVar();return pT(u)})).setLayout({name:"mx_perlin_noise_float_0",type:"float",inputs:[{name:"p",type:"vec2"}]}),Ui((([e])=>{const t=Zi(e).toVar(),r=Wi().toVar(),s=Wi().toVar(),i=Wi().toVar(),n=Hi(rT(t.x,r)).toVar(),a=Hi(rT(t.y,s)).toVar(),o=Hi(rT(t.z,i)).toVar(),u=Hi(bT(n)).toVar(),l=Hi(bT(a)).toVar(),d=Hi(bT(o)).toVar(),c=Hi(iT(oT(TT(r,s,i),n,a,o),oT(TT(r.add(Wi(1)),s,i),n.sub(1),a,o),oT(TT(r,s.add(Wi(1)),i),n,a.sub(1),o),oT(TT(r.add(Wi(1)),s.add(Wi(1)),i),n.sub(1),a.sub(1),o),oT(TT(r,s,i.add(Wi(1))),n,a,o.sub(1)),oT(TT(r.add(Wi(1)),s,i.add(Wi(1))),n.sub(1),a,o.sub(1)),oT(TT(r,s.add(Wi(1)),i.add(Wi(1))),n,a.sub(1),o.sub(1)),oT(TT(r.add(Wi(1)),s.add(Wi(1)),i.add(Wi(1))),n.sub(1),a.sub(1),o.sub(1)),u,l,d)).toVar();return gT(c)})).setLayout({name:"mx_perlin_noise_float_1",type:"float",inputs:[{name:"p",type:"vec3"}]})]),NT=Gf([Ui((([e])=>{const t=Xi(e).toVar(),r=Wi().toVar(),s=Wi().toVar(),i=Hi(rT(t.x,r)).toVar(),n=Hi(rT(t.y,s)).toVar(),a=Hi(bT(i)).toVar(),o=Hi(bT(n)).toVar(),u=Zi(sT(dT(_T(r,s),i,n),dT(_T(r.add(Wi(1)),s),i.sub(1),n),dT(_T(r,s.add(Wi(1))),i,n.sub(1)),dT(_T(r.add(Wi(1)),s.add(Wi(1))),i.sub(1),n.sub(1)),a,o)).toVar();return pT(u)})).setLayout({name:"mx_perlin_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"vec2"}]}),Ui((([e])=>{const t=Zi(e).toVar(),r=Wi().toVar(),s=Wi().toVar(),i=Wi().toVar(),n=Hi(rT(t.x,r)).toVar(),a=Hi(rT(t.y,s)).toVar(),o=Hi(rT(t.z,i)).toVar(),u=Hi(bT(n)).toVar(),l=Hi(bT(a)).toVar(),d=Hi(bT(o)).toVar(),c=Zi(iT(dT(_T(r,s,i),n,a,o),dT(_T(r.add(Wi(1)),s,i),n.sub(1),a,o),dT(_T(r,s.add(Wi(1)),i),n,a.sub(1),o),dT(_T(r.add(Wi(1)),s.add(Wi(1)),i),n.sub(1),a.sub(1),o),dT(_T(r,s,i.add(Wi(1))),n,a,o.sub(1)),dT(_T(r.add(Wi(1)),s,i.add(Wi(1))),n.sub(1),a,o.sub(1)),dT(_T(r,s.add(Wi(1)),i.add(Wi(1))),n,a.sub(1),o.sub(1)),dT(_T(r.add(Wi(1)),s.add(Wi(1)),i.add(Wi(1))),n.sub(1),a.sub(1),o.sub(1)),u,l,d)).toVar();return gT(c)})).setLayout({name:"mx_perlin_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec3"}]})]),ST=Gf([Ui((([e])=>{const t=Hi(e).toVar(),r=Wi(tT(t)).toVar();return xT(TT(r))})).setLayout({name:"mx_cell_noise_float_0",type:"float",inputs:[{name:"p",type:"float"}]}),Ui((([e])=>{const t=Xi(e).toVar(),r=Wi(tT(t.x)).toVar(),s=Wi(tT(t.y)).toVar();return xT(TT(r,s))})).setLayout({name:"mx_cell_noise_float_1",type:"float",inputs:[{name:"p",type:"vec2"}]}),Ui((([e])=>{const t=Zi(e).toVar(),r=Wi(tT(t.x)).toVar(),s=Wi(tT(t.y)).toVar(),i=Wi(tT(t.z)).toVar();return xT(TT(r,s,i))})).setLayout({name:"mx_cell_noise_float_2",type:"float",inputs:[{name:"p",type:"vec3"}]}),Ui((([e])=>{const t=rn(e).toVar(),r=Wi(tT(t.x)).toVar(),s=Wi(tT(t.y)).toVar(),i=Wi(tT(t.z)).toVar(),n=Wi(tT(t.w)).toVar();return xT(TT(r,s,i,n))})).setLayout({name:"mx_cell_noise_float_3",type:"float",inputs:[{name:"p",type:"vec4"}]})]),wT=Gf([Ui((([e])=>{const t=Hi(e).toVar(),r=Wi(tT(t)).toVar();return Zi(xT(TT(r,Wi(0))),xT(TT(r,Wi(1))),xT(TT(r,Wi(2))))})).setLayout({name:"mx_cell_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"float"}]}),Ui((([e])=>{const t=Xi(e).toVar(),r=Wi(tT(t.x)).toVar(),s=Wi(tT(t.y)).toVar();return Zi(xT(TT(r,s,Wi(0))),xT(TT(r,s,Wi(1))),xT(TT(r,s,Wi(2))))})).setLayout({name:"mx_cell_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec2"}]}),Ui((([e])=>{const t=Zi(e).toVar(),r=Wi(tT(t.x)).toVar(),s=Wi(tT(t.y)).toVar(),i=Wi(tT(t.z)).toVar();return Zi(xT(TT(r,s,i,Wi(0))),xT(TT(r,s,i,Wi(1))),xT(TT(r,s,i,Wi(2))))})).setLayout({name:"mx_cell_noise_vec3_2",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),Ui((([e])=>{const t=rn(e).toVar(),r=Wi(tT(t.x)).toVar(),s=Wi(tT(t.y)).toVar(),i=Wi(tT(t.z)).toVar(),n=Wi(tT(t.w)).toVar();return Zi(xT(TT(r,s,i,n,Wi(0))),xT(TT(r,s,i,n,Wi(1))),xT(TT(r,s,i,n,Wi(2))))})).setLayout({name:"mx_cell_noise_vec3_3",type:"vec3",inputs:[{name:"p",type:"vec4"}]})]),ET=Ui((([e,t,r,s])=>{const i=Hi(s).toVar(),n=Hi(r).toVar(),a=Wi(t).toVar(),o=Zi(e).toVar(),u=Hi(0).toVar(),l=Hi(1).toVar();return Xc(a,(()=>{u.addAssign(l.mul(vT(o))),l.mulAssign(i),o.mulAssign(n)})),u})).setLayout({name:"mx_fractal_noise_float",type:"float",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),AT=Ui((([e,t,r,s])=>{const i=Hi(s).toVar(),n=Hi(r).toVar(),a=Wi(t).toVar(),o=Zi(e).toVar(),u=Zi(0).toVar(),l=Hi(1).toVar();return Xc(a,(()=>{u.addAssign(l.mul(NT(o))),l.mulAssign(i),o.mulAssign(n)})),u})).setLayout({name:"mx_fractal_noise_vec3",type:"vec3",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),RT=Ui((([e,t,r,s])=>{const i=Hi(s).toVar(),n=Hi(r).toVar(),a=Wi(t).toVar(),o=Zi(e).toVar();return Xi(ET(o,a,n,i),ET(o.add(Zi(Wi(19),Wi(193),Wi(17))),a,n,i))})).setLayout({name:"mx_fractal_noise_vec2",type:"vec2",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),CT=Ui((([e,t,r,s])=>{const i=Hi(s).toVar(),n=Hi(r).toVar(),a=Wi(t).toVar(),o=Zi(e).toVar(),u=Zi(AT(o,a,n,i)).toVar(),l=Hi(ET(o.add(Zi(Wi(19),Wi(193),Wi(17))),a,n,i)).toVar();return rn(u,l)})).setLayout({name:"mx_fractal_noise_vec4",type:"vec4",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),MT=Gf([Ui((([e,t,r,s,i,n,a])=>{const o=Wi(a).toVar(),u=Hi(n).toVar(),l=Wi(i).toVar(),d=Wi(s).toVar(),c=Wi(r).toVar(),h=Wi(t).toVar(),p=Xi(e).toVar(),g=Zi(wT(Xi(h.add(d),c.add(l)))).toVar(),m=Xi(g.x,g.y).toVar();m.subAssign(.5),m.mulAssign(u),m.addAssign(.5);const f=Xi(Xi(Hi(h),Hi(c)).add(m)).toVar(),y=Xi(f.sub(p)).toVar();return Gi(o.equal(Wi(2)),(()=>so(y.x).add(so(y.y)))),Gi(o.equal(Wi(3)),(()=>bo(so(y.x),so(y.y)))),So(y,y)})).setLayout({name:"mx_worley_distance_0",type:"float",inputs:[{name:"p",type:"vec2"},{name:"x",type:"int"},{name:"y",type:"int"},{name:"xoff",type:"int"},{name:"yoff",type:"int"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),Ui((([e,t,r,s,i,n,a,o,u])=>{const l=Wi(u).toVar(),d=Hi(o).toVar(),c=Wi(a).toVar(),h=Wi(n).toVar(),p=Wi(i).toVar(),g=Wi(s).toVar(),m=Wi(r).toVar(),f=Wi(t).toVar(),y=Zi(e).toVar(),x=Zi(wT(Zi(f.add(p),m.add(h),g.add(c)))).toVar();x.subAssign(.5),x.mulAssign(d),x.addAssign(.5);const b=Zi(Zi(Hi(f),Hi(m),Hi(g)).add(x)).toVar(),T=Zi(b.sub(y)).toVar();return Gi(l.equal(Wi(2)),(()=>so(T.x).add(so(T.y)).add(so(T.z)))),Gi(l.equal(Wi(3)),(()=>bo(bo(so(T.x),so(T.y)),so(T.z)))),So(T,T)})).setLayout({name:"mx_worley_distance_1",type:"float",inputs:[{name:"p",type:"vec3"},{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xoff",type:"int"},{name:"yoff",type:"int"},{name:"zoff",type:"int"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),PT=Ui((([e,t,r])=>{const s=Wi(r).toVar(),i=Hi(t).toVar(),n=Xi(e).toVar(),a=Wi().toVar(),o=Wi().toVar(),u=Xi(rT(n.x,a),rT(n.y,o)).toVar(),l=Hi(1e6).toVar();return Xc({start:-1,end:Wi(1),name:"x",condition:"<="},(({x:e})=>{Xc({start:-1,end:Wi(1),name:"y",condition:"<="},(({y:t})=>{const r=Hi(MT(u,e,t,a,o,i,s)).toVar();l.assign(xo(l,r))}))})),Gi(s.equal(Wi(0)),(()=>{l.assign(Wa(l))})),l})).setLayout({name:"mx_worley_noise_float_0",type:"float",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),LT=Ui((([e,t,r])=>{const s=Wi(r).toVar(),i=Hi(t).toVar(),n=Xi(e).toVar(),a=Wi().toVar(),o=Wi().toVar(),u=Xi(rT(n.x,a),rT(n.y,o)).toVar(),l=Xi(1e6,1e6).toVar();return Xc({start:-1,end:Wi(1),name:"x",condition:"<="},(({x:e})=>{Xc({start:-1,end:Wi(1),name:"y",condition:"<="},(({y:t})=>{const r=Hi(MT(u,e,t,a,o,i,s)).toVar();Gi(r.lessThan(l.x),(()=>{l.y.assign(l.x),l.x.assign(r)})).ElseIf(r.lessThan(l.y),(()=>{l.y.assign(r)}))}))})),Gi(s.equal(Wi(0)),(()=>{l.assign(Wa(l))})),l})).setLayout({name:"mx_worley_noise_vec2_0",type:"vec2",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),FT=Ui((([e,t,r])=>{const s=Wi(r).toVar(),i=Hi(t).toVar(),n=Xi(e).toVar(),a=Wi().toVar(),o=Wi().toVar(),u=Xi(rT(n.x,a),rT(n.y,o)).toVar(),l=Zi(1e6,1e6,1e6).toVar();return Xc({start:-1,end:Wi(1),name:"x",condition:"<="},(({x:e})=>{Xc({start:-1,end:Wi(1),name:"y",condition:"<="},(({y:t})=>{const r=Hi(MT(u,e,t,a,o,i,s)).toVar();Gi(r.lessThan(l.x),(()=>{l.z.assign(l.y),l.y.assign(l.x),l.x.assign(r)})).ElseIf(r.lessThan(l.y),(()=>{l.z.assign(l.y),l.y.assign(r)})).ElseIf(r.lessThan(l.z),(()=>{l.z.assign(r)}))}))})),Gi(s.equal(Wi(0)),(()=>{l.assign(Wa(l))})),l})).setLayout({name:"mx_worley_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),BT=Gf([PT,Ui((([e,t,r])=>{const s=Wi(r).toVar(),i=Hi(t).toVar(),n=Zi(e).toVar(),a=Wi().toVar(),o=Wi().toVar(),u=Wi().toVar(),l=Zi(rT(n.x,a),rT(n.y,o),rT(n.z,u)).toVar(),d=Hi(1e6).toVar();return Xc({start:-1,end:Wi(1),name:"x",condition:"<="},(({x:e})=>{Xc({start:-1,end:Wi(1),name:"y",condition:"<="},(({y:t})=>{Xc({start:-1,end:Wi(1),name:"z",condition:"<="},(({z:r})=>{const n=Hi(MT(l,e,t,r,a,o,u,i,s)).toVar();d.assign(xo(d,n))}))}))})),Gi(s.equal(Wi(0)),(()=>{d.assign(Wa(d))})),d})).setLayout({name:"mx_worley_noise_float_1",type:"float",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),DT=Gf([LT,Ui((([e,t,r])=>{const s=Wi(r).toVar(),i=Hi(t).toVar(),n=Zi(e).toVar(),a=Wi().toVar(),o=Wi().toVar(),u=Wi().toVar(),l=Zi(rT(n.x,a),rT(n.y,o),rT(n.z,u)).toVar(),d=Xi(1e6,1e6).toVar();return Xc({start:-1,end:Wi(1),name:"x",condition:"<="},(({x:e})=>{Xc({start:-1,end:Wi(1),name:"y",condition:"<="},(({y:t})=>{Xc({start:-1,end:Wi(1),name:"z",condition:"<="},(({z:r})=>{const n=Hi(MT(l,e,t,r,a,o,u,i,s)).toVar();Gi(n.lessThan(d.x),(()=>{d.y.assign(d.x),d.x.assign(n)})).ElseIf(n.lessThan(d.y),(()=>{d.y.assign(n)}))}))}))})),Gi(s.equal(Wi(0)),(()=>{d.assign(Wa(d))})),d})).setLayout({name:"mx_worley_noise_vec2_1",type:"vec2",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),IT=Gf([FT,Ui((([e,t,r])=>{const s=Wi(r).toVar(),i=Hi(t).toVar(),n=Zi(e).toVar(),a=Wi().toVar(),o=Wi().toVar(),u=Wi().toVar(),l=Zi(rT(n.x,a),rT(n.y,o),rT(n.z,u)).toVar(),d=Zi(1e6,1e6,1e6).toVar();return Xc({start:-1,end:Wi(1),name:"x",condition:"<="},(({x:e})=>{Xc({start:-1,end:Wi(1),name:"y",condition:"<="},(({y:t})=>{Xc({start:-1,end:Wi(1),name:"z",condition:"<="},(({z:r})=>{const n=Hi(MT(l,e,t,r,a,o,u,i,s)).toVar();Gi(n.lessThan(d.x),(()=>{d.z.assign(d.y),d.y.assign(d.x),d.x.assign(n)})).ElseIf(n.lessThan(d.y),(()=>{d.z.assign(d.y),d.y.assign(n)})).ElseIf(n.lessThan(d.z),(()=>{d.z.assign(n)}))}))}))})),Gi(s.equal(Wi(0)),(()=>{d.assign(Wa(d))})),d})).setLayout({name:"mx_worley_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),VT=Ui((([e])=>{const t=e.y,r=e.z,s=Zi().toVar();return Gi(t.lessThan(1e-4),(()=>{s.assign(Zi(r,r,r))})).Else((()=>{let i=e.x;i=i.sub(qa(i)).mul(6).toVar();const n=Wi(po(i)),a=i.sub(Hi(n)),o=r.mul(t.oneMinus()),u=r.mul(t.mul(a).oneMinus()),l=r.mul(t.mul(a.oneMinus()).oneMinus());Gi(n.equal(Wi(0)),(()=>{s.assign(Zi(r,l,o))})).ElseIf(n.equal(Wi(1)),(()=>{s.assign(Zi(u,r,o))})).ElseIf(n.equal(Wi(2)),(()=>{s.assign(Zi(o,r,l))})).ElseIf(n.equal(Wi(3)),(()=>{s.assign(Zi(o,u,r))})).ElseIf(n.equal(Wi(4)),(()=>{s.assign(Zi(l,o,r))})).Else((()=>{s.assign(Zi(r,o,u))}))})),s})).setLayout({name:"mx_hsvtorgb",type:"vec3",inputs:[{name:"hsv",type:"vec3"}]}),UT=Ui((([e])=>{const t=Zi(e).toVar(),r=Hi(t.x).toVar(),s=Hi(t.y).toVar(),i=Hi(t.z).toVar(),n=Hi(xo(r,xo(s,i))).toVar(),a=Hi(bo(r,bo(s,i))).toVar(),o=Hi(a.sub(n)).toVar(),u=Hi().toVar(),l=Hi().toVar(),d=Hi().toVar();return d.assign(a),Gi(a.greaterThan(0),(()=>{l.assign(o.div(a))})).Else((()=>{l.assign(0)})),Gi(l.lessThanEqual(0),(()=>{u.assign(0)})).Else((()=>{Gi(r.greaterThanEqual(a),(()=>{u.assign(s.sub(i).div(o))})).ElseIf(s.greaterThanEqual(a),(()=>{u.assign(na(2,i.sub(r).div(o)))})).Else((()=>{u.assign(na(4,r.sub(s).div(o)))})),u.mulAssign(1/6),Gi(u.lessThan(0),(()=>{u.addAssign(1)}))})),Zi(u,l,d)})).setLayout({name:"mx_rgbtohsv",type:"vec3",inputs:[{name:"c",type:"vec3"}]}),OT=Ui((([e])=>{const t=Zi(e).toVar(),r=tn(pa(t,Zi(.04045))).toVar(),s=Zi(t.div(12.92)).toVar(),i=Zi(Eo(bo(t.add(Zi(.055)),Zi(0)).div(1.055),Zi(2.4))).toVar();return Fo(s,i,r)})).setLayout({name:"mx_srgb_texture_to_lin_rec709",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),kT=(e,t)=>{e=Hi(e),t=Hi(t);const r=Xi(t.dFdx(),t.dFdy()).length().mul(.7071067811865476);return Vo(e.sub(r),e.add(r),t)},GT=(e,t,r,s)=>Fo(e,t,r[s].clamp()),zT=(e,t,r,s,i)=>Fo(e,t,kT(r,s[i])),$T=Ui((([e,t,r])=>{const s=Ka(e).toVar(),i=aa(Hi(.5).mul(t.sub(r)),Vl).div(s).toVar(),n=aa(Hi(-.5).mul(t.sub(r)),Vl).div(s).toVar(),a=Zi().toVar();a.x=s.x.greaterThan(Hi(0)).select(i.x,n.x),a.y=s.y.greaterThan(Hi(0)).select(i.y,n.y),a.z=s.z.greaterThan(Hi(0)).select(i.z,n.z);const o=xo(xo(a.x,a.y),a.z).toVar();return Vl.add(s.mul(o)).toVar().sub(r)})),HT=Ui((([e,t])=>{const r=e.x,s=e.y,i=e.z;let n=t.element(0).mul(.886227);return n=n.add(t.element(1).mul(1.023328).mul(s)),n=n.add(t.element(2).mul(1.023328).mul(i)),n=n.add(t.element(3).mul(1.023328).mul(r)),n=n.add(t.element(4).mul(.858086).mul(r).mul(s)),n=n.add(t.element(5).mul(.858086).mul(s).mul(i)),n=n.add(t.element(6).mul(i.mul(i).mul(.743125).sub(.247708))),n=n.add(t.element(7).mul(.858086).mul(r).mul(i)),n=n.add(t.element(8).mul(.429043).mul(oa(r,r).sub(oa(s,s)))),n}));var WT=Object.freeze({__proto__:null,BRDF_GGX:Mp,BRDF_Lambert:mp,BasicPointShadowFilter:Ob,BasicShadowFilter:_b,Break:Kc,Const:eu,Continue:()=>Iu("continue").toStack(),DFGApprox:Pp,D_GGX:Ap,Discard:Vu,EPSILON:Fa,F_Schlick:gp,Fn:Ui,INFINITY:Ba,If:Gi,Loop:Xc,NodeAccess:Us,NodeShaderStage:Ds,NodeType:Vs,NodeUpdateType:Is,PCFShadowFilter:vb,PCFSoftShadowFilter:Nb,PI:Da,PI2:Ia,PointShadowFilter:kb,Return:()=>Iu("return").toStack(),Schlick_to_F0:Fp,ScriptableNodeResources:Rx,ShaderNode:Pi,Stack:zi,Switch:(...e)=>si.Switch(...e),TBNViewMatrix:Md,VSMShadowFilter:Sb,V_GGX_SmithCorrelated:wp,Var:Jo,abs:so,acesFilmicToneMapping:gx,acos:to,add:na,addMethodChaining:ni,addNodeElement:function(e){console.warn("THREE.TSL: AddNodeElement has been removed in favor of tree-shaking. Trying add",e)},agxToneMapping:xx,all:Va,alphaT:En,and:fa,anisotropy:An,anisotropyB:Cn,anisotropyT:Rn,any:Ua,append:e=>(console.warn("THREE.TSL: append() has been renamed to Stack()."),zi(e)),array:Zn,arrayBuffer:e=>Li(new ti(e,"ArrayBuffer")),asin:eo,assign:ea,atan:ro,atan2:zo,atomicAdd:(e,t)=>Qx(Kx.ATOMIC_ADD,e,t),atomicAnd:(e,t)=>Qx(Kx.ATOMIC_AND,e,t),atomicFunc:Qx,atomicLoad:e=>Qx(Kx.ATOMIC_LOAD,e,null),atomicMax:(e,t)=>Qx(Kx.ATOMIC_MAX,e,t),atomicMin:(e,t)=>Qx(Kx.ATOMIC_MIN,e,t),atomicOr:(e,t)=>Qx(Kx.ATOMIC_OR,e,t),atomicStore:(e,t)=>Qx(Kx.ATOMIC_STORE,e,t),atomicSub:(e,t)=>Qx(Kx.ATOMIC_SUB,e,t),atomicXor:(e,t)=>Qx(Kx.ATOMIC_XOR,e,t),attenuationColor:Gn,attenuationDistance:kn,attribute:$u,attributeArray:(e,t="float")=>{let r,s;!0===t.isStruct?(r=t.layout.getLength(),s=As("float")):(r=Rs(t),s=As(t));const i=new Ey(e,r,s);return $c(i,t,e)},backgroundBlurriness:Ly,backgroundIntensity:Fy,backgroundRotation:By,batch:Oc,billboarding:qf,bitAnd:Ta,bitNot:_a,bitOr:va,bitXor:Na,bitangentGeometry:Sd,bitangentLocal:wd,bitangentView:Ed,bitangentWorld:Ad,bitcast:fo,blendBurn:jy,blendColor:Yy,blendDodge:qy,blendOverlay:Ky,blendScreen:Xy,blur:Lg,bool:qi,buffer:Ju,bufferAttribute:vu,bumpMap:Od,burn:(...e)=>(console.warn('THREE.TSL: "burn" has been renamed. Use "blendBurn" instead.'),jy(e)),bvec2:Qi,bvec3:tn,bvec4:an,bypass:Pu,cache:Cu,call:ra,cameraFar:al,cameraIndex:il,cameraNear:nl,cameraNormalMatrix:cl,cameraPosition:hl,cameraProjectionMatrix:ol,cameraProjectionMatrixInverse:ul,cameraViewMatrix:ll,cameraWorldMatrix:dl,cbrt:Po,cdl:rx,ceil:Xa,checker:Qb,cineonToneMapping:hx,clamp:Bo,clearcoat:bn,clearcoatRoughness:Tn,code:_x,color:$i,colorSpaceToWorking:pu,colorToDirection:e=>Li(e).mul(2).sub(1),compute:Au,computeSkinning:(e,t=null)=>{const r=new Wc(e);return r.positionNode=$c(new M(e.geometry.getAttribute("position").array,3),"vec3").setPBO(!0).toReadOnly().element(Cc).toVar(),r.skinIndexNode=$c(new M(new Uint32Array(e.geometry.getAttribute("skinIndex").array),4),"uvec4").setPBO(!0).toReadOnly().element(Cc).toVar(),r.skinWeightNode=$c(new M(e.geometry.getAttribute("skinWeight").array,4),"vec4").setPBO(!0).toReadOnly().element(Cc).toVar(),r.bindMatrixNode=Yn(e.bindMatrix,"mat4"),r.bindMatrixInverseNode=Yn(e.bindMatrixInverse,"mat4"),r.boneMatricesNode=Ju(e.skeleton.boneMatrices,"mat4",e.skeleton.bones.length),r.toPositionNode=t,Li(r)},cond:qo,context:Ko,convert:cn,convertColorSpace:(e,t,r)=>Li(new lu(Li(e),t,r)),convertToTexture:(e,...t)=>e.isTextureNode?e:e.isPassNode?e.getTextureNode():_y(e,...t),cos:Za,cross:wo,cubeTexture:dd,cubeToUV:Ub,dFdx:uo,dFdy:lo,dashSize:Bn,debug:Gu,decrement:Ca,decrementBefore:Aa,defaultBuildStages:ks,defaultShaderStages:Os,defined:Ci,degrees:ka,deltaTime:$f,densityFog:function(e,t){return console.warn('THREE.TSL: "densityFog( color, density )" is deprecated. Use "fog( color, densityFogFactor( density ) )" instead.'),Bx(e,Fx(t))},densityFogFactor:Fx,depth:Lh,depthPass:(e,t,r)=>Li(new ux(ux.DEPTH,e,t,r)),difference:No,diffuseColor:mn,directPointLight:Kb,directionToColor:Qh,dispersion:zn,distance:vo,div:ua,dodge:(...e)=>(console.warn('THREE.TSL: "dodge" has been renamed. Use "blendDodge" instead.'),qy(e)),dot:So,drawIndex:Fc,dynamicBufferAttribute:Nu,element:dn,emissive:fn,equal:da,equals:yo,equirectUV:tp,exp:Ga,exp2:za,expression:Iu,faceDirection:$l,faceForward:Uo,faceforward:$o,float:Hi,floor:qa,fog:Bx,fract:Ya,frameGroup:jn,frameId:Hf,frontFacing:zl,fwidth:go,gain:(e,t)=>e.lessThan(.5)?Df(e.mul(2),t).div(2):aa(1,Df(oa(aa(1,e),2),t).div(2)),gapSize:Dn,getConstNodeType:Mi,getCurrentStack:ki,getDirection:Rg,getDistanceAttenuation:Xb,getGeometryRoughness:Np,getNormalFromDepth:Sy,getParallaxCorrectNormal:$T,getRoughness:Sp,getScreenPosition:Ny,getShIrradianceAt:HT,getShadowMaterial:Eb,getShadowRenderObjectFunction:Cb,getTextureIndex:Pf,getViewPosition:vy,globalId:$x,glsl:(e,t)=>_x(e,t,"glsl"),glslFn:(e,t)=>Nx(e,t,"glsl"),grayscale:Qy,greaterThan:pa,greaterThanEqual:ma,hash:Bf,highpModelNormalViewMatrix:Fl,highpModelViewMatrix:Ll,hue:ex,increment:Ra,incrementBefore:Ea,instance:Dc,instanceIndex:Cc,instancedArray:(e,t="float")=>{let r,s;!0===t.isStruct?(r=t.layout.getLength(),s=As("float")):(r=Rs(t),s=As(t));const i=new wy(e,r,s);return $c(i,t,e)},instancedBufferAttribute:Su,instancedDynamicBufferAttribute:wu,instancedMesh:Vc,int:Wi,inverseSqrt:ja,inversesqrt:Ho,invocationLocalIndex:Lc,invocationSubgroupIndex:Pc,ior:Vn,iridescence:Nn,iridescenceIOR:Sn,iridescenceThickness:wn,ivec2:Ki,ivec3:Ji,ivec4:sn,js:(e,t)=>_x(e,t,"js"),label:Yo,length:no,lengthSq:Lo,lessThan:ha,lessThanEqual:ga,lightPosition:rb,lightProjectionUV:tb,lightShadowMatrix:eb,lightTargetDirection:nb,lightTargetPosition:sb,lightViewPosition:ib,lightingContext:ih,lights:(e=[])=>Li(new ub).setLights(e),linearDepth:Fh,linearToneMapping:dx,localId:Hx,log:$a,log2:Ha,logarithmicDepthToViewZ:(e,t,r)=>{const s=e.mul($a(r.div(t)));return Hi(Math.E).pow(s).mul(t).negate()},loop:(...e)=>(console.warn("THREE.TSL: loop() has been renamed to Loop()."),Xc(...e)),luminance:tx,mat2:on,mat3:un,mat4:ln,matcapUV:Tm,materialAO:Sc,materialAlphaTest:zd,materialAnisotropy:oc,materialAnisotropyVector:wc,materialAttenuationColor:mc,materialAttenuationDistance:gc,materialClearcoat:tc,materialClearcoatNormal:sc,materialClearcoatRoughness:rc,materialColor:$d,materialDispersion:vc,materialEmissive:Wd,materialEnvIntensity:sd,materialEnvRotation:id,materialIOR:pc,materialIridescence:uc,materialIridescenceIOR:lc,materialIridescenceThickness:dc,materialLightMap:Nc,materialLineDashOffset:Tc,materialLineDashSize:yc,materialLineGapSize:xc,materialLineScale:fc,materialLineWidth:bc,materialMetalness:Jd,materialNormal:ec,materialOpacity:jd,materialPointSize:_c,materialReference:fd,materialReflectivity:Qd,materialRefractionRatio:rd,materialRotation:ic,materialRoughness:Zd,materialSheen:nc,materialSheenRoughness:ac,materialShininess:Hd,materialSpecular:qd,materialSpecularColor:Kd,materialSpecularIntensity:Xd,materialSpecularStrength:Yd,materialThickness:hc,materialTransmission:cc,max:bo,maxMipLevel:Xu,mediumpModelViewMatrix:Pl,metalness:xn,min:xo,mix:Fo,mixElement:ko,mod:la,modInt:Pa,modelDirection:vl,modelNormalMatrix:Rl,modelPosition:Sl,modelRadius:Al,modelScale:wl,modelViewMatrix:Ml,modelViewPosition:El,modelViewProjection:Ec,modelWorldMatrix:Nl,modelWorldMatrixInverse:Cl,morphReference:eh,mrt:Ff,mul:oa,mx_aastep:kT,mx_cell_noise_float:(e=Hu())=>ST(e.convert("vec2|vec3")),mx_contrast:(e,t=1,r=.5)=>Hi(e).sub(r).mul(t).add(r),mx_fractal_noise_float:(e=Hu(),t=3,r=2,s=.5,i=1)=>ET(e,Wi(t),r,s).mul(i),mx_fractal_noise_vec2:(e=Hu(),t=3,r=2,s=.5,i=1)=>RT(e,Wi(t),r,s).mul(i),mx_fractal_noise_vec3:(e=Hu(),t=3,r=2,s=.5,i=1)=>AT(e,Wi(t),r,s).mul(i),mx_fractal_noise_vec4:(e=Hu(),t=3,r=2,s=.5,i=1)=>CT(e,Wi(t),r,s).mul(i),mx_hsvtorgb:VT,mx_noise_float:(e=Hu(),t=1,r=0)=>vT(e.convert("vec2|vec3")).mul(t).add(r),mx_noise_vec3:(e=Hu(),t=1,r=0)=>NT(e.convert("vec2|vec3")).mul(t).add(r),mx_noise_vec4:(e=Hu(),t=1,r=0)=>{e=e.convert("vec2|vec3");return rn(NT(e),vT(e.add(Xi(19,73)))).mul(t).add(r)},mx_ramplr:(e,t,r=Hu())=>GT(e,t,r,"x"),mx_ramptb:(e,t,r=Hu())=>GT(e,t,r,"y"),mx_rgbtohsv:UT,mx_safepower:(e,t=1)=>(e=Hi(e)).abs().pow(t).mul(e.sign()),mx_splitlr:(e,t,r,s=Hu())=>zT(e,t,r,s,"x"),mx_splittb:(e,t,r,s=Hu())=>zT(e,t,r,s,"y"),mx_srgb_texture_to_lin_rec709:OT,mx_transform_uv:(e=1,t=0,r=Hu())=>r.mul(e).add(t),mx_worley_noise_float:(e=Hu(),t=1)=>BT(e.convert("vec2|vec3"),t,Wi(1)),mx_worley_noise_vec2:(e=Hu(),t=1)=>DT(e.convert("vec2|vec3"),t,Wi(1)),mx_worley_noise_vec3:(e=Hu(),t=1)=>IT(e.convert("vec2|vec3"),t,Wi(1)),negate:ao,neutralToneMapping:bx,nodeArray:Bi,nodeImmutable:Ii,nodeObject:Li,nodeObjects:Fi,nodeProxy:Di,normalFlat:jl,normalGeometry:Hl,normalLocal:Wl,normalMap:Dd,normalView:ql,normalWorld:Xl,normalize:Ka,not:xa,notEqual:ca,numWorkgroups:Gx,objectDirection:ml,objectGroup:Xn,objectPosition:yl,objectRadius:Tl,objectScale:xl,objectViewPosition:bl,objectWorldMatrix:fl,oneMinus:oo,or:ya,orthographicDepthToViewZ:(e,t,r)=>t.sub(r).mul(e).sub(t),oscSawtooth:(e=zf)=>e.fract(),oscSine:(e=zf)=>e.add(.75).mul(2*Math.PI).sin().mul(.5).add(.5),oscSquare:(e=zf)=>e.fract().round(),oscTriangle:(e=zf)=>e.add(.5).fract().mul(2).sub(1).abs(),output:Fn,outputStruct:Mf,overlay:(...e)=>(console.warn('THREE.TSL: "overlay" has been renamed. Use "blendOverlay" instead.'),Ky(e)),overloadingFn:Gf,parabola:Df,parallaxDirection:Pd,parallaxUV:(e,t)=>e.sub(Pd.mul(t)),parameter:(e,t)=>Li(new Sf(e,t)),pass:(e,t,r)=>Li(new ux(ux.COLOR,e,t,r)),passTexture:(e,t)=>Li(new ax(e,t)),pcurve:(e,t,r)=>Eo(ua(Eo(e,t),na(Eo(e,t),Eo(aa(1,e),r))),1/t),perspectiveDepthToViewZ:Ch,pmremTexture:im,pointShadow:jb,pointUV:Ry,pointWidth:In,positionGeometry:Bl,positionLocal:Dl,positionPrevious:Il,positionView:Ol,positionViewDirection:kl,positionWorld:Vl,positionWorldDirection:Ul,posterize:ix,pow:Eo,pow2:Ao,pow3:Ro,pow4:Co,property:pn,radians:Oa,rand:Oo,range:Ux,rangeFog:function(e,t,r){return console.warn('THREE.TSL: "rangeFog( color, near, far )" is deprecated. Use "fog( color, rangeFogFactor( near, far ) )" instead.'),Bx(e,Lx(t,r))},rangeFogFactor:Lx,reciprocal:ho,reference:pd,referenceBuffer:gd,reflect:_o,reflectVector:od,reflectView:nd,reflector:e=>Li(new py(e)),refract:Io,refractVector:ud,refractView:ad,reinhardToneMapping:cx,remainder:Ma,remap:Fu,remapClamp:Bu,renderGroup:qn,renderOutput:Ou,rendererReference:yu,rotate:Sm,rotateUV:Wf,roughness:yn,round:co,rtt:_y,sRGBTransferEOTF:nu,sRGBTransferOETF:au,sampler:e=>(!0===e.isNode?e:Yu(e)).convert("sampler"),samplerComparison:e=>(!0===e.isNode?e:Yu(e)).convert("samplerComparison"),saturate:Do,saturation:Zy,screen:(...e)=>(console.warn('THREE.TSL: "screen" has been renamed. Use "blendScreen" instead.'),Xy(e)),screenCoordinate:ch,screenSize:dh,screenUV:lh,scriptable:Mx,scriptableValue:wx,select:jo,setCurrentStack:Oi,shaderStages:Gs,shadow:Ib,shadowPositionWorld:db,shapeCircle:Zb,sharedUniformGroup:Wn,sheen:_n,sheenRoughness:vn,shiftLeft:Sa,shiftRight:wa,shininess:Ln,sign:io,sin:Qa,sinc:(e,t)=>Qa(Da.mul(t.mul(e).sub(1))).div(Da.mul(t.mul(e).sub(1))),skinning:jc,smoothstep:Vo,smoothstepElement:Go,specularColor:Mn,specularF90:Pn,spherizeUV:jf,split:(e,t)=>Li(new Ys(Li(e),t)),spritesheetUV:Yf,sqrt:Wa,stack:Ef,step:To,storage:$c,storageBarrier:()=>jx("storage").toStack(),storageObject:(e,t,r)=>(console.warn('THREE.TSL: "storageObject()" is deprecated. Use "storage().setPBO( true )" instead.'),$c(e,t,r).setPBO(!0)),storageTexture:Iy,string:(e="")=>Li(new ti(e,"string")),struct:(e,t=null)=>{const r=new Af(e,t),s=(...t)=>{let s=null;if(t.length>0)if(t[0].isNode){s={};const r=Object.keys(e);for(let e=0;e<t.length;e++)s[r[e]]=t[e]}else s=t[0];return Li(new Rf(r,s))};return s.layout=r,s.isStruct=!0,s},sub:aa,subgroupIndex:Mc,subgroupSize:Wx,tan:Ja,tangentGeometry:yd,tangentLocal:xd,tangentView:bd,tangentWorld:Td,temp:tu,texture:Yu,texture3D:Oy,textureBarrier:()=>jx("texture").toStack(),textureBicubic:Zp,textureCubeUV:Cg,textureLoad:Qu,textureSize:ju,textureStore:(e,t,r)=>{const s=Iy(e,t,r);return null!==r&&s.toStack(),s},thickness:On,time:zf,timerDelta:(e=1)=>(console.warn('TSL: timerDelta() is deprecated. Use "deltaTime" instead.'),$f.mul(e)),timerGlobal:(e=1)=>(console.warn('TSL: timerGlobal() is deprecated. Use "time" instead.'),zf.mul(e)),timerLocal:(e=1)=>(console.warn('TSL: timerLocal() is deprecated. Use "time" instead.'),zf.mul(e)),toOutputColorSpace:du,toWorkingColorSpace:cu,toneMapping:bu,toneMappingExposure:Tu,toonOutlinePass:(t,r,s=new e(0,0,0),i=.003,n=1)=>Li(new lx(t,r,Li(s),Li(i),Li(n))),transformDirection:Mo,transformNormal:Zl,transformNormalToView:Jl,transformedBentNormalView:Ld,transformedBitangentView:Rd,transformedBitangentWorld:Cd,transformedClearcoatNormalView:Ql,transformedNormalView:Kl,transformedNormalWorld:Yl,transformedTangentView:_d,transformedTangentWorld:vd,transmission:Un,transpose:mo,triNoise3D:Uf,triplanarTexture:(...e)=>Zf(...e),triplanarTextures:Zf,trunc:po,tslFn:(...e)=>(console.warn("THREE.TSL: tslFn() has been renamed to Fn()."),Ui(...e)),uint:ji,uniform:Yn,uniformArray:rl,uniformGroup:Hn,uniforms:(e,t)=>(console.warn("THREE.TSL: uniforms() has been renamed to uniformArray()."),Li(new tl(e,t))),userData:(e,t,r)=>Li(new ky(e,t,r)),uv:Hu,uvec2:Yi,uvec3:en,uvec4:nn,varying:su,varyingProperty:gn,vec2:Xi,vec3:Zi,vec4:rn,vectorComponents:zs,velocity:Wy,vertexColor:kh,vertexIndex:Rc,vertexStage:iu,vibrance:Jy,viewZToLogarithmicDepth:Mh,viewZToOrthographicDepth:Ah,viewZToPerspectiveDepth:Rh,viewport:hh,viewportBottomLeft:xh,viewportCoordinate:gh,viewportDepthTexture:wh,viewportLinearDepth:Bh,viewportMipTexture:vh,viewportResolution:fh,viewportSafeUV:Xf,viewportSharedTexture:Xh,viewportSize:ph,viewportTexture:_h,viewportTopLeft:yh,viewportUV:mh,wgsl:(e,t)=>_x(e,t,"wgsl"),wgslFn:(e,t)=>Nx(e,t,"wgsl"),workgroupArray:(e,t)=>Li(new Xx("Workgroup",e,t)),workgroupBarrier:()=>jx("workgroup").toStack(),workgroupId:zx,workingToColorSpace:hu,xor:ba});const jT=new Nf;class qT extends $m{constructor(e,t){super(),this.renderer=e,this.nodes=t}update(e,t,r){const s=this.renderer,i=this.nodes.getBackgroundNode(e)||e.background;let n=!1;if(null===i)s._clearColor.getRGB(jT),jT.a=s._clearColor.a;else if(!0===i.isColor)i.getRGB(jT),jT.a=1,n=!0;else if(!0===i.isNode){const o=this.get(e),u=i;jT.copy(s._clearColor);let l=o.backgroundMesh;if(void 0===l){const c=Ko(rn(u).mul(Fy),{getUV:()=>By.mul(Xl),getTextureLevel:()=>Ly});let h=Ec;h=h.setZ(h.w);const p=new Gh;function g(){i.removeEventListener("dispose",g),l.material.dispose(),l.geometry.dispose()}p.name="Background.material",p.side=N,p.depthTest=!1,p.depthWrite=!1,p.allowOverride=!1,p.fog=!1,p.lights=!1,p.vertexNode=h,p.colorNode=c,o.backgroundMeshNode=c,o.backgroundMesh=l=new W(new ke(1,32,32),p),l.frustumCulled=!1,l.name="Background.mesh",l.onBeforeRender=function(e,t,r){this.matrixWorld.copyPosition(r.matrixWorld)},i.addEventListener("dispose",g)}const d=u.getCacheKey();o.backgroundCacheKey!==d&&(o.backgroundMeshNode.node=rn(u).mul(Fy),o.backgroundMeshNode.needsUpdate=!0,l.material.needsUpdate=!0,o.backgroundCacheKey=d),t.unshift(l,l.geometry,l.material,0,0,null,null)}else console.error("THREE.Renderer: Unsupported background configuration.",i);const a=s.xr.getEnvironmentBlendMode();if("additive"===a?jT.set(0,0,0,1):"alpha-blend"===a&&jT.set(0,0,0,0),!0===s.autoClear||!0===n){const m=r.clearColorValue;m.r=jT.r,m.g=jT.g,m.b=jT.b,m.a=jT.a,!0!==s.backend.isWebGLBackend&&!0!==s.alpha||(m.r*=m.a,m.g*=m.a,m.b*=m.a),r.depthClearValue=s._clearDepth,r.stencilClearValue=s._clearStencil,r.clearColor=!0===s.autoClearColor,r.clearDepth=!0===s.autoClearDepth,r.clearStencil=!0===s.autoClearStencil}else r.clearColor=!1,r.clearDepth=!1,r.clearStencil=!1}}let XT=0;class KT{constructor(e="",t=[],r=0,s=[]){this.name=e,this.bindings=t,this.index=r,this.bindingsReference=s,this.id=XT++}}class YT{constructor(e,t,r,s,i,n,a,o,u,l=[]){this.vertexShader=e,this.fragmentShader=t,this.computeShader=r,this.transforms=l,this.nodeAttributes=s,this.bindings=i,this.updateNodes=n,this.updateBeforeNodes=a,this.updateAfterNodes=o,this.observer=u,this.usedTimes=0}createBindings(){const e=[];for(const t of this.bindings){if(!0!==t.bindings[0].groupNode.shared){const r=new KT(t.name,[],t.index,t);e.push(r);for(const e of t.bindings)r.bindings.push(e.clone())}else e.push(t)}return e}}class QT{constructor(e,t,r=null){this.isNodeAttribute=!0,this.name=e,this.type=t,this.node=r}}class ZT{constructor(e,t,r){this.isNodeUniform=!0,this.name=e,this.type=t,this.node=r.getSelf()}get value(){return this.node.value}set value(e){this.node.value=e}get id(){return this.node.id}get groupNode(){return this.node.groupNode}}class JT{constructor(e,t,r=!1,s=null){this.isNodeVar=!0,this.name=e,this.type=t,this.readOnly=r,this.count=s}}class e_ extends JT{constructor(e,t,r=null,s=null){super(e,t),this.needsInterpolation=!1,this.isNodeVarying=!0,this.interpolationType=r,this.interpolationSampling=s}}class t_{constructor(e,t,r=""){this.name=e,this.type=t,this.code=r,Object.defineProperty(this,"isNodeCode",{value:!0})}}let r_=0;class s_{constructor(e=null){this.id=r_++,this.nodesData=new WeakMap,this.parent=e}getData(e){let t=this.nodesData.get(e);return void 0===t&&null!==this.parent&&(t=this.parent.getData(e)),t}setData(e,t){this.nodesData.set(e,t)}}class i_{constructor(e,t){this.name=e,this.members=t,this.output=!1}}class n_{constructor(e,t){this.name=e,this.value=t,this.boundary=0,this.itemSize=0,this.offset=0}setValue(e){this.value=e}getValue(){return this.value}}class a_ extends n_{constructor(e,t=0){super(e,t),this.isNumberUniform=!0,this.boundary=4,this.itemSize=1}}class o_ extends n_{constructor(e,r=new t){super(e,r),this.isVector2Uniform=!0,this.boundary=8,this.itemSize=2}}class u_ extends n_{constructor(e,t=new r){super(e,t),this.isVector3Uniform=!0,this.boundary=16,this.itemSize=3}}class l_ extends n_{constructor(e,t=new s){super(e,t),this.isVector4Uniform=!0,this.boundary=16,this.itemSize=4}}class d_ extends n_{constructor(t,r=new e){super(t,r),this.isColorUniform=!0,this.boundary=16,this.itemSize=3}}class c_ extends n_{constructor(e,t=new i){super(e,t),this.isMatrix2Uniform=!0,this.boundary=16,this.itemSize=4}}class h_ extends n_{constructor(e,t=new n){super(e,t),this.isMatrix3Uniform=!0,this.boundary=48,this.itemSize=12}}class p_ extends n_{constructor(e,t=new a){super(e,t),this.isMatrix4Uniform=!0,this.boundary=64,this.itemSize=16}}class g_ extends a_{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class m_ extends o_{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class f_ extends u_{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class y_ extends l_{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class x_ extends d_{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class b_ extends c_{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class T_ extends h_{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class __ extends p_{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}const v_=new WeakMap,N_=new Map([[Int8Array,"int"],[Int16Array,"int"],[Int32Array,"int"],[Uint8Array,"uint"],[Uint16Array,"uint"],[Uint32Array,"uint"],[Float32Array,"float"]]),S_=e=>/e/g.test(e)?String(e).replace(/\+/g,""):(e=Number(e))+(e%1?"":".0");class w_{constructor(e,t,r){this.object=e,this.material=e&&e.material||null,this.geometry=e&&e.geometry||null,this.renderer=t,this.parser=r,this.scene=null,this.camera=null,this.nodes=[],this.sequentialNodes=[],this.updateNodes=[],this.updateBeforeNodes=[],this.updateAfterNodes=[],this.hashNodes={},this.observer=null,this.lightsNode=null,this.environmentNode=null,this.fogNode=null,this.clippingContext=null,this.vertexShader=null,this.fragmentShader=null,this.computeShader=null,this.flowNodes={vertex:[],fragment:[],compute:[]},this.flowCode={vertex:"",fragment:"",compute:""},this.uniforms={vertex:[],fragment:[],compute:[],index:0},this.structs={vertex:[],fragment:[],compute:[],index:0},this.bindings={vertex:{},fragment:{},compute:{}},this.bindingsIndexes={},this.bindGroups=null,this.attributes=[],this.bufferAttributes=[],this.varyings=[],this.codes={},this.vars={},this.declarations={},this.flow={code:""},this.chaining=[],this.stack=Ef(),this.stacks=[],this.tab="\t",this.currentFunctionNode=null,this.context={material:this.material},this.cache=new s_,this.globalCache=this.cache,this.flowsData=new WeakMap,this.shaderStage=null,this.buildStage=null}getBindGroupsCache(){let e=v_.get(this.renderer);return void 0===e&&(e=new Um,v_.set(this.renderer,e)),e}createRenderTarget(e,t,r){return new ae(e,t,r)}createRenderTargetArray(e,t,r,s){return new Ge(e,t,r,s)}createCubeRenderTarget(e,t){return new rp(e,t)}includes(e){return this.nodes.includes(e)}getOutputStructName(){}_getBindGroup(e,t){const r=this.getBindGroupsCache(),s=[];let i,n=!0;for(const e of t)s.push(e),n=n&&!0!==e.groupNode.shared;return n?(i=r.get(s),void 0===i&&(i=new KT(e,s,this.bindingsIndexes[e].group,s),r.set(s,i))):i=new KT(e,s,this.bindingsIndexes[e].group,s),i}getBindGroupArray(e,t){const r=this.bindings[t];let s=r[e];return void 0===s&&(void 0===this.bindingsIndexes[e]&&(this.bindingsIndexes[e]={binding:0,group:Object.keys(this.bindingsIndexes).length}),r[e]=s=[]),s}getBindings(){let e=this.bindGroups;if(null===e){const t={},r=this.bindings;for(const e of Gs)for(const s in r[e]){const i=r[e][s];(t[s]||(t[s]=[])).push(...i)}e=[];for(const r in t){const s=t[r],i=this._getBindGroup(r,s);e.push(i)}this.bindGroups=e}return e}sortBindingGroups(){const e=this.getBindings();e.sort(((e,t)=>e.bindings[0].groupNode.order-t.bindings[0].groupNode.order));for(let t=0;t<e.length;t++){const r=e[t];this.bindingsIndexes[r.name].group=t,r.index=t}}setHashNode(e,t){this.hashNodes[t]=e}addNode(e){!1===this.nodes.includes(e)&&(this.nodes.push(e),this.setHashNode(e,e.getHash(this)))}addSequentialNode(e){!1===this.sequentialNodes.includes(e)&&this.sequentialNodes.push(e)}buildUpdateNodes(){for(const e of this.nodes){e.getUpdateType()!==Is.NONE&&this.updateNodes.push(e.getSelf())}for(const e of this.sequentialNodes){const t=e.getUpdateBeforeType(),r=e.getUpdateAfterType();t!==Is.NONE&&this.updateBeforeNodes.push(e.getSelf()),r!==Is.NONE&&this.updateAfterNodes.push(e.getSelf())}}get currentNode(){return this.chaining[this.chaining.length-1]}isFilteredTexture(e){return e.magFilter===q||e.magFilter===ze||e.magFilter===$e||e.magFilter===B||e.minFilter===q||e.minFilter===ze||e.minFilter===$e||e.minFilter===B}addChain(e){this.chaining.push(e)}removeChain(e){if(this.chaining.pop()!==e)throw new Error("NodeBuilder: Invalid node chaining!")}getMethod(e){return e}getNodeFromHash(e){return this.hashNodes[e]}addFlow(e,t){return this.flowNodes[e].push(t),t}setContext(e){this.context=e}getContext(){return this.context}getSharedContext(){return this.context,this.context}setCache(e){this.cache=e}getCache(){return this.cache}getCacheFromNode(e,t=!0){const r=this.getDataFromNode(e);return void 0===r.cache&&(r.cache=new s_(t?this.getCache():null)),r.cache}isAvailable(){return!1}getVertexIndex(){console.warn("Abstract function.")}getInstanceIndex(){console.warn("Abstract function.")}getDrawIndex(){console.warn("Abstract function.")}getFrontFacing(){console.warn("Abstract function.")}getFragCoord(){console.warn("Abstract function.")}isFlipY(){return!1}increaseUsage(e){const t=this.getDataFromNode(e);return t.usageCount=void 0===t.usageCount?1:t.usageCount+1,t.usageCount}generateTexture(){console.warn("Abstract function.")}generateTextureLod(){console.warn("Abstract function.")}generateArrayDeclaration(e,t){return this.getType(e)+"[ "+t+" ]"}generateArray(e,t,r=null){let s=this.generateArrayDeclaration(e,t)+"( ";for(let i=0;i<t;i++){const n=r?r[i]:null;s+=null!==n?n.build(this,e):this.generateConst(e),i<t-1&&(s+=", ")}return s+=" )",s}generateStruct(e,t,r=null){const s=[];for(const e of t){const{name:t,type:i}=e;r&&r[t]&&r[t].isNode?s.push(r[t].build(this,i)):s.push(this.generateConst(i))}return e+"( "+s.join(", ")+" )"}generateConst(i,n=null){if(null===n&&("float"===i||"int"===i||"uint"===i?n=0:"bool"===i?n=!1:"color"===i?n=new e:"vec2"===i?n=new t:"vec3"===i?n=new r:"vec4"===i&&(n=new s)),"float"===i)return S_(n);if("int"===i)return`${Math.round(n)}`;if("uint"===i)return n>=0?`${Math.round(n)}u`:"0u";if("bool"===i)return n?"true":"false";if("color"===i)return`${this.getType("vec3")}( ${S_(n.r)}, ${S_(n.g)}, ${S_(n.b)} )`;const a=this.getTypeLength(i),o=this.getComponentType(i),u=e=>this.generateConst(o,e);if(2===a)return`${this.getType(i)}( ${u(n.x)}, ${u(n.y)} )`;if(3===a)return`${this.getType(i)}( ${u(n.x)}, ${u(n.y)}, ${u(n.z)} )`;if(4===a&&"mat2"!==i)return`${this.getType(i)}( ${u(n.x)}, ${u(n.y)}, ${u(n.z)}, ${u(n.w)} )`;if(a>=4&&n&&(n.isMatrix2||n.isMatrix3||n.isMatrix4))return`${this.getType(i)}( ${n.elements.map(u).join(", ")} )`;if(a>4)return`${this.getType(i)}()`;throw new Error(`NodeBuilder: Type '${i}' not found in generate constant attempt.`)}getType(e){return"color"===e?"vec3":e}hasGeometryAttribute(e){return this.geometry&&void 0!==this.geometry.getAttribute(e)}getAttribute(e,t){const r=this.attributes;for(const t of r)if(t.name===e)return t;const s=new QT(e,t);return this.registerDeclaration(s),r.push(s),s}getPropertyName(e){return e.name}isVector(e){return/vec\d/.test(e)}isMatrix(e){return/mat\d/.test(e)}isReference(e){return"void"===e||"property"===e||"sampler"===e||"samplerComparison"===e||"texture"===e||"cubeTexture"===e||"storageTexture"===e||"depthTexture"===e||"texture3D"===e}needsToWorkingColorSpace(){return!1}getComponentTypeFromTexture(e){const t=e.type;if(e.isDataTexture){if(t===T)return"int";if(t===b)return"uint"}return"float"}getElementType(e){return"mat2"===e?"vec2":"mat3"===e?"vec3":"mat4"===e?"vec4":this.getComponentType(e)}getComponentType(e){if("float"===(e=this.getVectorType(e))||"bool"===e||"int"===e||"uint"===e)return e;const t=/(b|i|u|)(vec|mat)([2-4])/.exec(e);return null===t?null:"b"===t[1]?"bool":"i"===t[1]?"int":"u"===t[1]?"uint":"float"}getVectorType(e){return"color"===e?"vec3":"texture"===e||"cubeTexture"===e||"storageTexture"===e||"texture3D"===e?"vec4":e}getTypeFromLength(e,t="float"){if(1===e)return t;let r=Es(e);const s="float"===t?"":t[0];return!0===/mat2/.test(t)&&(r=r.replace("vec","mat")),s+r}getTypeFromArray(e){return N_.get(e.constructor)}isInteger(e){return/int|uint|(i|u)vec/.test(e)}getTypeFromAttribute(e){let t=e;e.isInterleavedBufferAttribute&&(t=e.data);const r=t.array,s=e.itemSize,i=e.normalized;let n;return e instanceof He||!0===i||(n=this.getTypeFromArray(r)),this.getTypeFromLength(s,n)}getTypeLength(e){const t=this.getVectorType(e),r=/vec([2-4])/.exec(t);return null!==r?Number(r[1]):"float"===t||"bool"===t||"int"===t||"uint"===t?1:!0===/mat2/.test(e)?4:!0===/mat3/.test(e)?9:!0===/mat4/.test(e)?16:0}getVectorFromMatrix(e){return e.replace("mat","vec")}changeComponentType(e,t){return this.getTypeFromLength(this.getTypeLength(e),t)}getIntegerType(e){const t=this.getComponentType(e);return"int"===t||"uint"===t?e:this.changeComponentType(e,"int")}addStack(){return this.stack=Ef(this.stack),this.stacks.push(ki()||this.stack),Oi(this.stack),this.stack}removeStack(){const e=this.stack;return this.stack=e.parent,Oi(this.stacks.pop()),e}getDataFromNode(e,t=this.shaderStage,r=null){let s=(r=null===r?e.isGlobal(this)?this.globalCache:this.cache:r).getData(e);return void 0===s&&(s={},r.setData(e,s)),void 0===s[t]&&(s[t]={}),s[t]}getNodeProperties(e,t="any"){const r=this.getDataFromNode(e,t);return r.properties||(r.properties={outputNode:null})}getBufferAttributeFromNode(e,t){const r=this.getDataFromNode(e);let s=r.bufferAttribute;if(void 0===s){const i=this.uniforms.index++;s=new QT("nodeAttribute"+i,t,e),this.bufferAttributes.push(s),r.bufferAttribute=s}return s}getStructTypeFromNode(e,t,r=null,s=this.shaderStage){const i=this.getDataFromNode(e,s,this.globalCache);let n=i.structType;if(void 0===n){const e=this.structs.index++;null===r&&(r="StructType"+e),n=new i_(r,t),this.structs[s].push(n),i.structType=n}return n}getOutputStructTypeFromNode(e,t){const r=this.getStructTypeFromNode(e,t,"OutputType","fragment");return r.output=!0,r}getUniformFromNode(e,t,r=this.shaderStage,s=null){const i=this.getDataFromNode(e,r,this.globalCache);let n=i.uniform;if(void 0===n){const a=this.uniforms.index++;n=new ZT(s||"nodeUniform"+a,t,e),this.uniforms[r].push(n),this.registerDeclaration(n),i.uniform=n}return n}getArrayCount(e){let t=null;return e.isArrayNode?t=e.count:e.isVarNode&&e.node.isArrayNode&&(t=e.node.count),t}getVarFromNode(e,t=null,r=e.getNodeType(this),s=this.shaderStage,i=!1){const n=this.getDataFromNode(e,s);let a=n.variable;if(void 0===a){const o=i?"_const":"_var",u=this.vars[s]||(this.vars[s]=[]),l=this.vars[o]||(this.vars[o]=0);null===t&&(t=(i?"nodeConst":"nodeVar")+l,this.vars[o]++);const d=this.getArrayCount(e);a=new JT(t,r,i,d),i||u.push(a),this.registerDeclaration(a),n.variable=a}return a}isDeterministic(e){if(e.isMathNode)return this.isDeterministic(e.aNode)&&(!e.bNode||this.isDeterministic(e.bNode))&&(!e.cNode||this.isDeterministic(e.cNode));if(e.isOperatorNode)return this.isDeterministic(e.aNode)&&(!e.bNode||this.isDeterministic(e.bNode));if(e.isArrayNode){if(null!==e.values)for(const t of e.values)if(!this.isDeterministic(t))return!1;return!0}return!!e.isConstNode}getVaryingFromNode(e,t=null,r=e.getNodeType(this),s=null,i=null){const n=this.getDataFromNode(e,"any");let a=n.varying;if(void 0===a){const e=this.varyings,o=e.length;null===t&&(t="nodeVarying"+o),a=new e_(t,r,s,i),e.push(a),this.registerDeclaration(a),n.varying=a}return a}registerDeclaration(e){const t=this.shaderStage,r=this.declarations[t]||(this.declarations[t]={}),s=this.getPropertyName(e);let i=1,n=s;for(;void 0!==r[n];)n=s+"_"+i++;i>1&&(e.name=n,console.warn(`THREE.TSL: Declaration name '${s}' of '${e.type}' already in use. Renamed to '${n}'.`)),r[n]=e}getCodeFromNode(e,t,r=this.shaderStage){const s=this.getDataFromNode(e);let i=s.code;if(void 0===i){const e=this.codes[r]||(this.codes[r]=[]),n=e.length;i=new t_("nodeCode"+n,t),e.push(i),s.code=i}return i}addFlowCodeHierarchy(e,t){const{flowCodes:r,flowCodeBlock:s}=this.getDataFromNode(e);let i=!0,n=t;for(;n;){if(!0===s.get(n)){i=!1;break}n=this.getDataFromNode(n).parentNodeBlock}if(i)for(const e of r)this.addLineFlowCode(e)}addLineFlowCodeBlock(e,t,r){const s=this.getDataFromNode(e),i=s.flowCodes||(s.flowCodes=[]),n=s.flowCodeBlock||(s.flowCodeBlock=new WeakMap);i.push(t),n.set(r,!0)}addLineFlowCode(e,t=null){return""===e||(null!==t&&this.context.nodeBlock&&this.addLineFlowCodeBlock(t,e,this.context.nodeBlock),e=this.tab+e,/;\s*$/.test(e)||(e+=";\n"),this.flow.code+=e),this}addFlowCode(e){return this.flow.code+=e,this}addFlowTab(){return this.tab+="\t",this}removeFlowTab(){return this.tab=this.tab.slice(0,-1),this}getFlowData(e){return this.flowsData.get(e)}flowNode(e){const t=e.getNodeType(this),r=this.flowChildNode(e,t);return this.flowsData.set(e,r),r}addInclude(e){null!==this.currentFunctionNode&&this.currentFunctionNode.includes.push(e)}buildFunctionNode(e){const t=new vx,r=this.currentFunctionNode;return this.currentFunctionNode=t,t.code=this.buildFunctionCode(e),this.currentFunctionNode=r,t}flowShaderNode(e){const t=e.layout,r={[Symbol.iterator](){let e=0;const t=Object.values(this);return{next:()=>({value:t[e],done:e++>=t.length})}}};for(const e of t.inputs)r[e.name]=new Sf(e.type,e.name);e.layout=null;const s=e.call(r),i=this.flowStagesNode(s,t.type);return e.layout=t,i}flowStagesNode(e,t=null){const r=this.flow,s=this.vars,i=this.declarations,n=this.cache,a=this.buildStage,o=this.stack,u={code:""};this.flow=u,this.vars={},this.declarations={},this.cache=new s_,this.stack=Ef();for(const r of ks)this.setBuildStage(r),u.result=e.build(this,t);return u.vars=this.getVars(this.shaderStage),this.flow=r,this.vars=s,this.declarations=i,this.cache=n,this.stack=o,this.setBuildStage(a),u}getFunctionOperator(){return null}buildFunctionCode(){console.warn("Abstract function.")}flowChildNode(e,t=null){const r=this.flow,s={code:""};return this.flow=s,s.result=e.build(this,t),this.flow=r,s}flowNodeFromShaderStage(e,t,r=null,s=null){const i=this.shaderStage;this.setShaderStage(e);const n=this.flowChildNode(t,r);return null!==s&&(n.code+=`${this.tab+s} = ${n.result};\n`),this.flowCode[e]=this.flowCode[e]+n.code,this.setShaderStage(i),n}getAttributesArray(){return this.attributes.concat(this.bufferAttributes)}getAttributes(){console.warn("Abstract function.")}getVaryings(){console.warn("Abstract function.")}getVar(e,t,r=null){return`${null!==r?this.generateArrayDeclaration(e,r):this.getType(e)} ${t}`}getVars(e){let t="";const r=this.vars[e];if(void 0!==r)for(const e of r)t+=`${this.getVar(e.type,e.name)}; `;return t}getUniforms(){console.warn("Abstract function.")}getCodes(e){const t=this.codes[e];let r="";if(void 0!==t)for(const e of t)r+=e.code+"\n";return r}getHash(){return this.vertexShader+this.fragmentShader+this.computeShader}setShaderStage(e){this.shaderStage=e}getShaderStage(){return this.shaderStage}setBuildStage(e){this.buildStage=e}getBuildStage(){return this.buildStage}buildCode(){console.warn("Abstract function.")}build(){const{object:e,material:t,renderer:r}=this;if(null!==t){let e=r.library.fromMaterial(t);null===e&&(console.error(`NodeMaterial: Material "${t.type}" is not compatible.`),e=new Gh),e.build(this)}else this.addFlow("compute",e);for(const e of ks){this.setBuildStage(e),this.context.vertex&&this.context.vertex.isNode&&this.flowNodeFromShaderStage("vertex",this.context.vertex);for(const t of Gs){this.setShaderStage(t);const r=this.flowNodes[t];for(const t of r)"generate"===e?this.flowNode(t):t.build(this)}}return this.setBuildStage(null),this.setShaderStage(null),this.buildCode(),this.buildUpdateNodes(),this}getNodeUniform(e,t){if("float"===t||"int"===t||"uint"===t)return new g_(e);if("vec2"===t||"ivec2"===t||"uvec2"===t)return new m_(e);if("vec3"===t||"ivec3"===t||"uvec3"===t)return new f_(e);if("vec4"===t||"ivec4"===t||"uvec4"===t)return new y_(e);if("color"===t)return new x_(e);if("mat2"===t)return new b_(e);if("mat3"===t)return new T_(e);if("mat4"===t)return new __(e);throw new Error(`Uniform "${t}" not declared.`)}format(e,t,r){if((t=this.getVectorType(t))===(r=this.getVectorType(r))||null===r||this.isReference(r))return e;const s=this.getTypeLength(t),i=this.getTypeLength(r);return 16===s&&9===i?`${this.getType(r)}( ${e}[ 0 ].xyz, ${e}[ 1 ].xyz, ${e}[ 2 ].xyz )`:9===s&&4===i?`${this.getType(r)}( ${e}[ 0 ].xy, ${e}[ 1 ].xy )`:s>4||i>4||0===i?e:s===i?`${this.getType(r)}( ${e} )`:s>i?(e="bool"===r?`all( ${e} )`:`${e}.${"xyz".slice(0,i)}`,this.format(e,this.getTypeFromLength(i,this.getComponentType(t)),r)):4===i&&s>1?`${this.getType(r)}( ${this.format(e,t,"vec3")}, 1.0 )`:2===s?`${this.getType(r)}( ${this.format(e,t,"vec2")}, 0.0 )`:(1===s&&i>1&&t!==this.getComponentType(r)&&(e=`${this.getType(this.getComponentType(r))}( ${e} )`),`${this.getType(r)}( ${e} )`)}getSignature(){return`// Three.js r${We} - Node System\n`}*[Symbol.iterator](){}createNodeMaterial(e="NodeMaterial"){throw new Error(`THREE.NodeBuilder: createNodeMaterial() was deprecated. Use new ${e}() instead.`)}}class E_{constructor(){this.time=0,this.deltaTime=0,this.frameId=0,this.renderId=0,this.updateMap=new WeakMap,this.updateBeforeMap=new WeakMap,this.updateAfterMap=new WeakMap,this.renderer=null,this.material=null,this.camera=null,this.object=null,this.scene=null}_getMaps(e,t){let r=e.get(t);return void 0===r&&(r={renderMap:new WeakMap,frameMap:new WeakMap},e.set(t,r)),r}updateBeforeNode(e){const t=e.getUpdateBeforeType(),r=e.updateReference(this);if(t===Is.FRAME){const{frameMap:t}=this._getMaps(this.updateBeforeMap,r);t.get(r)!==this.frameId&&!1!==e.updateBefore(this)&&t.set(r,this.frameId)}else if(t===Is.RENDER){const{renderMap:t}=this._getMaps(this.updateBeforeMap,r);t.get(r)!==this.renderId&&!1!==e.updateBefore(this)&&t.set(r,this.renderId)}else t===Is.OBJECT&&e.updateBefore(this)}updateAfterNode(e){const t=e.getUpdateAfterType(),r=e.updateReference(this);if(t===Is.FRAME){const{frameMap:t}=this._getMaps(this.updateAfterMap,r);t.get(r)!==this.frameId&&!1!==e.updateAfter(this)&&t.set(r,this.frameId)}else if(t===Is.RENDER){const{renderMap:t}=this._getMaps(this.updateAfterMap,r);t.get(r)!==this.renderId&&!1!==e.updateAfter(this)&&t.set(r,this.renderId)}else t===Is.OBJECT&&e.updateAfter(this)}updateNode(e){const t=e.getUpdateType(),r=e.updateReference(this);if(t===Is.FRAME){const{frameMap:t}=this._getMaps(this.updateMap,r);t.get(r)!==this.frameId&&!1!==e.update(this)&&t.set(r,this.frameId)}else if(t===Is.RENDER){const{renderMap:t}=this._getMaps(this.updateMap,r);t.get(r)!==this.renderId&&!1!==e.update(this)&&t.set(r,this.renderId)}else t===Is.OBJECT&&e.update(this)}update(){this.frameId++,void 0===this.lastTime&&(this.lastTime=performance.now()),this.deltaTime=(performance.now()-this.lastTime)/1e3,this.lastTime=performance.now(),this.time+=this.deltaTime}}class A_{constructor(e,t,r=null,s="",i=!1){this.type=e,this.name=t,this.count=r,this.qualifier=s,this.isConst=i}}A_.isNodeFunctionInput=!0;class R_ extends qb{static get type(){return"DirectionalLightNode"}constructor(e=null){super(e)}setupDirect(){const e=this.colorNode;return{lightDirection:nb(this.light),lightColor:e}}}const C_=new a,M_=new a;let P_=null;class L_ extends qb{static get type(){return"RectAreaLightNode"}constructor(e=null){super(e),this.halfHeight=Yn(new r).setGroup(qn),this.halfWidth=Yn(new r).setGroup(qn),this.updateType=Is.RENDER}update(e){super.update(e);const{light:t}=this,r=e.camera.matrixWorldInverse;M_.identity(),C_.copy(t.matrixWorld),C_.premultiply(r),M_.extractRotation(C_),this.halfWidth.value.set(.5*t.width,0,0),this.halfHeight.value.set(0,.5*t.height,0),this.halfWidth.value.applyMatrix4(M_),this.halfHeight.value.applyMatrix4(M_)}setupDirectRectArea(e){let t,r;e.isAvailable("float32Filterable")?(t=Yu(P_.LTC_FLOAT_1),r=Yu(P_.LTC_FLOAT_2)):(t=Yu(P_.LTC_HALF_1),r=Yu(P_.LTC_HALF_2));const{colorNode:s,light:i}=this;return{lightColor:s,lightPosition:ib(i),halfWidth:this.halfWidth,halfHeight:this.halfHeight,ltc_1:t,ltc_2:r}}static setLTC(e){P_=e}}class F_ extends qb{static get type(){return"SpotLightNode"}constructor(e=null){super(e),this.coneCosNode=Yn(0).setGroup(qn),this.penumbraCosNode=Yn(0).setGroup(qn),this.cutoffDistanceNode=Yn(0).setGroup(qn),this.decayExponentNode=Yn(0).setGroup(qn)}update(e){super.update(e);const{light:t}=this;this.coneCosNode.value=Math.cos(t.angle),this.penumbraCosNode.value=Math.cos(t.angle*(1-t.penumbra)),this.cutoffDistanceNode.value=t.distance,this.decayExponentNode.value=t.decay}getSpotAttenuation(e){const{coneCosNode:t,penumbraCosNode:r}=this;return Vo(t,r,e)}setupDirect(e){const{colorNode:t,cutoffDistanceNode:r,decayExponentNode:s,light:i}=this,n=this.getLightVector(e),a=n.normalize(),o=a.dot(nb(i)),u=this.getSpotAttenuation(o),l=n.length(),d=Xb({lightDistance:l,cutoffDistance:r,decayExponent:s});let c=t.mul(u).mul(d);if(i.map){const t=tb(i,e.context.positionWorld),r=Yu(i.map,t.xy).onRenderUpdate((()=>i.map));c=t.mul(2).sub(1).abs().lessThan(1).all().select(c.mul(r),c)}return{lightColor:c,lightDirection:a}}}class B_ extends F_{static get type(){return"IESSpotLightNode"}getSpotAttenuation(e){const t=this.light.iesMap;let r=null;if(t&&!0===t.isTexture){const s=e.acos().mul(1/Math.PI);r=Yu(t,Xi(s,0),0).r}else r=super.getSpotAttenuation(e);return r}}class D_ extends qb{static get type(){return"AmbientLightNode"}constructor(e=null){super(e)}setup({context:e}){e.irradiance.addAssign(this.colorNode)}}class I_ extends qb{static get type(){return"HemisphereLightNode"}constructor(t=null){super(t),this.lightPositionNode=rb(t),this.lightDirectionNode=this.lightPositionNode.normalize(),this.groundColorNode=Yn(new e).setGroup(qn)}update(e){const{light:t}=this;super.update(e),this.lightPositionNode.object3d=t,this.groundColorNode.value.copy(t.groundColor).multiplyScalar(t.intensity)}setup(e){const{colorNode:t,groundColorNode:r,lightDirectionNode:s}=this,i=ql.dot(s).mul(.5).add(.5),n=Fo(r,t,i);e.context.irradiance.addAssign(n)}}class V_ extends qb{static get type(){return"LightProbeNode"}constructor(e=null){super(e);const t=[];for(let e=0;e<9;e++)t.push(new r);this.lightProbe=rl(t)}update(e){const{light:t}=this;super.update(e);for(let e=0;e<9;e++)this.lightProbe.array[e].copy(t.sh.coefficients[e]).multiplyScalar(t.intensity)}setup(e){const t=HT(Xl,this.lightProbe);e.context.irradiance.addAssign(t)}}class U_{parseFunction(){console.warn("Abstract function.")}}class O_{constructor(e,t,r="",s=""){this.type=e,this.inputs=t,this.name=r,this.precision=s}getCode(){console.warn("Abstract function.")}}O_.isNodeFunction=!0;const k_=/^\s*(highp|mediump|lowp)?\s*([a-z_0-9]+)\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)/i,G_=/[a-z_0-9]+/gi,z_="#pragma main";class $_ extends O_{constructor(e){const{type:t,inputs:r,name:s,precision:i,inputsCode:n,blockCode:a,headerCode:o}=(e=>{const t=(e=e.trim()).indexOf(z_),r=-1!==t?e.slice(t+12):e,s=r.match(k_);if(null!==s&&5===s.length){const i=s[4],n=[];let a=null;for(;null!==(a=G_.exec(i));)n.push(a);const o=[];let u=0;for(;u<n.length;){const e="const"===n[u][0];!0===e&&u++;let t=n[u][0];"in"===t||"out"===t||"inout"===t?u++:t="";const r=n[u++][0];let s=Number.parseInt(n[u][0]);!1===Number.isNaN(s)?u++:s=null;const i=n[u++][0];o.push(new A_(r,i,s,t,e))}const l=r.substring(s[0].length),d=void 0!==s[3]?s[3]:"";return{type:s[2],inputs:o,name:d,precision:void 0!==s[1]?s[1]:"",inputsCode:i,blockCode:l,headerCode:-1!==t?e.slice(0,t):""}}throw new Error("FunctionNode: Function is not a GLSL code.")})(e);super(t,r,s,i),this.inputsCode=n,this.blockCode=a,this.headerCode=o}getCode(e=this.name){let t;const r=this.blockCode;if(""!==r){const{type:s,inputsCode:i,headerCode:n,precision:a}=this;let o=`${s} ${e} ( ${i.trim()} )`;""!==a&&(o=`${a} ${o}`),t=n+o+r}else t="";return t}}class H_ extends U_{parseFunction(e){return new $_(e)}}const W_=new WeakMap,j_=[],q_=[];class X_ extends $m{constructor(e,t){super(),this.renderer=e,this.backend=t,this.nodeFrame=new E_,this.nodeBuilderCache=new Map,this.callHashCache=new Um,this.groupsData=new Um,this.cacheLib={}}updateGroup(e){const t=e.groupNode,r=t.name;if(r===Xn.name)return!0;if(r===qn.name){const t=this.get(e),r=this.nodeFrame.renderId;return t.renderId!==r&&(t.renderId=r,!0)}if(r===jn.name){const t=this.get(e),r=this.nodeFrame.frameId;return t.frameId!==r&&(t.frameId=r,!0)}j_[0]=t,j_[1]=e;let s=this.groupsData.get(j_);return void 0===s&&this.groupsData.set(j_,s={}),j_.length=0,s.version!==t.version&&(s.version=t.version,!0)}getForRenderCacheKey(e){return e.initialCacheKey}getForRender(e){const t=this.get(e);let r=t.nodeBuilderState;if(void 0===r){const{nodeBuilderCache:s}=this,i=this.getForRenderCacheKey(e);if(r=s.get(i),void 0===r){const t=this.backend.createNodeBuilder(e.object,this.renderer);t.scene=e.scene,t.material=e.material,t.camera=e.camera,t.context.material=e.material,t.lightsNode=e.lightsNode,t.environmentNode=this.getEnvironmentNode(e.scene),t.fogNode=this.getFogNode(e.scene),t.clippingContext=e.clippingContext,this.renderer.getRenderTarget()&&this.renderer.getRenderTarget().multiview&&t.enableMultiview(),t.build(),r=this._createNodeBuilderState(t),s.set(i,r)}r.usedTimes++,t.nodeBuilderState=r}return r}delete(e){if(e.isRenderObject){const t=this.get(e).nodeBuilderState;t.usedTimes--,0===t.usedTimes&&this.nodeBuilderCache.delete(this.getForRenderCacheKey(e))}return super.delete(e)}getForCompute(e){const t=this.get(e);let r=t.nodeBuilderState;if(void 0===r){const s=this.backend.createNodeBuilder(e,this.renderer);s.build(),r=this._createNodeBuilderState(s),t.nodeBuilderState=r}return r}_createNodeBuilderState(e){return new YT(e.vertexShader,e.fragmentShader,e.computeShader,e.getAttributesArray(),e.getBindings(),e.updateNodes,e.updateBeforeNodes,e.updateAfterNodes,e.observer,e.transforms)}getEnvironmentNode(e){this.updateEnvironment(e);let t=null;if(e.environmentNode&&e.environmentNode.isNode)t=e.environmentNode;else{const r=this.get(e);r.environmentNode&&(t=r.environmentNode)}return t}getBackgroundNode(e){this.updateBackground(e);let t=null;if(e.backgroundNode&&e.backgroundNode.isNode)t=e.backgroundNode;else{const r=this.get(e);r.backgroundNode&&(t=r.backgroundNode)}return t}getFogNode(e){return this.updateFog(e),e.fogNode||this.get(e).fogNode||null}getCacheKey(e,t){j_[0]=e,j_[1]=t;const r=this.renderer.info.calls,s=this.callHashCache.get(j_)||{};if(s.callId!==r){const i=this.getEnvironmentNode(e),n=this.getFogNode(e);t&&q_.push(t.getCacheKey(!0)),i&&q_.push(i.getCacheKey()),n&&q_.push(n.getCacheKey()),q_.push(this.renderer.shadowMap.enabled?1:0),s.callId=r,s.cacheKey=Ts(q_),this.callHashCache.set(j_,s),q_.length=0}return j_.length=0,s.cacheKey}get isToneMappingState(){return!this.renderer.getRenderTarget()}updateBackground(e){const t=this.get(e),r=e.background;if(r){const s=0===e.backgroundBlurriness&&t.backgroundBlurriness>0||e.backgroundBlurriness>0&&0===t.backgroundBlurriness;if(t.background!==r||s){const i=this.getCacheNode("background",r,(()=>{if(!0===r.isCubeTexture||r.mapping===Y||r.mapping===Q||r.mapping===oe){if(e.backgroundBlurriness>0||r.mapping===oe)return im(r);{let e;return e=!0===r.isCubeTexture?dd(r):Yu(r),op(e)}}if(!0===r.isTexture)return Yu(r,lh.flipY()).setUpdateMatrix(!0);!0!==r.isColor&&console.error("WebGPUNodes: Unsupported background configuration.",r)}),s);t.backgroundNode=i,t.background=r,t.backgroundBlurriness=e.backgroundBlurriness}}else t.backgroundNode&&(delete t.backgroundNode,delete t.background)}getCacheNode(e,t,r,s=!1){const i=this.cacheLib[e]||(this.cacheLib[e]=new WeakMap);let n=i.get(t);return(void 0===n||s)&&(n=r(),i.set(t,n)),n}updateFog(e){const t=this.get(e),r=e.fog;if(r){if(t.fog!==r){const e=this.getCacheNode("fog",r,(()=>{if(r.isFogExp2){const e=pd("color","color",r).setGroup(qn),t=pd("density","float",r).setGroup(qn);return Bx(e,Fx(t))}if(r.isFog){const e=pd("color","color",r).setGroup(qn),t=pd("near","float",r).setGroup(qn),s=pd("far","float",r).setGroup(qn);return Bx(e,Lx(t,s))}console.error("THREE.Renderer: Unsupported fog configuration.",r)}));t.fogNode=e,t.fog=r}}else delete t.fogNode,delete t.fog}updateEnvironment(e){const t=this.get(e),r=e.environment;if(r){if(t.environment!==r){const e=this.getCacheNode("environment",r,(()=>!0===r.isCubeTexture?dd(r):!0===r.isTexture?Yu(r):void console.error("Nodes: Unsupported environment configuration.",r)));t.environmentNode=e,t.environment=r}}else t.environmentNode&&(delete t.environmentNode,delete t.environment)}getNodeFrame(e=this.renderer,t=null,r=null,s=null,i=null){const n=this.nodeFrame;return n.renderer=e,n.scene=t,n.object=r,n.camera=s,n.material=i,n}getNodeFrameForRender(e){return this.getNodeFrame(e.renderer,e.scene,e.object,e.camera,e.material)}getOutputCacheKey(){const e=this.renderer;return e.toneMapping+","+e.currentColorSpace+","+e.xr.isPresenting}hasOutputChange(e){return W_.get(e)!==this.getOutputCacheKey()}getOutputNode(e){const t=this.renderer,r=this.getOutputCacheKey(),s=e.isTextureArray?Oy(e,Zi(lh,sl("gl_ViewID_OVR"))).renderOutput(t.toneMapping,t.currentColorSpace):Yu(e,lh).renderOutput(t.toneMapping,t.currentColorSpace);return W_.set(e,r),s}updateBefore(e){const t=e.getNodeBuilderState();for(const r of t.updateBeforeNodes)this.getNodeFrameForRender(e).updateBeforeNode(r)}updateAfter(e){const t=e.getNodeBuilderState();for(const r of t.updateAfterNodes)this.getNodeFrameForRender(e).updateAfterNode(r)}updateForCompute(e){const t=this.getNodeFrame(),r=this.getForCompute(e);for(const e of r.updateNodes)t.updateNode(e)}updateForRender(e){const t=this.getNodeFrameForRender(e),r=e.getNodeBuilderState();for(const e of r.updateNodes)t.updateNode(e)}needsRefresh(e){const t=this.getNodeFrameForRender(e);return e.getMonitor().needsRefresh(e,t)}dispose(){super.dispose(),this.nodeFrame=new E_,this.nodeBuilderCache=new Map,this.cacheLib={}}}const K_=new Pe;class Y_{constructor(e=null){this.version=0,this.clipIntersection=null,this.cacheKey="",this.shadowPass=!1,this.viewNormalMatrix=new n,this.clippingGroupContexts=new WeakMap,this.intersectionPlanes=[],this.unionPlanes=[],this.parentVersion=null,null!==e&&(this.viewNormalMatrix=e.viewNormalMatrix,this.clippingGroupContexts=e.clippingGroupContexts,this.shadowPass=e.shadowPass,this.viewMatrix=e.viewMatrix)}projectPlanes(e,t,r){const s=e.length;for(let i=0;i<s;i++){K_.copy(e[i]).applyMatrix4(this.viewMatrix,this.viewNormalMatrix);const s=t[r+i],n=K_.normal;s.x=-n.x,s.y=-n.y,s.z=-n.z,s.w=K_.constant}}updateGlobal(e,t){this.shadowPass=null!==e.overrideMaterial&&e.overrideMaterial.isShadowPassMaterial,this.viewMatrix=t.matrixWorldInverse,this.viewNormalMatrix.getNormalMatrix(this.viewMatrix)}update(e,t){let r=!1;e.version!==this.parentVersion&&(this.intersectionPlanes=Array.from(e.intersectionPlanes),this.unionPlanes=Array.from(e.unionPlanes),this.parentVersion=e.version),this.clipIntersection!==t.clipIntersection&&(this.clipIntersection=t.clipIntersection,this.clipIntersection?this.unionPlanes.length=e.unionPlanes.length:this.intersectionPlanes.length=e.intersectionPlanes.length);const i=t.clippingPlanes,n=i.length;let a,o;if(this.clipIntersection?(a=this.intersectionPlanes,o=e.intersectionPlanes.length):(a=this.unionPlanes,o=e.unionPlanes.length),a.length!==o+n){a.length=o+n;for(let e=0;e<n;e++)a[o+e]=new s;r=!0}this.projectPlanes(i,a,o),r&&(this.version++,this.cacheKey=`${this.intersectionPlanes.length}:${this.unionPlanes.length}`)}getGroupContext(e){if(this.shadowPass&&!e.clipShadows)return this;let t=this.clippingGroupContexts.get(e);return void 0===t&&(t=new Y_(this),this.clippingGroupContexts.set(e,t)),t.update(this,e),t}get unionClippingCount(){return this.unionPlanes.length}}class Q_{constructor(e,t){this.bundleGroup=e,this.camera=t}}const Z_=[];class J_{constructor(){this.bundles=new Um}get(e,t){const r=this.bundles;Z_[0]=e,Z_[1]=t;let s=r.get(Z_);return void 0===s&&(s=new Q_(e,t),r.set(Z_,s)),Z_.length=0,s}dispose(){this.bundles=new Um}}class ev{constructor(){this.lightNodes=new WeakMap,this.materialNodes=new Map,this.toneMappingNodes=new Map}fromMaterial(e){if(e.isNodeMaterial)return e;let t=null;const r=this.getMaterialNodeClass(e.type);if(null!==r){t=new r;for(const r in e)t[r]=e[r]}return t}addToneMapping(e,t){this.addType(e,t,this.toneMappingNodes)}getToneMappingFunction(e){return this.toneMappingNodes.get(e)||null}getMaterialNodeClass(e){return this.materialNodes.get(e)||null}addMaterial(e,t){this.addType(e,t,this.materialNodes)}getLightNodeClass(e){return this.lightNodes.get(e)||null}addLight(e,t){this.addClass(e,t,this.lightNodes)}addType(e,t,r){if(r.has(t))console.warn(`Redefinition of node ${t}`);else{if("function"!=typeof e)throw new Error(`Node class ${e.name} is not a class.`);if("function"==typeof t||"object"==typeof t)throw new Error(`Base class ${t} is not a class.`);r.set(t,e)}}addClass(e,t,r){if(r.has(t))console.warn(`Redefinition of node ${t.name}`);else{if("function"!=typeof e)throw new Error(`Node class ${e.name} is not a class.`);if("function"!=typeof t)throw new Error(`Base class ${t.name} is not a class.`);r.set(t,e)}}}const tv=new ub,rv=[];class sv extends Um{constructor(){super()}createNode(e=[]){return(new ub).setLights(e)}getNode(e,t){if(e.isQuadMesh)return tv;rv[0]=e,rv[1]=t;let r=this.get(rv);return void 0===r&&(r=this.createNode(),this.set(rv,r)),rv.length=0,r}}class iv extends ae{constructor(e=1,t=1,r={}){super(e,t,r),this.isXRRenderTarget=!0,this.hasExternalTextures=!1,this.autoAllocateDepthBuffer=!0}copy(e){return super.copy(e),this.hasExternalTextures=e.hasExternalTextures,this.autoAllocateDepthBuffer=e.autoAllocateDepthBuffer,this}}const nv=new r,av=new r;class ov extends o{constructor(e,r=!1){super(),this.enabled=!1,this.isPresenting=!1,this.cameraAutoUpdate=!0,this._renderer=e,this._cameraL=new ne,this._cameraL.viewport=new s,this._cameraR=new ne,this._cameraR.viewport=new s,this._cameras=[this._cameraL,this._cameraR],this._cameraXR=new je,this._currentDepthNear=null,this._currentDepthFar=null,this._controllers=[],this._controllerInputSources=[],this._xrRenderTarget=null,this._layers=[],this._supportsLayers=!1,this._createXRLayer=hv.bind(this),this._gl=null,this._currentAnimationContext=null,this._currentAnimationLoop=null,this._currentPixelRatio=null,this._currentSize=new t,this._onSessionEvent=lv.bind(this),this._onSessionEnd=dv.bind(this),this._onInputSourcesChange=cv.bind(this),this._onAnimationFrame=pv.bind(this),this._referenceSpace=null,this._referenceSpaceType="local-floor",this._customReferenceSpace=null,this._framebufferScaleFactor=1,this._foveation=1,this._session=null,this._glBaseLayer=null,this._glBinding=null,this._glProjLayer=null,this._xrFrame=null,this._useLayers="undefined"!=typeof XRWebGLBinding&&"createProjectionLayer"in XRWebGLBinding.prototype,this._useMultiviewIfPossible=r,this._useMultiview=!1}getController(e){return this._getController(e).getTargetRaySpace()}getControllerGrip(e){return this._getController(e).getGripSpace()}getHand(e){return this._getController(e).getHandSpace()}getFoveation(){if(null!==this._glProjLayer||null!==this._glBaseLayer)return this._foveation}setFoveation(e){this._foveation=e,null!==this._glProjLayer&&(this._glProjLayer.fixedFoveation=e),null!==this._glBaseLayer&&void 0!==this._glBaseLayer.fixedFoveation&&(this._glBaseLayer.fixedFoveation=e)}getFramebufferScaleFactor(){return this._framebufferScaleFactor}setFramebufferScaleFactor(e){this._framebufferScaleFactor=e,!0===this.isPresenting&&console.warn("THREE.XRManager: Cannot change framebuffer scale while presenting.")}getReferenceSpaceType(){return this._referenceSpaceType}setReferenceSpaceType(e){this._referenceSpaceType=e,!0===this.isPresenting&&console.warn("THREE.XRManager: Cannot change reference space type while presenting.")}getReferenceSpace(){return this._customReferenceSpace||this._referenceSpace}setReferenceSpace(e){this._customReferenceSpace=e}getCamera(){return this._cameraXR}getEnvironmentBlendMode(){if(null!==this._session)return this._session.environmentBlendMode}getFrame(){return this._xrFrame}useMultiview(){return this._useMultiview}createQuadLayer(e,t,r,s,i,n,a,o=[]){const u=new qe(e,t),l=new iv(i,n,{format:ce,type:Me,depthTexture:new D(i,n,o.stencil?Ce:b,void 0,void 0,void 0,void 0,void 0,void 0,o.stencil?Ae:Re),stencilBuffer:o.stencil,resolveDepthBuffer:!1,resolveStencilBuffer:!1}),d=new te({color:16777215,side:Xe});d.map=l.texture,d.map.offset.y=1,d.map.repeat.y=-1;const c=new W(u,d);c.position.copy(r),c.quaternion.copy(s);const h={type:"quad",width:e,height:t,translation:r,quaternion:s,pixelwidth:i,pixelheight:n,plane:c,material:d,rendercall:a,renderTarget:l};if(this._layers.push(h),null!==this._session){h.plane.material=new te({color:16777215,side:Xe}),h.plane.material.blending=Ke,h.plane.material.blendEquation=Ye,h.plane.material.blendSrc=Qe,h.plane.material.blendDst=Qe,h.xrlayer=this._createXRLayer(h);const e=this._session.renderState.layers;e.unshift(h.xrlayer),this._session.updateRenderState({layers:e})}else l.isXRRenderTarget=!1;return c}createCylinderLayer(e,t,r,s,i,n,a,o,u=[]){const l=new Ze(e,e,e*t/r,64,64,!0,Math.PI-t/2,t),d=new iv(n,a,{format:ce,type:Me,depthTexture:new D(n,a,u.stencil?Ce:b,void 0,void 0,void 0,void 0,void 0,void 0,u.stencil?Ae:Re),stencilBuffer:u.stencil,resolveDepthBuffer:!1,resolveStencilBuffer:!1}),c=new te({color:16777215,side:N});c.map=d.texture,c.map.offset.y=1,c.map.repeat.y=-1;const h=new W(l,c);h.position.copy(s),h.quaternion.copy(i);const p={type:"cylinder",radius:e,centralAngle:t,aspectratio:r,translation:s,quaternion:i,pixelwidth:n,pixelheight:a,plane:h,material:c,rendercall:o,renderTarget:d};if(this._layers.push(p),null!==this._session){p.plane.material=new te({color:16777215,side:N}),p.plane.material.blending=Ke,p.plane.material.blendEquation=Ye,p.plane.material.blendSrc=Qe,p.plane.material.blendDst=Qe,p.xrlayer=this._createXRLayer(p);const e=this._session.renderState.layers;e.unshift(p.xrlayer),this._session.updateRenderState({layers:e})}else d.isXRRenderTarget=!1;return h}renderLayers(){const e=new r,t=new Je,s=this.isPresenting;this.isPresenting=!1;for(const r of this._layers){if(r.renderTarget.isXRRenderTarget=null!==this._session,r.renderTarget.hasExternalTextures=r.renderTarget.isXRRenderTarget,r.renderTarget.autoAllocateDepthBuffer=!r.renderTarget.isXRRenderTarget,r.renderTarget.isXRRenderTarget&&this._supportsLayers){r.xrlayer.transform=new XRRigidTransform(r.plane.getWorldPosition(e),r.plane.getWorldQuaternion(t));const s=this._glBinding.getSubImage(r.xrlayer,this._xrFrame);this._renderer.backend.setXRRenderTargetTextures(r.renderTarget,s.colorTexture,s.depthStencilTexture)}this._renderer.setRenderTarget(r.renderTarget),r.rendercall()}this.isPresenting=s,this._renderer.setRenderTarget(null)}getSession(){return this._session}async setSession(e){const t=this._renderer,r=t.backend;this._gl=t.getContext();const s=this._gl,i=s.getContextAttributes();if(this._session=e,null!==e){if(!0===r.isWebGPUBackend)throw new Error('THREE.XRManager: XR is currently not supported with a WebGPU backend. Use WebGL by passing "{ forceWebGL: true }" to the constructor of the renderer.');if(e.addEventListener("select",this._onSessionEvent),e.addEventListener("selectstart",this._onSessionEvent),e.addEventListener("selectend",this._onSessionEvent),e.addEventListener("squeeze",this._onSessionEvent),e.addEventListener("squeezestart",this._onSessionEvent),e.addEventListener("squeezeend",this._onSessionEvent),e.addEventListener("end",this._onSessionEnd),e.addEventListener("inputsourceschange",this._onInputSourcesChange),await r.makeXRCompatible(),this._currentPixelRatio=t.getPixelRatio(),t.getSize(this._currentSize),this._currentAnimationContext=t._animation.getContext(),this._currentAnimationLoop=t._animation.getAnimationLoop(),t._animation.stop(),!0===this._useLayers){let r=null,n=null,a=null;t.depth&&(a=t.stencil?s.DEPTH24_STENCIL8:s.DEPTH_COMPONENT24,r=t.stencil?Ae:Re,n=t.stencil?Ce:b);const o={colorFormat:s.RGBA8,depthFormat:a,scaleFactor:this._framebufferScaleFactor};this._useMultiviewIfPossible&&t.hasFeature("OVR_multiview2")&&(o.textureType="texture-array",this._useMultiview=!0);const u=new XRWebGLBinding(e,s),l=u.createProjectionLayer(o),d=[l];let c;if(this._glBinding=u,this._glProjLayer=l,t.setPixelRatio(1),t.setSize(l.textureWidth,l.textureHeight,!1),this._useMultiview?(c=new Ee(l.textureWidth,l.textureHeight,2),c.type=n,c.format=r):c=new D(l.textureWidth,l.textureHeight,n,void 0,void 0,void 0,void 0,void 0,void 0,r),this._xrRenderTarget=new iv(l.textureWidth,l.textureHeight,{format:ce,type:Me,colorSpace:t.outputColorSpace,depthTexture:c,stencilBuffer:t.stencil,samples:i.antialias?4:0,resolveDepthBuffer:!1===l.ignoreDepthValues,resolveStencilBuffer:!1===l.ignoreDepthValues,depth:this._useMultiview?2:1,multiview:this._useMultiview}),this._xrRenderTarget.hasExternalTextures=!0,this._xrRenderTarget.depth=this._useMultiview?2:1,this._supportsLayers=e.enabledFeatures.includes("layers"),this._referenceSpace=await e.requestReferenceSpace(this.getReferenceSpaceType()),this._supportsLayers)for(const e of this._layers)e.plane.material=new te({color:16777215,side:"cylinder"===e.type?N:Xe}),e.plane.material.blending=Ke,e.plane.material.blendEquation=Ye,e.plane.material.blendSrc=Qe,e.plane.material.blendDst=Qe,e.xrlayer=this._createXRLayer(e),d.unshift(e.xrlayer);e.updateRenderState({layers:d})}else{const r={antialias:t.samples>0,alpha:!0,depth:t.depth,stencil:t.stencil,framebufferScaleFactor:this.getFramebufferScaleFactor()},i=new XRWebGLLayer(e,s,r);this._glBaseLayer=i,e.updateRenderState({baseLayer:i}),t.setPixelRatio(1),t.setSize(i.framebufferWidth,i.framebufferHeight,!1),this._xrRenderTarget=new iv(i.framebufferWidth,i.framebufferHeight,{format:ce,type:Me,colorSpace:t.outputColorSpace,stencilBuffer:t.stencil,resolveDepthBuffer:!1===i.ignoreDepthValues,resolveStencilBuffer:!1===i.ignoreDepthValues}),this._referenceSpace=await e.requestReferenceSpace(this.getReferenceSpaceType())}this.setFoveation(this.getFoveation()),t._animation.setAnimationLoop(this._onAnimationFrame),t._animation.setContext(e),t._animation.start(),this.isPresenting=!0,this.dispatchEvent({type:"sessionstart"})}}updateCamera(e){const t=this._session;if(null===t)return;const r=e.near,s=e.far,i=this._cameraXR,n=this._cameraL,a=this._cameraR;i.near=a.near=n.near=r,i.far=a.far=n.far=s,i.isMultiViewCamera=this._useMultiview,this._currentDepthNear===i.near&&this._currentDepthFar===i.far||(t.updateRenderState({depthNear:i.near,depthFar:i.far}),this._currentDepthNear=i.near,this._currentDepthFar=i.far),n.layers.mask=2|e.layers.mask,a.layers.mask=4|e.layers.mask,i.layers.mask=n.layers.mask|a.layers.mask;const o=e.parent,u=i.cameras;uv(i,o);for(let e=0;e<u.length;e++)uv(u[e],o);2===u.length?function(e,t,r){nv.setFromMatrixPosition(t.matrixWorld),av.setFromMatrixPosition(r.matrixWorld);const s=nv.distanceTo(av),i=t.projectionMatrix.elements,n=r.projectionMatrix.elements,a=i[14]/(i[10]-1),o=i[14]/(i[10]+1),u=(i[9]+1)/i[5],l=(i[9]-1)/i[5],d=(i[8]-1)/i[0],c=(n[8]+1)/n[0],h=a*d,p=a*c,g=s/(-d+c),m=g*-d;if(t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(m),e.translateZ(g),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.copy(e.matrixWorld).invert(),-1===i[10])e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse);else{const t=a+g,r=o+g,i=h-m,n=p+(s-m),d=u*o/r*t,c=l*o/r*t;e.projectionMatrix.makePerspective(i,n,d,c,t,r),e.projectionMatrixInverse.copy(e.projectionMatrix).invert()}}(i,n,a):i.projectionMatrix.copy(n.projectionMatrix),function(e,t,r){null===r?e.matrix.copy(t.matrixWorld):(e.matrix.copy(r.matrixWorld),e.matrix.invert(),e.matrix.multiply(t.matrixWorld));e.matrix.decompose(e.position,e.quaternion,e.scale),e.updateMatrixWorld(!0),e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse),e.isPerspectiveCamera&&(e.fov=2*tt*Math.atan(1/e.projectionMatrix.elements[5]),e.zoom=1)}(e,i,o)}_getController(e){let t=this._controllers[e];return void 0===t&&(t=new et,this._controllers[e]=t),t}}function uv(e,t){null===t?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.copy(e.matrixWorld).invert()}function lv(e){const t=this._controllerInputSources.indexOf(e.inputSource);if(-1===t)return;const r=this._controllers[t];if(void 0!==r){const t=this.getReferenceSpace();r.update(e.inputSource,e.frame,t),r.dispatchEvent({type:e.type,data:e.inputSource})}}function dv(){const e=this._session,t=this._renderer;e.removeEventListener("select",this._onSessionEvent),e.removeEventListener("selectstart",this._onSessionEvent),e.removeEventListener("selectend",this._onSessionEvent),e.removeEventListener("squeeze",this._onSessionEvent),e.removeEventListener("squeezestart",this._onSessionEvent),e.removeEventListener("squeezeend",this._onSessionEvent),e.removeEventListener("end",this._onSessionEnd),e.removeEventListener("inputsourceschange",this._onInputSourcesChange);for(let e=0;e<this._controllers.length;e++){const t=this._controllerInputSources[e];null!==t&&(this._controllerInputSources[e]=null,this._controllers[e].disconnect(t))}if(this._currentDepthNear=null,this._currentDepthFar=null,t.backend.setXRTarget(null),t.setOutputRenderTarget(null),t.setRenderTarget(null),this._session=null,this._xrRenderTarget=null,!0===this._supportsLayers)for(const e of this._layers)e.renderTarget=new iv(e.pixelwidth,e.pixelheight,{format:ce,type:Me,depthTexture:new D(e.pixelwidth,e.pixelheight,e.stencilBuffer?Ce:b,void 0,void 0,void 0,void 0,void 0,void 0,e.stencilBuffer?Ae:Re),stencilBuffer:e.stencilBuffer,resolveDepthBuffer:!1,resolveStencilBuffer:!1}),e.renderTarget.isXRRenderTarget=!1,e.plane.material=e.material,e.material.map=e.renderTarget.texture,delete e.xrlayer;this.isPresenting=!1,this._useMultiview=!1,t._animation.stop(),t._animation.setAnimationLoop(this._currentAnimationLoop),t._animation.setContext(this._currentAnimationContext),t._animation.start(),t.setPixelRatio(this._currentPixelRatio),t.setSize(this._currentSize.width,this._currentSize.height,!1),this.dispatchEvent({type:"sessionend"})}function cv(e){const t=this._controllers,r=this._controllerInputSources;for(let s=0;s<e.removed.length;s++){const i=e.removed[s],n=r.indexOf(i);n>=0&&(r[n]=null,t[n].disconnect(i))}for(let s=0;s<e.added.length;s++){const i=e.added[s];let n=r.indexOf(i);if(-1===n){for(let e=0;e<t.length;e++){if(e>=r.length){r.push(i),n=e;break}if(null===r[e]){r[e]=i,n=e;break}}if(-1===n)break}const a=t[n];a&&a.connect(i)}}function hv(e){return"quad"===e.type?this._glBinding.createQuadLayer({transform:new XRRigidTransform(e.translation,e.quaternion),depthFormat:this._gl.DEPTH_COMPONENT,width:e.width/2,height:e.height/2,space:this._referenceSpace,viewPixelWidth:e.pixelwidth,viewPixelHeight:e.pixelheight}):this._glBinding.createCylinderLayer({transform:new XRRigidTransform(e.translation,e.quaternion),depthFormat:this._gl.DEPTH_COMPONENT,radius:e.radius,centralAngle:e.centralAngle,aspectRatio:e.aspectRatio,space:this._referenceSpace,viewPixelWidth:e.pixelwidth,viewPixelHeight:e.pixelheight})}function pv(e,t){if(void 0===t)return;const r=this._cameraXR,i=this._renderer,n=i.backend,a=this._glBaseLayer,o=this.getReferenceSpace(),u=t.getViewerPose(o);if(this._xrFrame=t,null!==u){const e=u.views;null!==this._glBaseLayer&&n.setXRTarget(a.framebuffer);let t=!1;e.length!==r.cameras.length&&(r.cameras.length=0,t=!0);for(let i=0;i<e.length;i++){const o=e[i];let u;if(!0===this._useLayers){const e=this._glBinding.getViewSubImage(this._glProjLayer,o);u=e.viewport,0===i&&n.setXRRenderTargetTextures(this._xrRenderTarget,e.colorTexture,this._glProjLayer.ignoreDepthValues&&!this._useMultiview?void 0:e.depthStencilTexture)}else u=a.getViewport(o);let l=this._cameras[i];void 0===l&&(l=new ne,l.layers.enable(i),l.viewport=new s,this._cameras[i]=l),l.matrix.fromArray(o.transform.matrix),l.matrix.decompose(l.position,l.quaternion,l.scale),l.projectionMatrix.fromArray(o.projectionMatrix),l.projectionMatrixInverse.copy(l.projectionMatrix).invert(),l.viewport.set(u.x,u.y,u.width,u.height),0===i&&(r.matrix.copy(l.matrix),r.matrix.decompose(r.position,r.quaternion,r.scale)),!0===t&&r.cameras.push(l)}i.setOutputRenderTarget(this._xrRenderTarget)}for(let e=0;e<this._controllers.length;e++){const r=this._controllerInputSources[e],s=this._controllers[e];null!==r&&void 0!==s&&s.update(r,t,o)}this._currentAnimationLoop&&this._currentAnimationLoop(e,t),t.detectedPlanes&&this.dispatchEvent({type:"planesdetected",data:t}),this._xrFrame=null}const gv=new j,mv=new t,fv=new s,yv=new it,xv=new st,bv=new a,Tv=new s;class _v{constructor(e,t={}){this.isRenderer=!0;const{logarithmicDepthBuffer:r=!1,alpha:i=!0,depth:n=!0,stencil:a=!1,antialias:o=!1,samples:u=0,getFallback:l=null,colorBufferType:d=he,multiview:c=!1}=t;this.domElement=e.getDomElement(),this.backend=e,this.samples=u||!0===o?4:0,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.alpha=i,this.logarithmicDepthBuffer=r,this.outputColorSpace=z,this.toneMapping=p,this.toneMappingExposure=1,this.sortObjects=!0,this.depth=n,this.stencil=a,this.info=new Jm,this.overrideNodes={modelViewMatrix:null,modelNormalViewMatrix:null},this.library=new ev,this.lighting=new sv,this._getFallback=l,this._pixelRatio=1,this._width=this.domElement.width,this._height=this.domElement.height,this._viewport=new s(0,0,this._width,this._height),this._scissor=new s(0,0,this._width,this._height),this._scissorTest=!1,this._attributes=null,this._geometries=null,this._nodes=null,this._animation=null,this._bindings=null,this._objects=null,this._pipelines=null,this._bundles=null,this._renderLists=null,this._renderContexts=null,this._textures=null,this._background=null,this._quad=new xy(new Gh),this._quad.material.name="Renderer_output",this._currentRenderContext=null,this._opaqueSort=null,this._transparentSort=null,this._frameBufferTarget=null;const h=!0===this.alpha?0:1;this._clearColor=new Nf(0,0,0,h),this._clearDepth=1,this._clearStencil=0,this._renderTarget=null,this._activeCubeFace=0,this._activeMipmapLevel=0,this._outputRenderTarget=null,this._mrt=null,this._renderObjectFunction=null,this._currentRenderObjectFunction=null,this._currentRenderBundle=null,this._handleObjectFunction=this._renderObjectDirect,this._isDeviceLost=!1,this.onDeviceLost=this._onDeviceLost,this._colorBufferType=d,this._initialized=!1,this._initPromise=null,this._compilationPromises=null,this.transparent=!0,this.opaque=!0,this.shadowMap={enabled:!1,type:rt},this.xr=new ov(this,c),this.debug={checkShaderErrors:!0,onShaderError:null,getShaderAsync:async(e,t,r)=>{await this.compileAsync(e,t);const s=this._renderLists.get(e,t),i=this._renderContexts.get(e,t,this._renderTarget),n=e.overrideMaterial||r.material,a=this._objects.get(r,n,e,t,s.lightsNode,i,i.clippingContext),{fragmentShader:o,vertexShader:u}=a.getNodeBuilderState();return{fragmentShader:o,vertexShader:u}}}}async init(){if(this._initialized)throw new Error("Renderer: Backend has already been initialized.");return null!==this._initPromise||(this._initPromise=new Promise((async(e,t)=>{let r=this.backend;try{await r.init(this)}catch(e){if(null===this._getFallback)return void t(e);try{this.backend=r=this._getFallback(e),await r.init(this)}catch(e){return void t(e)}}this._nodes=new X_(this,r),this._animation=new Vm(this._nodes,this.info),this._attributes=new Km(r),this._background=new qT(this,this._nodes),this._geometries=new Zm(this._attributes,this.info),this._textures=new vf(this,r,this.info),this._pipelines=new af(r,this._nodes),this._bindings=new of(r,this._nodes,this._textures,this._attributes,this._pipelines,this.info),this._objects=new zm(this,this._nodes,this._geometries,this._pipelines,this._bindings,this.info),this._renderLists=new pf(this.lighting),this._bundles=new J_,this._renderContexts=new Tf,this._animation.start(),this._initialized=!0,e(this)}))),this._initPromise}get coordinateSystem(){return this.backend.coordinateSystem}async compileAsync(e,t,r=null){if(!0===this._isDeviceLost)return;!1===this._initialized&&await this.init();const s=this._nodes.nodeFrame,i=s.renderId,n=this._currentRenderContext,a=this._currentRenderObjectFunction,o=this._compilationPromises,u=!0===e.isScene?e:gv;null===r&&(r=e);const l=this._renderTarget,d=this._renderContexts.get(r,t,l),c=this._activeMipmapLevel,h=[];this._currentRenderContext=d,this._currentRenderObjectFunction=this.renderObject,this._handleObjectFunction=this._createObjectPipeline,this._compilationPromises=h,s.renderId++,s.update(),d.depth=this.depth,d.stencil=this.stencil,d.clippingContext||(d.clippingContext=new Y_),d.clippingContext.updateGlobal(u,t),u.onBeforeRender(this,e,t,l);const p=this._renderLists.get(e,t);if(p.begin(),this._projectObject(e,t,0,p,d.clippingContext),r!==e&&r.traverseVisible((function(e){e.isLight&&e.layers.test(t.layers)&&p.pushLight(e)})),p.finish(),null!==l){this._textures.updateRenderTarget(l,c);const e=this._textures.get(l);d.textures=e.textures,d.depthTexture=e.depthTexture}else d.textures=null,d.depthTexture=null;this._background.update(u,p,d);const g=p.opaque,m=p.transparent,f=p.transparentDoublePass,y=p.lightsNode;!0===this.opaque&&g.length>0&&this._renderObjects(g,t,u,y),!0===this.transparent&&m.length>0&&this._renderTransparents(m,f,t,u,y),s.renderId=i,this._currentRenderContext=n,this._currentRenderObjectFunction=a,this._compilationPromises=o,this._handleObjectFunction=this._renderObjectDirect,await Promise.all(h)}async renderAsync(e,t){!1===this._initialized&&await this.init(),this._renderScene(e,t)}async waitForGPU(){await this.backend.waitForGPU()}set highPrecision(e){!0===e?(this.overrideNodes.modelViewMatrix=Ll,this.overrideNodes.modelNormalViewMatrix=Fl):this.highPrecision&&(this.overrideNodes.modelViewMatrix=null,this.overrideNodes.modelNormalViewMatrix=null)}get highPrecision(){return this.overrideNodes.modelViewMatrix===Ll&&this.overrideNodes.modelNormalViewMatrix===Fl}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}getColorBufferType(){return this._colorBufferType}_onDeviceLost(e){let t=`THREE.WebGPURenderer: ${e.api} Device Lost:\n\nMessage: ${e.message}`;e.reason&&(t+=`\nReason: ${e.reason}`),console.error(t),this._isDeviceLost=!0}_renderBundle(e,t,r){const{bundleGroup:s,camera:i,renderList:n}=e,a=this._currentRenderContext,o=this._bundles.get(s,i),u=this.backend.get(o);void 0===u.renderContexts&&(u.renderContexts=new Set);const l=s.version!==u.version,d=!1===u.renderContexts.has(a)||l;if(u.renderContexts.add(a),d){this.backend.beginBundle(a),(void 0===u.renderObjects||l)&&(u.renderObjects=[]),this._currentRenderBundle=o;const{transparentDoublePass:e,transparent:d,opaque:c}=n;!0===this.opaque&&c.length>0&&this._renderObjects(c,i,t,r),!0===this.transparent&&d.length>0&&this._renderTransparents(d,e,i,t,r),this._currentRenderBundle=null,this.backend.finishBundle(a,o),u.version=s.version}else{const{renderObjects:e}=u;for(let t=0,r=e.length;t<r;t++){const r=e[t];this._nodes.needsRefresh(r)&&(this._nodes.updateBefore(r),this._nodes.updateForRender(r),this._bindings.updateForRender(r),this._nodes.updateAfter(r))}}this.backend.addBundle(a,o)}render(e,t){if(!1===this._initialized)return console.warn("THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead."),this.renderAsync(e,t);this._renderScene(e,t)}_getFrameBufferTarget(){const{currentToneMapping:e,currentColorSpace:t}=this;if(!1===(e!==p)&&!1===(t!==de))return null;const{width:r,height:s}=this.getDrawingBufferSize(mv),{depth:i,stencil:n}=this;let a=this._frameBufferTarget;null===a&&(a=new ae(r,s,{depthBuffer:i,stencilBuffer:n,type:this._colorBufferType,format:ce,colorSpace:de,generateMipmaps:!1,minFilter:q,magFilter:q,samples:this.samples}),a.isPostProcessingRenderTarget=!0,this._frameBufferTarget=a);const o=this.getOutputRenderTarget();return a.depthBuffer=i,a.stencilBuffer=n,a.setSize(r,s,null!==o?o.depth:1),a.viewport.copy(this._viewport),a.scissor.copy(this._scissor),a.viewport.multiplyScalar(this._pixelRatio),a.scissor.multiplyScalar(this._pixelRatio),a.scissorTest=this._scissorTest,a.multiview=null!==o&&o.multiview,a}_renderScene(e,t,r=!0){if(!0===this._isDeviceLost)return;const s=r?this._getFrameBufferTarget():null,i=this._nodes.nodeFrame,n=i.renderId,a=this._currentRenderContext,o=this._currentRenderObjectFunction,u=!0===e.isScene?e:gv,l=this._renderTarget||this._outputRenderTarget,d=this._activeCubeFace,c=this._activeMipmapLevel;let h;null!==s?(h=s,this.setRenderTarget(h)):h=l;const p=this._renderContexts.get(e,t,h);this._currentRenderContext=p,this._currentRenderObjectFunction=this._renderObjectFunction||this.renderObject,this.info.calls++,this.info.render.calls++,this.info.render.frameCalls++,i.renderId=this.info.calls;const g=this.coordinateSystem,m=this.xr;if(t.coordinateSystem!==g&&!1===m.isPresenting&&(t.coordinateSystem=g,t.updateProjectionMatrix(),t.isArrayCamera))for(const e of t.cameras)e.coordinateSystem=g,e.updateProjectionMatrix();!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),null===t.parent&&!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld(),!0===m.enabled&&!0===m.isPresenting&&(!0===m.cameraAutoUpdate&&m.updateCamera(t),t=m.getCamera());let f=this._viewport,y=this._scissor,x=this._pixelRatio;null!==h&&(f=h.viewport,y=h.scissor,x=1),this.getDrawingBufferSize(mv),fv.set(0,0,mv.width,mv.height);const b=void 0===f.minDepth?0:f.minDepth,T=void 0===f.maxDepth?1:f.maxDepth;p.viewportValue.copy(f).multiplyScalar(x).floor(),p.viewportValue.width>>=c,p.viewportValue.height>>=c,p.viewportValue.minDepth=b,p.viewportValue.maxDepth=T,p.viewport=!1===p.viewportValue.equals(fv),p.scissorValue.copy(y).multiplyScalar(x).floor(),p.scissor=this._scissorTest&&!1===p.scissorValue.equals(fv),p.scissorValue.width>>=c,p.scissorValue.height>>=c,p.clippingContext||(p.clippingContext=new Y_),p.clippingContext.updateGlobal(u,t),u.onBeforeRender(this,e,t,h);const _=t.isArrayCamera?xv:yv;t.isArrayCamera||(bv.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),_.setFromProjectionMatrix(bv,g));const v=this._renderLists.get(e,t);if(v.begin(),this._projectObject(e,t,0,v,p.clippingContext),v.finish(),!0===this.sortObjects&&v.sort(this._opaqueSort,this._transparentSort),null!==h){this._textures.updateRenderTarget(h,c);const e=this._textures.get(h);p.textures=e.textures,p.depthTexture=e.depthTexture,p.width=e.width,p.height=e.height,p.renderTarget=h,p.depth=h.depthBuffer,p.stencil=h.stencilBuffer}else p.textures=null,p.depthTexture=null,p.width=this.domElement.width,p.height=this.domElement.height,p.depth=this.depth,p.stencil=this.stencil;p.width>>=c,p.height>>=c,p.activeCubeFace=d,p.activeMipmapLevel=c,p.occlusionQueryCount=v.occlusionQueryCount,this._background.update(u,v,p),p.camera=t,this.backend.beginRender(p);const{bundles:N,lightsNode:S,transparentDoublePass:w,transparent:E,opaque:A}=v;return N.length>0&&this._renderBundles(N,u,S),!0===this.opaque&&A.length>0&&this._renderObjects(A,t,u,S),!0===this.transparent&&E.length>0&&this._renderTransparents(E,w,t,u,S),this.backend.finishRender(p),i.renderId=n,this._currentRenderContext=a,this._currentRenderObjectFunction=o,null!==s&&(this.setRenderTarget(l,d,c),this._renderOutput(h)),u.onAfterRender(this,e,t,h),p}_renderOutput(e){const t=this._quad;this._nodes.hasOutputChange(e.texture)&&(t.material.fragmentNode=this._nodes.getOutputNode(e.texture),t.material.needsUpdate=!0);const r=this.autoClear,s=this.xr.enabled;this.autoClear=!1,this.xr.enabled=!1,this._renderScene(t,t.camera,!1),this.autoClear=r,this.xr.enabled=s}getMaxAnisotropy(){return this.backend.getMaxAnisotropy()}getActiveCubeFace(){return this._activeCubeFace}getActiveMipmapLevel(){return this._activeMipmapLevel}async setAnimationLoop(e){!1===this._initialized&&await this.init(),this._animation.setAnimationLoop(e)}async getArrayBufferAsync(e){return await this.backend.getArrayBufferAsync(e)}getContext(){return this.backend.getContext()}getPixelRatio(){return this._pixelRatio}getDrawingBufferSize(e){return e.set(this._width*this._pixelRatio,this._height*this._pixelRatio).floor()}getSize(e){return e.set(this._width,this._height)}setPixelRatio(e=1){this._pixelRatio!==e&&(this._pixelRatio=e,this.setSize(this._width,this._height,!1))}setDrawingBufferSize(e,t,r){this.xr&&this.xr.isPresenting||(this._width=e,this._height=t,this._pixelRatio=r,this.domElement.width=Math.floor(e*r),this.domElement.height=Math.floor(t*r),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize())}setSize(e,t,r=!0){this.xr&&this.xr.isPresenting||(this._width=e,this._height=t,this.domElement.width=Math.floor(e*this._pixelRatio),this.domElement.height=Math.floor(t*this._pixelRatio),!0===r&&(this.domElement.style.width=e+"px",this.domElement.style.height=t+"px"),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize())}setOpaqueSort(e){this._opaqueSort=e}setTransparentSort(e){this._transparentSort=e}getScissor(e){const t=this._scissor;return e.x=t.x,e.y=t.y,e.width=t.width,e.height=t.height,e}setScissor(e,t,r,s){const i=this._scissor;e.isVector4?i.copy(e):i.set(e,t,r,s)}getScissorTest(){return this._scissorTest}setScissorTest(e){this._scissorTest=e,this.backend.setScissorTest(e)}getViewport(e){return e.copy(this._viewport)}setViewport(e,t,r,s,i=0,n=1){const a=this._viewport;e.isVector4?a.copy(e):a.set(e,t,r,s),a.minDepth=i,a.maxDepth=n}getClearColor(e){return e.copy(this._clearColor)}setClearColor(e,t=1){this._clearColor.set(e),this._clearColor.a=t}getClearAlpha(){return this._clearColor.a}setClearAlpha(e){this._clearColor.a=e}getClearDepth(){return this._clearDepth}setClearDepth(e){this._clearDepth=e}getClearStencil(){return this._clearStencil}setClearStencil(e){this._clearStencil=e}isOccluded(e){const t=this._currentRenderContext;return t&&this.backend.isOccluded(t,e)}clear(e=!0,t=!0,r=!0){if(!1===this._initialized)return console.warn("THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead."),this.clearAsync(e,t,r);const s=this._renderTarget||this._getFrameBufferTarget();let i=null;if(null!==s){this._textures.updateRenderTarget(s);const e=this._textures.get(s);i=this._renderContexts.getForClear(s),i.textures=e.textures,i.depthTexture=e.depthTexture,i.width=e.width,i.height=e.height,i.renderTarget=s,i.depth=s.depthBuffer,i.stencil=s.stencilBuffer,i.clearColorValue=this.backend.getClearColor(),i.activeCubeFace=this.getActiveCubeFace(),i.activeMipmapLevel=this.getActiveMipmapLevel()}this.backend.clear(e,t,r,i),null!==s&&null===this._renderTarget&&this._renderOutput(s)}clearColor(){return this.clear(!0,!1,!1)}clearDepth(){return this.clear(!1,!0,!1)}clearStencil(){return this.clear(!1,!1,!0)}async clearAsync(e=!0,t=!0,r=!0){!1===this._initialized&&await this.init(),this.clear(e,t,r)}async clearColorAsync(){this.clearAsync(!0,!1,!1)}async clearDepthAsync(){this.clearAsync(!1,!0,!1)}async clearStencilAsync(){this.clearAsync(!1,!1,!0)}get currentToneMapping(){return this.isOutputTarget?this.toneMapping:p}get currentColorSpace(){return this.isOutputTarget?this.outputColorSpace:de}get isOutputTarget(){return this._renderTarget===this._outputRenderTarget||null===this._renderTarget}dispose(){this.info.dispose(),this.backend.dispose(),this._animation.dispose(),this._objects.dispose(),this._pipelines.dispose(),this._nodes.dispose(),this._bindings.dispose(),this._renderLists.dispose(),this._renderContexts.dispose(),this._textures.dispose(),null!==this._frameBufferTarget&&this._frameBufferTarget.dispose(),Object.values(this.backend.timestampQueryPool).forEach((e=>{null!==e&&e.dispose()})),this.setRenderTarget(null),this.setAnimationLoop(null)}setRenderTarget(e,t=0,r=0){this._renderTarget=e,this._activeCubeFace=t,this._activeMipmapLevel=r}getRenderTarget(){return this._renderTarget}setOutputRenderTarget(e){this._outputRenderTarget=e}getOutputRenderTarget(){return this._outputRenderTarget}setRenderObjectFunction(e){this._renderObjectFunction=e}getRenderObjectFunction(){return this._renderObjectFunction}compute(e){if(!0===this._isDeviceLost)return;if(!1===this._initialized)return console.warn("THREE.Renderer: .compute() called before the backend is initialized. Try using .computeAsync() instead."),this.computeAsync(e);const t=this._nodes.nodeFrame,r=t.renderId;this.info.calls++,this.info.compute.calls++,this.info.compute.frameCalls++,t.renderId=this.info.calls;const s=this.backend,i=this._pipelines,n=this._bindings,a=this._nodes,o=Array.isArray(e)?e:[e];if(void 0===o[0]||!0!==o[0].isComputeNode)throw new Error("THREE.Renderer: .compute() expects a ComputeNode.");s.beginCompute(e);for(const t of o){if(!1===i.has(t)){const e=()=>{t.removeEventListener("dispose",e),i.delete(t),n.delete(t),a.delete(t)};t.addEventListener("dispose",e);const r=t.onInitFunction;null!==r&&r.call(t,{renderer:this})}a.updateForCompute(t),n.updateForCompute(t);const r=n.getForCompute(t),o=i.getForCompute(t,r);s.compute(e,t,r,o)}s.finishCompute(e),t.renderId=r}async computeAsync(e){!1===this._initialized&&await this.init(),this.compute(e)}async hasFeatureAsync(e){return!1===this._initialized&&await this.init(),this.backend.hasFeature(e)}async resolveTimestampsAsync(e="render"){return!1===this._initialized&&await this.init(),this.backend.resolveTimestampsAsync(e)}hasFeature(e){return!1===this._initialized?(console.warn("THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead."),!1):this.backend.hasFeature(e)}hasInitialized(){return this._initialized}async initTextureAsync(e){!1===this._initialized&&await this.init(),this._textures.updateTexture(e)}initTexture(e){!1===this._initialized&&console.warn("THREE.Renderer: .initTexture() called before the backend is initialized. Try using .initTextureAsync() instead."),this._textures.updateTexture(e)}copyFramebufferToTexture(e,t=null){if(null!==t)if(t.isVector2)t=Tv.set(t.x,t.y,e.image.width,e.image.height).floor();else{if(!t.isVector4)return void console.error("THREE.Renderer.copyFramebufferToTexture: Invalid rectangle.");t=Tv.copy(t).floor()}else t=Tv.set(0,0,e.image.width,e.image.height);let r,s=this._currentRenderContext;null!==s?r=s.renderTarget:(r=this._renderTarget||this._getFrameBufferTarget(),null!==r&&(this._textures.updateRenderTarget(r),s=this._textures.get(r))),this._textures.updateTexture(e,{renderTarget:r}),this.backend.copyFramebufferToTexture(e,s,t)}copyTextureToTexture(e,t,r=null,s=null,i=0,n=0){this._textures.updateTexture(e),this._textures.updateTexture(t),this.backend.copyTextureToTexture(e,t,r,s,i,n)}async readRenderTargetPixelsAsync(e,t,r,s,i,n=0,a=0){return this.backend.copyTextureToBuffer(e.textures[n],t,r,s,i,a)}_projectObject(e,t,r,s,i){if(!1===e.visible)return;if(e.layers.test(t.layers))if(e.isGroup)r=e.renderOrder,e.isClippingGroup&&e.enabled&&(i=i.getGroupContext(e));else if(e.isLOD)!0===e.autoUpdate&&e.update(t);else if(e.isLight)s.pushLight(e);else if(e.isSprite){const n=t.isArrayCamera?xv:yv;if(!e.frustumCulled||n.intersectsSprite(e,t)){!0===this.sortObjects&&Tv.setFromMatrixPosition(e.matrixWorld).applyMatrix4(bv);const{geometry:t,material:n}=e;n.visible&&s.push(e,t,n,r,Tv.z,null,i)}}else if(e.isLineLoop)console.error("THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.");else if(e.isMesh||e.isLine||e.isPoints){const n=t.isArrayCamera?xv:yv;if(!e.frustumCulled||n.intersectsObject(e,t)){const{geometry:t,material:n}=e;if(!0===this.sortObjects&&(null===t.boundingSphere&&t.computeBoundingSphere(),Tv.copy(t.boundingSphere.center).applyMatrix4(e.matrixWorld).applyMatrix4(bv)),Array.isArray(n)){const a=t.groups;for(let o=0,u=a.length;o<u;o++){const u=a[o],l=n[u.materialIndex];l&&l.visible&&s.push(e,t,l,r,Tv.z,u,i)}}else n.visible&&s.push(e,t,n,r,Tv.z,null,i)}}if(!0===e.isBundleGroup&&void 0!==this.backend.beginBundle){const r=s;(s=this._renderLists.get(e,t)).begin(),r.pushBundle({bundleGroup:e,camera:t,renderList:s}),s.finish()}const n=e.children;for(let e=0,a=n.length;e<a;e++)this._projectObject(n[e],t,r,s,i)}_renderBundles(e,t,r){for(const s of e)this._renderBundle(s,t,r)}_renderTransparents(e,t,r,s,i){if(t.length>0){for(const{material:e}of t)e.side=N;this._renderObjects(t,r,s,i,"backSide");for(const{material:e}of t)e.side=Xe;this._renderObjects(e,r,s,i);for(const{material:e}of t)e.side=Se}else this._renderObjects(e,r,s,i)}_renderObjects(e,t,r,s,i=null){for(let n=0,a=e.length;n<a;n++){const{object:a,geometry:o,material:u,group:l,clippingContext:d}=e[n];this._currentRenderObjectFunction(a,r,t,o,u,l,s,d,i)}}renderObject(e,t,r,s,i,n,a,o=null,u=null){let l,d,c;if(e.onBeforeRender(this,t,r,s,i,n),!0===i.allowOverride&&null!==t.overrideMaterial){const e=t.overrideMaterial;i.positionNode&&i.positionNode.isNode&&(l=e.positionNode,e.positionNode=i.positionNode),e.alphaTest=i.alphaTest,e.alphaMap=i.alphaMap,e.transparent=i.transparent||i.transmission>0,e.isShadowPassMaterial&&(e.side=null===i.shadowSide?i.side:i.shadowSide,i.depthNode&&i.depthNode.isNode&&(c=e.depthNode,e.depthNode=i.depthNode),i.castShadowNode&&i.castShadowNode.isNode&&(d=e.colorNode,e.colorNode=i.castShadowNode),i.castShadowPositionNode&&i.castShadowPositionNode.isNode&&(l=e.positionNode,e.positionNode=i.castShadowPositionNode)),i=e}!0===i.transparent&&i.side===Se&&!1===i.forceSinglePass?(i.side=N,this._handleObjectFunction(e,i,t,r,a,n,o,"backSide"),i.side=Xe,this._handleObjectFunction(e,i,t,r,a,n,o,u),i.side=Se):this._handleObjectFunction(e,i,t,r,a,n,o,u),void 0!==l&&(t.overrideMaterial.positionNode=l),void 0!==c&&(t.overrideMaterial.depthNode=c),void 0!==d&&(t.overrideMaterial.colorNode=d),e.onAfterRender(this,t,r,s,i,n)}_renderObjectDirect(e,t,r,s,i,n,a,o){const u=this._objects.get(e,t,r,s,i,this._currentRenderContext,a,o);u.drawRange=e.geometry.drawRange,u.group=n;const l=this._nodes.needsRefresh(u);if(l&&(this._nodes.updateBefore(u),this._geometries.updateForRender(u),this._nodes.updateForRender(u),this._bindings.updateForRender(u)),this._pipelines.updateForRender(u),null!==this._currentRenderBundle){this.backend.get(this._currentRenderBundle).renderObjects.push(u),u.bundle=this._currentRenderBundle.bundleGroup}this.backend.draw(u,this.info),l&&this._nodes.updateAfter(u)}_createObjectPipeline(e,t,r,s,i,n,a,o){const u=this._objects.get(e,t,r,s,i,this._currentRenderContext,a,o);u.drawRange=e.geometry.drawRange,u.group=n,this._nodes.updateBefore(u),this._geometries.updateForRender(u),this._nodes.updateForRender(u),this._bindings.updateForRender(u),this._pipelines.getForRender(u,this._compilationPromises),this._nodes.updateAfter(u)}get compile(){return this.compileAsync}}class vv{constructor(e=""){this.name=e,this.visibility=0}setVisibility(e){this.visibility|=e}clone(){return Object.assign(new this.constructor,this)}}class Nv extends vv{constructor(e,t=null){super(e),this.isBuffer=!0,this.bytesPerElement=Float32Array.BYTES_PER_ELEMENT,this._buffer=t}get byteLength(){return(e=this._buffer.byteLength)+(Xm-e%Xm)%Xm;var e}get buffer(){return this._buffer}update(){return!0}}class Sv extends Nv{constructor(e,t=null){super(e,t),this.isUniformBuffer=!0}}let wv=0;class Ev extends Sv{constructor(e,t){super("UniformBuffer_"+wv++,e?e.value:null),this.nodeUniform=e,this.groupNode=t}get buffer(){return this.nodeUniform.value}}class Av extends Sv{constructor(e){super(e),this.isUniformsGroup=!0,this._values=null,this.uniforms=[]}addUniform(e){return this.uniforms.push(e),this}removeUniform(e){const t=this.uniforms.indexOf(e);return-1!==t&&this.uniforms.splice(t,1),this}get values(){return null===this._values&&(this._values=Array.from(this.buffer)),this._values}get buffer(){let e=this._buffer;if(null===e){const t=this.byteLength;e=new Float32Array(new ArrayBuffer(t)),this._buffer=e}return e}get byteLength(){let e=0;for(let t=0,r=this.uniforms.length;t<r;t++){const r=this.uniforms[t],{boundary:s,itemSize:i}=r,n=e%Xm;0!==n&&Xm-n-s<0?e+=Xm-n:n%s!=0&&(e+=n%s),r.offset=e/this.bytesPerElement,e+=i*this.bytesPerElement}return Math.ceil(e/Xm)*Xm}update(){let e=!1;for(const t of this.uniforms)!0===this.updateByType(t)&&(e=!0);return e}updateByType(e){return e.isNumberUniform?this.updateNumber(e):e.isVector2Uniform?this.updateVector2(e):e.isVector3Uniform?this.updateVector3(e):e.isVector4Uniform?this.updateVector4(e):e.isColorUniform?this.updateColor(e):e.isMatrix3Uniform?this.updateMatrix3(e):e.isMatrix4Uniform?this.updateMatrix4(e):void console.error("THREE.WebGPUUniformsGroup: Unsupported uniform type.",e)}updateNumber(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,n=e.getType();if(r[i]!==s){this._getBufferForType(n)[i]=r[i]=s,t=!0}return t}updateVector2(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,n=e.getType();if(r[i+0]!==s.x||r[i+1]!==s.y){const e=this._getBufferForType(n);e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,t=!0}return t}updateVector3(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,n=e.getType();if(r[i+0]!==s.x||r[i+1]!==s.y||r[i+2]!==s.z){const e=this._getBufferForType(n);e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,e[i+2]=r[i+2]=s.z,t=!0}return t}updateVector4(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,n=e.getType();if(r[i+0]!==s.x||r[i+1]!==s.y||r[i+2]!==s.z||r[i+4]!==s.w){const e=this._getBufferForType(n);e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,e[i+2]=r[i+2]=s.z,e[i+3]=r[i+3]=s.w,t=!0}return t}updateColor(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset;if(r[i+0]!==s.r||r[i+1]!==s.g||r[i+2]!==s.b){const e=this.buffer;e[i+0]=r[i+0]=s.r,e[i+1]=r[i+1]=s.g,e[i+2]=r[i+2]=s.b,t=!0}return t}updateMatrix3(e){let t=!1;const r=this.values,s=e.getValue().elements,i=e.offset;if(r[i+0]!==s[0]||r[i+1]!==s[1]||r[i+2]!==s[2]||r[i+4]!==s[3]||r[i+5]!==s[4]||r[i+6]!==s[5]||r[i+8]!==s[6]||r[i+9]!==s[7]||r[i+10]!==s[8]){const e=this.buffer;e[i+0]=r[i+0]=s[0],e[i+1]=r[i+1]=s[1],e[i+2]=r[i+2]=s[2],e[i+4]=r[i+4]=s[3],e[i+5]=r[i+5]=s[4],e[i+6]=r[i+6]=s[5],e[i+8]=r[i+8]=s[6],e[i+9]=r[i+9]=s[7],e[i+10]=r[i+10]=s[8],t=!0}return t}updateMatrix4(e){let t=!1;const r=this.values,s=e.getValue().elements,i=e.offset;if(!1===function(e,t,r){for(let s=0,i=t.length;s<i;s++)if(e[r+s]!==t[s])return!1;return!0}(r,s,i)){this.buffer.set(s,i),function(e,t,r){for(let s=0,i=t.length;s<i;s++)e[r+s]=t[s]}(r,s,i),t=!0}return t}_getBufferForType(e){return"int"===e||"ivec2"===e||"ivec3"===e||"ivec4"===e?new Int32Array(this.buffer.buffer):"uint"===e||"uvec2"===e||"uvec3"===e||"uvec4"===e?new Uint32Array(this.buffer.buffer):this.buffer}}let Rv=0;class Cv extends Av{constructor(e,t){super(e),this.id=Rv++,this.groupNode=t,this.isNodeUniformsGroup=!0}}let Mv=0;class Pv extends vv{constructor(e,t){super(e),this.id=Mv++,this.texture=t,this.version=t?t.version:0,this.store=!1,this.generation=null,this.isSampledTexture=!0}needsBindingsUpdate(e){const{texture:t}=this;return e!==this.generation?(this.generation=e,!0):t.isVideoTexture}update(){const{texture:e,version:t}=this;return t!==e.version&&(this.version=e.version,!0)}}class Lv extends Pv{constructor(e,t,r,s=null){super(e,t?t.value:null),this.textureNode=t,this.groupNode=r,this.access=s}needsBindingsUpdate(e){return this.textureNode.value!==this.texture||super.needsBindingsUpdate(e)}update(){const{textureNode:e}=this;return this.texture!==e.value?(this.texture=e.value,!0):super.update()}}class Fv extends Lv{constructor(e,t,r,s=null){super(e,t,r,s),this.isSampledCubeTexture=!0}}class Bv extends Lv{constructor(e,t,r,s=null){super(e,t,r,s),this.isSampledTexture3D=!0}}const Dv={textureDimensions:"textureSize",equals:"equal"},Iv={low:"lowp",medium:"mediump",high:"highp"},Vv={swizzleAssign:!0,storageBuffer:!1},Uv={perspective:"smooth",linear:"noperspective"},Ov={centroid:"centroid","flat first":"flat","flat either":"flat"},kv="\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\nprecision highp sampler3D;\nprecision highp samplerCube;\nprecision highp sampler2DArray;\n\nprecision highp usampler2D;\nprecision highp usampler3D;\nprecision highp usamplerCube;\nprecision highp usampler2DArray;\n\nprecision highp isampler2D;\nprecision highp isampler3D;\nprecision highp isamplerCube;\nprecision highp isampler2DArray;\n\nprecision lowp sampler2DShadow;\nprecision lowp sampler2DArrayShadow;\nprecision lowp samplerCubeShadow;\n";class Gv extends w_{constructor(e,t){super(e,t,new H_),this.uniformGroups={},this.transforms=[],this.extensions={},this.builtins={vertex:[],fragment:[],compute:[]}}needsToWorkingColorSpace(e){return!0===e.isVideoTexture&&e.colorSpace!==x}getMethod(e){return Dv[e]||e}getOutputStructName(){return""}buildFunctionCode(e){const t=e.layout,r=this.flowShaderNode(e),s=[];for(const e of t.inputs)s.push(this.getType(e.type)+" "+e.name);return`${this.getType(t.type)} ${t.name}( ${s.join(", ")} ) {\n\n\t${r.vars}\n\n${r.code}\n\treturn ${r.result};\n\n}`}setupPBO(e){const t=e.value;if(void 0===t.pbo){const e=t.array,r=t.count*t.itemSize,{itemSize:s}=t,i=t.array.constructor.name.toLowerCase().includes("int");let n=i?at:ot;2===s?n=i?ct:Ue:3===s?n=i?ht:pt:4===s&&(n=i?gt:ce);const a={Float32Array:L,Uint8Array:Me,Uint16Array:dt,Uint32Array:b,Int8Array:lt,Int16Array:ut,Int32Array:T,Uint8ClampedArray:Me},o=Math.pow(2,Math.ceil(Math.log2(Math.sqrt(r/s))));let u=Math.ceil(r/s/o);o*u*s<r&&u++;const l=o*u*s,d=new e.constructor(l);d.set(e,0),t.array=d;const c=new nt(t.array,o,u,n,a[t.array.constructor.name]||L);c.needsUpdate=!0,c.isPBOTexture=!0;const h=new Ku(c,null,null);h.setPrecision("high"),t.pboNode=h,t.pbo=h.value,this.getUniformFromNode(t.pboNode,"texture",this.shaderStage,this.context.label)}}getPropertyName(e,t=this.shaderStage){return e.isNodeUniform&&!0!==e.node.isTextureNode&&!0!==e.node.isBufferNode?t.charAt(0)+"_"+e.name:super.getPropertyName(e,t)}generatePBO(e){const{node:t,indexNode:r}=e,s=t.value;if(this.renderer.backend.has(s)){this.renderer.backend.get(s).pbo=s.pbo}const i=this.getUniformFromNode(s.pboNode,"texture",this.shaderStage,this.context.label),n=this.getPropertyName(i);this.increaseUsage(r);const a=r.build(this,"uint"),o=this.getDataFromNode(e);let u=o.propertyName;if(void 0===u){const r=this.getVarFromNode(e);u=this.getPropertyName(r);const i=this.getDataFromNode(t);let l=i.propertySizeName;void 0===l&&(l=u+"Size",this.getVarFromNode(t,l,"uint"),this.addLineFlowCode(`${l} = uint( textureSize( ${n}, 0 ).x )`,e),i.propertySizeName=l);const{itemSize:d}=s,c="."+zs.join("").slice(0,d),h=`ivec2(${a} % ${l}, ${a} / ${l})`,p=this.generateTextureLoad(null,n,h,null,"0");let g="vec4";s.pbo.type===b?g="uvec4":s.pbo.type===T&&(g="ivec4"),this.addLineFlowCode(`${u} = ${g}(${p})${c}`,e),o.propertyName=u}return u}generateTextureLoad(e,t,r,s,i="0"){return s?`texelFetch( ${t}, ivec3( ${r}, ${s} ), ${i} )`:`texelFetch( ${t}, ${r}, ${i} )`}generateTexture(e,t,r,s){return e.isDepthTexture?(s&&(r=`vec4( ${r}, ${s} )`),`texture( ${t}, ${r} ).x`):(s&&(r=`vec3( ${r}, ${s} )`),`texture( ${t}, ${r} )`)}generateTextureLevel(e,t,r,s){return`textureLod( ${t}, ${r}, ${s} )`}generateTextureBias(e,t,r,s){return`texture( ${t}, ${r}, ${s} )`}generateTextureGrad(e,t,r,s){return`textureGrad( ${t}, ${r}, ${s[0]}, ${s[1]} )`}generateTextureCompare(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return i?`texture( ${t}, vec4( ${r}, ${i}, ${s} ) )`:`texture( ${t}, vec3( ${r}, ${s} ) )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${n} shader.`)}getVars(e){const t=[],r=this.vars[e];if(void 0!==r)for(const e of r)t.push(`${this.getVar(e.type,e.name,e.count)};`);return t.join("\n\t")}getUniforms(e){const t=this.uniforms[e],r=[],s={};for(const i of t){let t=null,n=!1;if("texture"===i.type||"texture3D"===i.type){const e=i.node.value;let r="";!0!==e.isDataTexture&&!0!==e.isData3DTexture||(e.type===b?r="u":e.type===T&&(r="i")),t="texture3D"===i.type&&!1===e.isTextureArray?`${r}sampler3D ${i.name};`:e.compareFunction?!0===e.isDepthArrayTexture?`sampler2DArrayShadow ${i.name};`:`sampler2DShadow ${i.name};`:!0===e.isDataArrayTexture||!0===e.isCompressedArrayTexture||!0===e.isTextureArray?`${r}sampler2DArray ${i.name};`:`${r}sampler2D ${i.name};`}else if("cubeTexture"===i.type)t=`samplerCube ${i.name};`;else if("buffer"===i.type){const e=i.node,r=this.getType(e.bufferType),s=e.bufferCount,n=s>0?s:"";t=`${e.name} {\n\t${r} ${i.name}[${n}];\n};\n`}else{t=`${this.getVectorType(i.type)} ${this.getPropertyName(i,e)};`,n=!0}const a=i.node.precision;if(null!==a&&(t=Iv[a]+" "+t),n){t="\t"+t;const e=i.groupNode.name;(s[e]||(s[e]=[])).push(t)}else t="uniform "+t,r.push(t)}let i="";for(const t in s){const r=s[t];i+=this._getGLSLUniformStruct(e+"_"+t,r.join("\n"))+"\n"}return i+=r.join("\n"),i}getTypeFromAttribute(e){let t=super.getTypeFromAttribute(e);if(/^[iu]/.test(t)&&e.gpuType!==T){let r=e;e.isInterleavedBufferAttribute&&(r=e.data);const s=r.array;!1==(s instanceof Uint32Array||s instanceof Int32Array)&&(t=t.slice(1))}return t}getAttributes(e){let t="";if("vertex"===e||"compute"===e){const e=this.getAttributesArray();let r=0;for(const s of e)t+=`layout( location = ${r++} ) in ${s.type} ${s.name};\n`}return t}getStructMembers(e){const t=[];for(const r of e.members)t.push(`\t${r.type} ${r.name};`);return t.join("\n")}getStructs(e){const t=[],r=this.structs[e],s=[];for(const e of r)if(e.output)for(const t of e.members)s.push(`layout( location = ${t.index} ) out ${t.type} ${t.name};`);else{let r="struct "+e.name+" {\n";r+=this.getStructMembers(e),r+="\n};\n",t.push(r)}return 0===s.length&&s.push("layout( location = 0 ) out vec4 fragColor;"),"\n"+s.join("\n")+"\n\n"+t.join("\n")}getVaryings(e){let t="";const r=this.varyings;if("vertex"===e||"compute"===e)for(const s of r){"compute"===e&&(s.needsInterpolation=!0);const r=this.getType(s.type);if(s.needsInterpolation)if(s.interpolationType){t+=`${Uv[s.interpolationType]||s.interpolationType} ${Ov[s.interpolationSampling]||""} out ${r} ${s.name};\n`}else{t+=`${r.includes("int")||r.includes("uv")||r.includes("iv")?"flat ":""}out ${r} ${s.name};\n`}else t+=`${r} ${s.name};\n`}else if("fragment"===e)for(const e of r)if(e.needsInterpolation){const r=this.getType(e.type);if(e.interpolationType){t+=`${Uv[e.interpolationType]||e.interpolationType} ${Ov[e.interpolationSampling]||""} in ${r} ${e.name};\n`}else{t+=`${r.includes("int")||r.includes("uv")||r.includes("iv")?"flat ":""}in ${r} ${e.name};\n`}}for(const r of this.builtins[e])t+=`${r};\n`;return t}getVertexIndex(){return"uint( gl_VertexID )"}getInstanceIndex(){return"uint( gl_InstanceID )"}getInvocationLocalIndex(){return`uint( gl_InstanceID ) % ${this.object.workgroupSize.reduce(((e,t)=>e*t),1)}u`}getDrawIndex(){return this.renderer.backend.extensions.has("WEBGL_multi_draw")?"uint( gl_DrawID )":null}getFrontFacing(){return"gl_FrontFacing"}getFragCoord(){return"gl_FragCoord.xy"}getFragDepth(){return"gl_FragDepth"}enableExtension(e,t,r=this.shaderStage){const s=this.extensions[r]||(this.extensions[r]=new Map);!1===s.has(e)&&s.set(e,{name:e,behavior:t})}getExtensions(e){const t=[];if("vertex"===e){const t=this.renderer.backend.extensions;this.object.isBatchedMesh&&t.has("WEBGL_multi_draw")&&this.enableExtension("GL_ANGLE_multi_draw","require",e)}const r=this.extensions[e];if(void 0!==r)for(const{name:e,behavior:s}of r.values())t.push(`#extension ${e} : ${s}`);return t.join("\n")}getClipDistance(){return"gl_ClipDistance"}isAvailable(e){let t=Vv[e];if(void 0===t){let r;switch(t=!1,e){case"float32Filterable":r="OES_texture_float_linear";break;case"clipDistance":r="WEBGL_clip_cull_distance"}if(void 0!==r){const e=this.renderer.backend.extensions;e.has(r)&&(e.get(r),t=!0)}Vv[e]=t}return t}isFlipY(){return!0}enableHardwareClipping(e){this.enableExtension("GL_ANGLE_clip_cull_distance","require"),this.builtins.vertex.push(`out float gl_ClipDistance[ ${e} ]`)}enableMultiview(){this.enableExtension("GL_OVR_multiview2","require","fragment"),this.enableExtension("GL_OVR_multiview2","require","vertex"),this.builtins.vertex.push("layout(num_views = 2) in")}registerTransform(e,t){this.transforms.push({varyingName:e,attributeNode:t})}getTransforms(){const e=this.transforms;let t="";for(let r=0;r<e.length;r++){const s=e[r],i=this.getPropertyName(s.attributeNode);i&&(t+=`${s.varyingName} = ${i};\n\t`)}return t}_getGLSLUniformStruct(e,t){return`\nlayout( std140 ) uniform ${e} {\n${t}\n};`}_getGLSLVertexCode(e){return`#version 300 es\n\n${this.getSignature()}\n\n// extensions\n${e.extensions}\n\n// precision\n${kv}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\n\n// attributes\n${e.attributes}\n\n// codes\n${e.codes}\n\nvoid main() {\n\n\t// vars\n\t${e.vars}\n\n\t// transforms\n\t${e.transforms}\n\n\t// flow\n\t${e.flow}\n\n\tgl_PointSize = 1.0;\n\n}\n`}_getGLSLFragmentCode(e){return`#version 300 es\n\n${this.getSignature()}\n\n// extensions\n${e.extensions}\n\n// precision\n${kv}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\n\n// codes\n${e.codes}\n\n// structs\n${e.structs}\n\nvoid main() {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}buildCode(){const e=null!==this.material?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){let r="// code\n\n";r+=this.flowCode[t];const s=this.flowNodes[t],i=s[s.length-1];for(const e of s){const s=this.getFlowData(e),n=e.name;n&&(r.length>0&&(r+="\n"),r+=`\t// flow -> ${n}\n\t`),r+=`${s.code}\n\t`,e===i&&"compute"!==t&&(r+="// result\n\t","vertex"===t?(r+="gl_Position = ",r+=`${s.result};`):"fragment"===t&&(e.outputNode.isOutputStructNode||(r+="fragColor = ",r+=`${s.result};`)))}const n=e[t];n.extensions=this.getExtensions(t),n.uniforms=this.getUniforms(t),n.attributes=this.getAttributes(t),n.varyings=this.getVaryings(t),n.vars=this.getVars(t),n.structs=this.getStructs(t),n.codes=this.getCodes(t),n.transforms=this.getTransforms(t),n.flow=r}null!==this.material?(this.vertexShader=this._getGLSLVertexCode(e.vertex),this.fragmentShader=this._getGLSLFragmentCode(e.fragment)):this.computeShader=this._getGLSLVertexCode(e.compute)}getUniformFromNode(e,t,r,s=null){const i=super.getUniformFromNode(e,t,r,s),n=this.getDataFromNode(e,r,this.globalCache);let a=n.uniformGPU;if(void 0===a){const s=e.groupNode,o=s.name,u=this.getBindGroupArray(o,r);if("texture"===t)a=new Lv(i.name,i.node,s),u.push(a);else if("cubeTexture"===t)a=new Fv(i.name,i.node,s),u.push(a);else if("texture3D"===t)a=new Bv(i.name,i.node,s),u.push(a);else if("buffer"===t){e.name=`NodeBuffer_${e.id}`,i.name=`buffer${e.id}`;const t=new Ev(e,s);t.name=e.name,u.push(t),a=t}else{const e=this.uniformGroups[r]||(this.uniformGroups[r]={});let n=e[o];void 0===n&&(n=new Cv(r+"_"+o,s),e[o]=n,u.push(n)),a=this.getNodeUniform(i,t),n.addUniform(a)}n.uniformGPU=a}return i}}let zv=null,$v=null;class Hv{constructor(e={}){this.parameters=Object.assign({},e),this.data=new WeakMap,this.renderer=null,this.domElement=null,this.timestampQueryPool={render:null,compute:null},this.trackTimestamp=!0===e.trackTimestamp}async init(e){this.renderer=e}get coordinateSystem(){}beginRender(){}finishRender(){}beginCompute(){}finishCompute(){}draw(){}compute(){}createProgram(){}destroyProgram(){}createBindings(){}updateBindings(){}updateBinding(){}createRenderPipeline(){}createComputePipeline(){}needsRenderUpdate(){}getRenderCacheKey(){}createNodeBuilder(){}createSampler(){}destroySampler(){}createDefaultTexture(){}createTexture(){}updateTexture(){}generateMipmaps(){}destroyTexture(){}async copyTextureToBuffer(){}copyTextureToTexture(){}copyFramebufferToTexture(){}createAttribute(){}createIndexAttribute(){}createStorageAttribute(){}updateAttribute(){}destroyAttribute(){}getContext(){}updateSize(){}updateViewport(){}isOccluded(){}async resolveTimestampsAsync(e="render"){if(!this.trackTimestamp)return void mt("WebGPURenderer: Timestamp tracking is disabled.");const t=this.timestampQueryPool[e];if(!t)return void mt(`WebGPURenderer: No timestamp query pool for type '${e}' found.`);const r=await t.resolveQueriesAsync();return this.renderer.info[e].timestamp=r,r}async waitForGPU(){}async getArrayBufferAsync(){}async hasFeatureAsync(){}hasFeature(){}getMaxAnisotropy(){}getDrawingBufferSize(){return zv=zv||new t,this.renderer.getDrawingBufferSize(zv)}setScissorTest(){}getClearColor(){const e=this.renderer;return $v=$v||new Nf,e.getClearColor($v),$v.getRGB($v),$v}getDomElement(){let e=this.domElement;return null===e&&(e=void 0!==this.parameters.canvas?this.parameters.canvas:ft(),"setAttribute"in e&&e.setAttribute("data-engine",`three.js r${We} webgpu`),this.domElement=e),e}set(e,t){this.data.set(e,t)}get(e){let t=this.data.get(e);return void 0===t&&(t={},this.data.set(e,t)),t}has(e){return this.data.has(e)}delete(e){this.data.delete(e)}dispose(){}}let Wv,jv,qv=0;class Xv{constructor(e,t){this.buffers=[e.bufferGPU,t],this.type=e.type,this.bufferType=e.bufferType,this.pbo=e.pbo,this.byteLength=e.byteLength,this.bytesPerElement=e.BYTES_PER_ELEMENT,this.version=e.version,this.isInteger=e.isInteger,this.activeBufferIndex=0,this.baseId=e.id}get id(){return`${this.baseId}|${this.activeBufferIndex}`}get bufferGPU(){return this.buffers[this.activeBufferIndex]}get transformBuffer(){return this.buffers[1^this.activeBufferIndex]}switchBuffers(){this.activeBufferIndex^=1}}class Kv{constructor(e){this.backend=e}createAttribute(e,t){const r=this.backend,{gl:s}=r,i=e.array,n=e.usage||s.STATIC_DRAW,a=e.isInterleavedBufferAttribute?e.data:e,o=r.get(a);let u,l=o.bufferGPU;if(void 0===l&&(l=this._createBuffer(s,t,i,n),o.bufferGPU=l,o.bufferType=t,o.version=a.version),i instanceof Float32Array)u=s.FLOAT;else if(i instanceof Uint16Array)u=e.isFloat16BufferAttribute?s.HALF_FLOAT:s.UNSIGNED_SHORT;else if(i instanceof Int16Array)u=s.SHORT;else if(i instanceof Uint32Array)u=s.UNSIGNED_INT;else if(i instanceof Int32Array)u=s.INT;else if(i instanceof Int8Array)u=s.BYTE;else if(i instanceof Uint8Array)u=s.UNSIGNED_BYTE;else{if(!(i instanceof Uint8ClampedArray))throw new Error("THREE.WebGLBackend: Unsupported buffer data format: "+i);u=s.UNSIGNED_BYTE}let d={bufferGPU:l,bufferType:t,type:u,byteLength:i.byteLength,bytesPerElement:i.BYTES_PER_ELEMENT,version:e.version,pbo:e.pbo,isInteger:u===s.INT||u===s.UNSIGNED_INT||e.gpuType===T,id:qv++};if(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute){const e=this._createBuffer(s,t,i,n);d=new Xv(d,e)}r.set(e,d)}updateAttribute(e){const t=this.backend,{gl:r}=t,s=e.array,i=e.isInterleavedBufferAttribute?e.data:e,n=t.get(i),a=n.bufferType,o=e.isInterleavedBufferAttribute?e.data.updateRanges:e.updateRanges;if(r.bindBuffer(a,n.bufferGPU),0===o.length)r.bufferSubData(a,0,s);else{for(let e=0,t=o.length;e<t;e++){const t=o[e];r.bufferSubData(a,t.start*s.BYTES_PER_ELEMENT,s,t.start,t.count)}i.clearUpdateRanges()}r.bindBuffer(a,null),n.version=i.version}destroyAttribute(e){const t=this.backend,{gl:r}=t;e.isInterleavedBufferAttribute&&t.delete(e.data);const s=t.get(e);r.deleteBuffer(s.bufferGPU),t.delete(e)}async getArrayBufferAsync(e){const t=this.backend,{gl:r}=t,s=e.isInterleavedBufferAttribute?e.data:e,{bufferGPU:i}=t.get(s),n=e.array,a=n.byteLength;r.bindBuffer(r.COPY_READ_BUFFER,i);const o=r.createBuffer();r.bindBuffer(r.COPY_WRITE_BUFFER,o),r.bufferData(r.COPY_WRITE_BUFFER,a,r.STREAM_READ),r.copyBufferSubData(r.COPY_READ_BUFFER,r.COPY_WRITE_BUFFER,0,0,a),await t.utils._clientWaitAsync();const u=new e.array.constructor(n.length);return r.bindBuffer(r.COPY_WRITE_BUFFER,o),r.getBufferSubData(r.COPY_WRITE_BUFFER,0,u),r.deleteBuffer(o),r.bindBuffer(r.COPY_READ_BUFFER,null),r.bindBuffer(r.COPY_WRITE_BUFFER,null),u.buffer}_createBuffer(e,t,r,s){const i=e.createBuffer();return e.bindBuffer(t,i),e.bufferData(t,r,s),e.bindBuffer(t,null),i}}class Yv{constructor(e){this.backend=e,this.gl=this.backend.gl,this.enabled={},this.currentFlipSided=null,this.currentCullFace=null,this.currentProgram=null,this.currentBlendingEnabled=!1,this.currentBlending=null,this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentPremultipledAlpha=null,this.currentPolygonOffsetFactor=null,this.currentPolygonOffsetUnits=null,this.currentColorMask=null,this.currentDepthFunc=null,this.currentDepthMask=null,this.currentStencilFunc=null,this.currentStencilRef=null,this.currentStencilFuncMask=null,this.currentStencilFail=null,this.currentStencilZFail=null,this.currentStencilZPass=null,this.currentStencilMask=null,this.currentLineWidth=null,this.currentClippingPlanes=0,this.currentVAO=null,this.currentIndex=null,this.currentBoundFramebuffers={},this.currentDrawbuffers=new WeakMap,this.maxTextures=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS),this.currentTextureSlot=null,this.currentBoundTextures={},this.currentBoundBufferBases={},this._init()}_init(){const e=this.gl;Wv={[Ye]:e.FUNC_ADD,[xt]:e.FUNC_SUBTRACT,[yt]:e.FUNC_REVERSE_SUBTRACT},jv={[Qe]:e.ZERO,[Rt]:e.ONE,[At]:e.SRC_COLOR,[Et]:e.SRC_ALPHA,[wt]:e.SRC_ALPHA_SATURATE,[St]:e.DST_COLOR,[Nt]:e.DST_ALPHA,[vt]:e.ONE_MINUS_SRC_COLOR,[_t]:e.ONE_MINUS_SRC_ALPHA,[Tt]:e.ONE_MINUS_DST_COLOR,[bt]:e.ONE_MINUS_DST_ALPHA};const t=e.getParameter(e.SCISSOR_BOX),r=e.getParameter(e.VIEWPORT);this.currentScissor=(new s).fromArray(t),this.currentViewport=(new s).fromArray(r),this._tempVec4=new s}enable(e){const{enabled:t}=this;!0!==t[e]&&(this.gl.enable(e),t[e]=!0)}disable(e){const{enabled:t}=this;!1!==t[e]&&(this.gl.disable(e),t[e]=!1)}setFlipSided(e){if(this.currentFlipSided!==e){const{gl:t}=this;e?t.frontFace(t.CW):t.frontFace(t.CCW),this.currentFlipSided=e}}setCullFace(e){const{gl:t}=this;e!==Ct?(this.enable(t.CULL_FACE),e!==this.currentCullFace&&(e===Mt?t.cullFace(t.BACK):e===Pt?t.cullFace(t.FRONT):t.cullFace(t.FRONT_AND_BACK))):this.disable(t.CULL_FACE),this.currentCullFace=e}setLineWidth(e){const{currentLineWidth:t,gl:r}=this;e!==t&&(r.lineWidth(e),this.currentLineWidth=e)}setBlending(e,t,r,s,i,n,a,o){const{gl:u}=this;if(e!==k){if(!1===this.currentBlendingEnabled&&(this.enable(u.BLEND),this.currentBlendingEnabled=!0),e===Ke)i=i||t,n=n||r,a=a||s,t===this.currentBlendEquation&&i===this.currentBlendEquationAlpha||(u.blendEquationSeparate(Wv[t],Wv[i]),this.currentBlendEquation=t,this.currentBlendEquationAlpha=i),r===this.currentBlendSrc&&s===this.currentBlendDst&&n===this.currentBlendSrcAlpha&&a===this.currentBlendDstAlpha||(u.blendFuncSeparate(jv[r],jv[s],jv[n],jv[a]),this.currentBlendSrc=r,this.currentBlendDst=s,this.currentBlendSrcAlpha=n,this.currentBlendDstAlpha=a),this.currentBlending=e,this.currentPremultipledAlpha=!1;else if(e!==this.currentBlending||o!==this.currentPremultipledAlpha){if(this.currentBlendEquation===Ye&&this.currentBlendEquationAlpha===Ye||(u.blendEquation(u.FUNC_ADD),this.currentBlendEquation=Ye,this.currentBlendEquationAlpha=Ye),o)switch(e){case V:u.blendFuncSeparate(u.ONE,u.ONE_MINUS_SRC_ALPHA,u.ONE,u.ONE_MINUS_SRC_ALPHA);break;case Bt:u.blendFunc(u.ONE,u.ONE);break;case Ft:u.blendFuncSeparate(u.ZERO,u.ONE_MINUS_SRC_COLOR,u.ZERO,u.ONE);break;case Lt:u.blendFuncSeparate(u.ZERO,u.SRC_COLOR,u.ZERO,u.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case V:u.blendFuncSeparate(u.SRC_ALPHA,u.ONE_MINUS_SRC_ALPHA,u.ONE,u.ONE_MINUS_SRC_ALPHA);break;case Bt:u.blendFunc(u.SRC_ALPHA,u.ONE);break;case Ft:u.blendFuncSeparate(u.ZERO,u.ONE_MINUS_SRC_COLOR,u.ZERO,u.ONE);break;case Lt:u.blendFunc(u.ZERO,u.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentBlending=e,this.currentPremultipledAlpha=o}}else!0===this.currentBlendingEnabled&&(this.disable(u.BLEND),this.currentBlendingEnabled=!1)}setColorMask(e){this.currentColorMask!==e&&(this.gl.colorMask(e,e,e,e),this.currentColorMask=e)}setDepthTest(e){const{gl:t}=this;e?this.enable(t.DEPTH_TEST):this.disable(t.DEPTH_TEST)}setDepthMask(e){this.currentDepthMask!==e&&(this.gl.depthMask(e),this.currentDepthMask=e)}setDepthFunc(e){if(this.currentDepthFunc!==e){const{gl:t}=this;switch(e){case zt:t.depthFunc(t.NEVER);break;case Gt:t.depthFunc(t.ALWAYS);break;case kt:t.depthFunc(t.LESS);break;case Ot:t.depthFunc(t.LEQUAL);break;case Ut:t.depthFunc(t.EQUAL);break;case Vt:t.depthFunc(t.GEQUAL);break;case It:t.depthFunc(t.GREATER);break;case Dt:t.depthFunc(t.NOTEQUAL);break;default:t.depthFunc(t.LEQUAL)}this.currentDepthFunc=e}}scissor(e,t,r,s){const i=this._tempVec4.set(e,t,r,s);if(!1===this.currentScissor.equals(i)){const{gl:e}=this;e.scissor(i.x,i.y,i.z,i.w),this.currentScissor.copy(i)}}viewport(e,t,r,s){const i=this._tempVec4.set(e,t,r,s);if(!1===this.currentViewport.equals(i)){const{gl:e}=this;e.viewport(i.x,i.y,i.z,i.w),this.currentViewport.copy(i)}}setScissorTest(e){const t=this.gl;e?t.enable(t.SCISSOR_TEST):t.disable(t.SCISSOR_TEST)}setStencilTest(e){const{gl:t}=this;e?this.enable(t.STENCIL_TEST):this.disable(t.STENCIL_TEST)}setStencilMask(e){this.currentStencilMask!==e&&(this.gl.stencilMask(e),this.currentStencilMask=e)}setStencilFunc(e,t,r){this.currentStencilFunc===e&&this.currentStencilRef===t&&this.currentStencilFuncMask===r||(this.gl.stencilFunc(e,t,r),this.currentStencilFunc=e,this.currentStencilRef=t,this.currentStencilFuncMask=r)}setStencilOp(e,t,r){this.currentStencilFail===e&&this.currentStencilZFail===t&&this.currentStencilZPass===r||(this.gl.stencilOp(e,t,r),this.currentStencilFail=e,this.currentStencilZFail=t,this.currentStencilZPass=r)}setMaterial(e,t,r){const{gl:s}=this;e.side===Se?this.disable(s.CULL_FACE):this.enable(s.CULL_FACE);let i=e.side===N;t&&(i=!i),this.setFlipSided(i),e.blending===V&&!1===e.transparent?this.setBlending(k):this.setBlending(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha),this.setDepthFunc(e.depthFunc),this.setDepthTest(e.depthTest),this.setDepthMask(e.depthWrite),this.setColorMask(e.colorWrite);const n=e.stencilWrite;if(this.setStencilTest(n),n&&(this.setStencilMask(e.stencilWriteMask),this.setStencilFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask),this.setStencilOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),this.setPolygonOffset(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits),!0===e.alphaToCoverage&&this.backend.renderer.samples>1?this.enable(s.SAMPLE_ALPHA_TO_COVERAGE):this.disable(s.SAMPLE_ALPHA_TO_COVERAGE),r>0&&this.currentClippingPlanes!==r){const e=12288;for(let t=0;t<8;t++)t<r?this.enable(e+t):this.disable(e+t)}}setPolygonOffset(e,t,r){const{gl:s}=this;e?(this.enable(s.POLYGON_OFFSET_FILL),this.currentPolygonOffsetFactor===t&&this.currentPolygonOffsetUnits===r||(s.polygonOffset(t,r),this.currentPolygonOffsetFactor=t,this.currentPolygonOffsetUnits=r)):this.disable(s.POLYGON_OFFSET_FILL)}useProgram(e){return this.currentProgram!==e&&(this.gl.useProgram(e),this.currentProgram=e,!0)}setVertexState(e,t=null){const r=this.gl;return(this.currentVAO!==e||this.currentIndex!==t)&&(r.bindVertexArray(e),null!==t&&r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,t),this.currentVAO=e,this.currentIndex=t,!0)}resetVertexState(){const e=this.gl;e.bindVertexArray(null),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null),this.currentVAO=null,this.currentIndex=null}bindFramebuffer(e,t){const{gl:r,currentBoundFramebuffers:s}=this;return s[e]!==t&&(r.bindFramebuffer(e,t),s[e]=t,e===r.DRAW_FRAMEBUFFER&&(s[r.FRAMEBUFFER]=t),e===r.FRAMEBUFFER&&(s[r.DRAW_FRAMEBUFFER]=t),!0)}drawBuffers(e,t){const{gl:r}=this;let s=[],i=!1;if(null!==e.textures){s=this.currentDrawbuffers.get(t),void 0===s&&(s=[],this.currentDrawbuffers.set(t,s));const n=e.textures;if(s.length!==n.length||s[0]!==r.COLOR_ATTACHMENT0){for(let e=0,t=n.length;e<t;e++)s[e]=r.COLOR_ATTACHMENT0+e;s.length=n.length,i=!0}}else s[0]!==r.BACK&&(s[0]=r.BACK,i=!0);i&&r.drawBuffers(s)}activeTexture(e){const{gl:t,currentTextureSlot:r,maxTextures:s}=this;void 0===e&&(e=t.TEXTURE0+s-1),r!==e&&(t.activeTexture(e),this.currentTextureSlot=e)}bindTexture(e,t,r){const{gl:s,currentTextureSlot:i,currentBoundTextures:n,maxTextures:a}=this;void 0===r&&(r=null===i?s.TEXTURE0+a-1:i);let o=n[r];void 0===o&&(o={type:void 0,texture:void 0},n[r]=o),o.type===e&&o.texture===t||(i!==r&&(s.activeTexture(r),this.currentTextureSlot=r),s.bindTexture(e,t),o.type=e,o.texture=t)}bindBufferBase(e,t,r){const{gl:s}=this,i=`${e}-${t}`;return this.currentBoundBufferBases[i]!==r&&(s.bindBufferBase(e,t,r),this.currentBoundBufferBases[i]=r,!0)}unbindTexture(){const{gl:e,currentTextureSlot:t,currentBoundTextures:r}=this,s=r[t];void 0!==s&&void 0!==s.type&&(e.bindTexture(s.type,null),s.type=void 0,s.texture=void 0)}}class Qv{constructor(e){this.backend=e,this.gl=this.backend.gl,this.extensions=e.extensions}convert(e,t=x){const{gl:r,extensions:s}=this;let i;if(e===Me)return r.UNSIGNED_BYTE;if(e===$t)return r.UNSIGNED_SHORT_4_4_4_4;if(e===Ht)return r.UNSIGNED_SHORT_5_5_5_1;if(e===Wt)return r.UNSIGNED_INT_5_9_9_9_REV;if(e===lt)return r.BYTE;if(e===ut)return r.SHORT;if(e===dt)return r.UNSIGNED_SHORT;if(e===T)return r.INT;if(e===b)return r.UNSIGNED_INT;if(e===L)return r.FLOAT;if(e===he)return r.HALF_FLOAT;if(e===jt)return r.ALPHA;if(e===pt)return r.RGB;if(e===ce)return r.RGBA;if(e===Re)return r.DEPTH_COMPONENT;if(e===Ae)return r.DEPTH_STENCIL;if(e===ot)return r.RED;if(e===at)return r.RED_INTEGER;if(e===Ue)return r.RG;if(e===ct)return r.RG_INTEGER;if(e===gt)return r.RGBA_INTEGER;if(e===qt||e===Xt||e===Kt||e===Yt)if(t===z){if(i=s.get("WEBGL_compressed_texture_s3tc_srgb"),null===i)return null;if(e===qt)return i.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(e===Xt)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(e===Kt)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(e===Yt)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(i=s.get("WEBGL_compressed_texture_s3tc"),null===i)return null;if(e===qt)return i.COMPRESSED_RGB_S3TC_DXT1_EXT;if(e===Xt)return i.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(e===Kt)return i.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(e===Yt)return i.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(e===Qt||e===Zt||e===Jt||e===er){if(i=s.get("WEBGL_compressed_texture_pvrtc"),null===i)return null;if(e===Qt)return i.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(e===Zt)return i.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(e===Jt)return i.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(e===er)return i.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(e===tr||e===rr||e===sr){if(i=s.get("WEBGL_compressed_texture_etc"),null===i)return null;if(e===tr||e===rr)return t===z?i.COMPRESSED_SRGB8_ETC2:i.COMPRESSED_RGB8_ETC2;if(e===sr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:i.COMPRESSED_RGBA8_ETC2_EAC}if(e===ir||e===nr||e===ar||e===or||e===ur||e===lr||e===dr||e===cr||e===hr||e===pr||e===gr||e===mr||e===fr||e===yr){if(i=s.get("WEBGL_compressed_texture_astc"),null===i)return null;if(e===ir)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:i.COMPRESSED_RGBA_ASTC_4x4_KHR;if(e===nr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:i.COMPRESSED_RGBA_ASTC_5x4_KHR;if(e===ar)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:i.COMPRESSED_RGBA_ASTC_5x5_KHR;if(e===or)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:i.COMPRESSED_RGBA_ASTC_6x5_KHR;if(e===ur)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:i.COMPRESSED_RGBA_ASTC_6x6_KHR;if(e===lr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:i.COMPRESSED_RGBA_ASTC_8x5_KHR;if(e===dr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:i.COMPRESSED_RGBA_ASTC_8x6_KHR;if(e===cr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:i.COMPRESSED_RGBA_ASTC_8x8_KHR;if(e===hr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:i.COMPRESSED_RGBA_ASTC_10x5_KHR;if(e===pr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:i.COMPRESSED_RGBA_ASTC_10x6_KHR;if(e===gr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:i.COMPRESSED_RGBA_ASTC_10x8_KHR;if(e===mr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:i.COMPRESSED_RGBA_ASTC_10x10_KHR;if(e===fr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:i.COMPRESSED_RGBA_ASTC_12x10_KHR;if(e===yr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:i.COMPRESSED_RGBA_ASTC_12x12_KHR}if(e===xr){if(i=s.get("EXT_texture_compression_bptc"),null===i)return null;if(e===xr)return t===z?i.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:i.COMPRESSED_RGBA_BPTC_UNORM_EXT}if(e===br||e===Tr||e===_r||e===vr){if(i=s.get("EXT_texture_compression_rgtc"),null===i)return null;if(e===xr)return i.COMPRESSED_RED_RGTC1_EXT;if(e===Tr)return i.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(e===_r)return i.COMPRESSED_RED_GREEN_RGTC2_EXT;if(e===vr)return i.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return e===Ce?r.UNSIGNED_INT_24_8:void 0!==r[e]?r[e]:null}_clientWaitAsync(){const{gl:e}=this,t=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0);return e.flush(),new Promise(((r,s)=>{!function i(){const n=e.clientWaitSync(t,e.SYNC_FLUSH_COMMANDS_BIT,0);if(n===e.WAIT_FAILED)return e.deleteSync(t),void s();n!==e.TIMEOUT_EXPIRED?(e.deleteSync(t),r()):requestAnimationFrame(i)}()}))}}let Zv,Jv,eN,tN=!1;class rN{constructor(e){this.backend=e,this.gl=e.gl,this.extensions=e.extensions,this.defaultTextures={},!1===tN&&(this._init(),tN=!0)}_init(){const e=this.gl;Zv={[wr]:e.REPEAT,[Sr]:e.CLAMP_TO_EDGE,[Nr]:e.MIRRORED_REPEAT},Jv={[_]:e.NEAREST,[Er]:e.NEAREST_MIPMAP_NEAREST,[$e]:e.NEAREST_MIPMAP_LINEAR,[q]:e.LINEAR,[ze]:e.LINEAR_MIPMAP_NEAREST,[B]:e.LINEAR_MIPMAP_LINEAR},eN={[Fr]:e.NEVER,[Lr]:e.ALWAYS,[Ve]:e.LESS,[Pr]:e.LEQUAL,[Mr]:e.EQUAL,[Cr]:e.GEQUAL,[Rr]:e.GREATER,[Ar]:e.NOTEQUAL}}getGLTextureType(e){const{gl:t}=this;let r;return r=!0===e.isCubeTexture?t.TEXTURE_CUBE_MAP:!0===e.isDepthArrayTexture||!0===e.isDataArrayTexture||!0===e.isCompressedArrayTexture||!0===e.isTextureArray?t.TEXTURE_2D_ARRAY:!0===e.isData3DTexture?t.TEXTURE_3D:t.TEXTURE_2D,r}getInternalFormat(e,t,r,s,i=!1){const{gl:n,extensions:a}=this;if(null!==e){if(void 0!==n[e])return n[e];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+e+"'")}let o=t;return t===n.RED&&(r===n.FLOAT&&(o=n.R32F),r===n.HALF_FLOAT&&(o=n.R16F),r===n.UNSIGNED_BYTE&&(o=n.R8),r===n.UNSIGNED_SHORT&&(o=n.R16),r===n.UNSIGNED_INT&&(o=n.R32UI),r===n.BYTE&&(o=n.R8I),r===n.SHORT&&(o=n.R16I),r===n.INT&&(o=n.R32I)),t===n.RED_INTEGER&&(r===n.UNSIGNED_BYTE&&(o=n.R8UI),r===n.UNSIGNED_SHORT&&(o=n.R16UI),r===n.UNSIGNED_INT&&(o=n.R32UI),r===n.BYTE&&(o=n.R8I),r===n.SHORT&&(o=n.R16I),r===n.INT&&(o=n.R32I)),t===n.RG&&(r===n.FLOAT&&(o=n.RG32F),r===n.HALF_FLOAT&&(o=n.RG16F),r===n.UNSIGNED_BYTE&&(o=n.RG8),r===n.UNSIGNED_SHORT&&(o=n.RG16),r===n.UNSIGNED_INT&&(o=n.RG32UI),r===n.BYTE&&(o=n.RG8I),r===n.SHORT&&(o=n.RG16I),r===n.INT&&(o=n.RG32I)),t===n.RG_INTEGER&&(r===n.UNSIGNED_BYTE&&(o=n.RG8UI),r===n.UNSIGNED_SHORT&&(o=n.RG16UI),r===n.UNSIGNED_INT&&(o=n.RG32UI),r===n.BYTE&&(o=n.RG8I),r===n.SHORT&&(o=n.RG16I),r===n.INT&&(o=n.RG32I)),t===n.RGB&&(r===n.FLOAT&&(o=n.RGB32F),r===n.HALF_FLOAT&&(o=n.RGB16F),r===n.UNSIGNED_BYTE&&(o=n.RGB8),r===n.UNSIGNED_SHORT&&(o=n.RGB16),r===n.UNSIGNED_INT&&(o=n.RGB32UI),r===n.BYTE&&(o=n.RGB8I),r===n.SHORT&&(o=n.RGB16I),r===n.INT&&(o=n.RGB32I),r===n.UNSIGNED_BYTE&&(o=s===z&&!1===i?n.SRGB8:n.RGB8),r===n.UNSIGNED_SHORT_5_6_5&&(o=n.RGB565),r===n.UNSIGNED_SHORT_5_5_5_1&&(o=n.RGB5_A1),r===n.UNSIGNED_SHORT_4_4_4_4&&(o=n.RGB4),r===n.UNSIGNED_INT_5_9_9_9_REV&&(o=n.RGB9_E5)),t===n.RGB_INTEGER&&(r===n.UNSIGNED_BYTE&&(o=n.RGB8UI),r===n.UNSIGNED_SHORT&&(o=n.RGB16UI),r===n.UNSIGNED_INT&&(o=n.RGB32UI),r===n.BYTE&&(o=n.RGB8I),r===n.SHORT&&(o=n.RGB16I),r===n.INT&&(o=n.RGB32I)),t===n.RGBA&&(r===n.FLOAT&&(o=n.RGBA32F),r===n.HALF_FLOAT&&(o=n.RGBA16F),r===n.UNSIGNED_BYTE&&(o=n.RGBA8),r===n.UNSIGNED_SHORT&&(o=n.RGBA16),r===n.UNSIGNED_INT&&(o=n.RGBA32UI),r===n.BYTE&&(o=n.RGBA8I),r===n.SHORT&&(o=n.RGBA16I),r===n.INT&&(o=n.RGBA32I),r===n.UNSIGNED_BYTE&&(o=s===z&&!1===i?n.SRGB8_ALPHA8:n.RGBA8),r===n.UNSIGNED_SHORT_4_4_4_4&&(o=n.RGBA4),r===n.UNSIGNED_SHORT_5_5_5_1&&(o=n.RGB5_A1)),t===n.RGBA_INTEGER&&(r===n.UNSIGNED_BYTE&&(o=n.RGBA8UI),r===n.UNSIGNED_SHORT&&(o=n.RGBA16UI),r===n.UNSIGNED_INT&&(o=n.RGBA32UI),r===n.BYTE&&(o=n.RGBA8I),r===n.SHORT&&(o=n.RGBA16I),r===n.INT&&(o=n.RGBA32I)),t===n.DEPTH_COMPONENT&&(r===n.UNSIGNED_SHORT&&(o=n.DEPTH_COMPONENT16),r===n.UNSIGNED_INT&&(o=n.DEPTH_COMPONENT24),r===n.FLOAT&&(o=n.DEPTH_COMPONENT32F)),t===n.DEPTH_STENCIL&&r===n.UNSIGNED_INT_24_8&&(o=n.DEPTH24_STENCIL8),o!==n.R16F&&o!==n.R32F&&o!==n.RG16F&&o!==n.RG32F&&o!==n.RGBA16F&&o!==n.RGBA32F||a.get("EXT_color_buffer_float"),o}setTextureParameters(e,t){const{gl:r,extensions:s,backend:i}=this;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,t.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,t.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,r.NONE),r.texParameteri(e,r.TEXTURE_WRAP_S,Zv[t.wrapS]),r.texParameteri(e,r.TEXTURE_WRAP_T,Zv[t.wrapT]),e!==r.TEXTURE_3D&&e!==r.TEXTURE_2D_ARRAY||!0!==t.isDepthArrayTexture&&!1===t.isTextureArray&&r.texParameteri(e,r.TEXTURE_WRAP_R,Zv[t.wrapR]),r.texParameteri(e,r.TEXTURE_MAG_FILTER,Jv[t.magFilter]);const n=void 0!==t.mipmaps&&t.mipmaps.length>0,a=t.minFilter===q&&n?B:t.minFilter;if(r.texParameteri(e,r.TEXTURE_MIN_FILTER,Jv[a]),t.compareFunction&&(r.texParameteri(e,r.TEXTURE_COMPARE_MODE,r.COMPARE_REF_TO_TEXTURE),r.texParameteri(e,r.TEXTURE_COMPARE_FUNC,eN[t.compareFunction])),!0===s.has("EXT_texture_filter_anisotropic")){if(t.magFilter===_)return;if(t.minFilter!==$e&&t.minFilter!==B)return;if(t.type===L&&!1===s.has("OES_texture_float_linear"))return;if(t.anisotropy>1){const n=s.get("EXT_texture_filter_anisotropic");r.texParameterf(e,n.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(t.anisotropy,i.getMaxAnisotropy()))}}}createDefaultTexture(e){const{gl:t,backend:r,defaultTextures:s}=this,i=this.getGLTextureType(e);let n=s[i];void 0===n&&(n=t.createTexture(),r.state.bindTexture(i,n),t.texParameteri(i,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(i,t.TEXTURE_MAG_FILTER,t.NEAREST),s[i]=n),r.set(e,{textureGPU:n,glTextureType:i,isDefault:!0})}createTexture(e,t){const{gl:r,backend:s}=this,{levels:i,width:n,height:a,depth:o}=t,u=s.utils.convert(e.format,e.colorSpace),l=s.utils.convert(e.type),d=this.getInternalFormat(e.internalFormat,u,l,e.colorSpace,e.isVideoTexture),c=r.createTexture(),h=this.getGLTextureType(e);s.state.bindTexture(h,c),this.setTextureParameters(h,e),e.isDepthArrayTexture||e.isDataArrayTexture||e.isCompressedArrayTexture||e.isTextureArray?r.texStorage3D(r.TEXTURE_2D_ARRAY,i,d,n,a,o):e.isData3DTexture?r.texStorage3D(r.TEXTURE_3D,i,d,n,a,o):e.isVideoTexture||r.texStorage2D(h,i,d,n,a),s.set(e,{textureGPU:c,glTextureType:h,glFormat:u,glType:l,glInternalFormat:d})}copyBufferToTexture(e,t){const{gl:r,backend:s}=this,{textureGPU:i,glTextureType:n,glFormat:a,glType:o}=s.get(t),{width:u,height:l}=t.source.data;r.bindBuffer(r.PIXEL_UNPACK_BUFFER,e),s.state.bindTexture(n,i),r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,!1),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),r.texSubImage2D(n,0,0,0,u,l,a,o,0),r.bindBuffer(r.PIXEL_UNPACK_BUFFER,null),s.state.unbindTexture()}updateTexture(e,t){const{gl:r}=this,{width:s,height:i}=t,{textureGPU:n,glTextureType:a,glFormat:o,glType:u,glInternalFormat:l}=this.backend.get(e);if(e.isRenderTargetTexture||void 0===n)return;const d=e=>e.isDataTexture?e.image.data:"undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap||e instanceof OffscreenCanvas?e:e.data;if(this.backend.state.bindTexture(a,n),this.setTextureParameters(a,e),e.isCompressedTexture){const s=e.mipmaps,i=t.image;for(let t=0;t<s.length;t++){const n=s[t];e.isCompressedArrayTexture?e.format!==r.RGBA?null!==o?r.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,t,0,0,0,n.width,n.height,i.depth,o,n.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):r.texSubImage3D(r.TEXTURE_2D_ARRAY,t,0,0,0,n.width,n.height,i.depth,o,u,n.data):null!==o?r.compressedTexSubImage2D(r.TEXTURE_2D,t,0,0,n.width,n.height,o,n.data):console.warn("Unsupported compressed texture format")}}else if(e.isCubeTexture){const e=t.images;for(let t=0;t<6;t++){const n=d(e[t]);r.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,s,i,o,u,n)}}else if(e.isDataArrayTexture||e.isDepthArrayTexture){const e=t.image;r.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,0,e.width,e.height,e.depth,o,u,e.data)}else if(e.isData3DTexture){const e=t.image;r.texSubImage3D(r.TEXTURE_3D,0,0,0,0,e.width,e.height,e.depth,o,u,e.data)}else if(e.isVideoTexture)e.update(),r.texImage2D(a,0,l,o,u,t.image);else{const e=d(t.image);r.texSubImage2D(a,0,0,0,s,i,o,u,e)}}generateMipmaps(e){const{gl:t,backend:r}=this,{textureGPU:s,glTextureType:i}=r.get(e);r.state.bindTexture(i,s),t.generateMipmap(i)}deallocateRenderBuffers(e){const{gl:t,backend:r}=this;if(e){const s=r.get(e);if(s.renderBufferStorageSetup=void 0,s.framebuffers){for(const e in s.framebuffers)t.deleteFramebuffer(s.framebuffers[e]);delete s.framebuffers}if(s.depthRenderbuffer&&(t.deleteRenderbuffer(s.depthRenderbuffer),delete s.depthRenderbuffer),s.stencilRenderbuffer&&(t.deleteRenderbuffer(s.stencilRenderbuffer),delete s.stencilRenderbuffer),s.msaaFrameBuffer&&(t.deleteFramebuffer(s.msaaFrameBuffer),delete s.msaaFrameBuffer),s.msaaRenderbuffers){for(let e=0;e<s.msaaRenderbuffers.length;e++)t.deleteRenderbuffer(s.msaaRenderbuffers[e]);delete s.msaaRenderbuffers}}}destroyTexture(e){const{gl:t,backend:r}=this,{textureGPU:s,renderTarget:i}=r.get(e);this.deallocateRenderBuffers(i),t.deleteTexture(s),r.delete(e)}copyTextureToTexture(e,t,r=null,s=null,i=0,n=0){const{gl:a,backend:o}=this,{state:u}=this.backend,{textureGPU:l,glTextureType:d,glType:c,glFormat:h}=o.get(t);let p,g,m,f,y,x,b,T,_;u.bindTexture(d,l);const v=e.isCompressedTexture?e.mipmaps[n]:e.image;if(null!==r)p=r.max.x-r.min.x,g=r.max.y-r.min.y,m=r.isBox3?r.max.z-r.min.z:1,f=r.min.x,y=r.min.y,x=r.isBox3?r.min.z:0;else{const t=Math.pow(2,-i);p=Math.floor(v.width*t),g=Math.floor(v.height*t),m=e.isDataArrayTexture||e.isDepthArrayTexture?v.depth:e.isData3DTexture?Math.floor(v.depth*t):1,f=0,y=0,x=0}null!==s?(b=s.x,T=s.y,_=s.z):(b=0,T=0,_=0),a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,t.flipY),a.pixelStorei(a.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),a.pixelStorei(a.UNPACK_ALIGNMENT,t.unpackAlignment);const N=a.getParameter(a.UNPACK_ROW_LENGTH),S=a.getParameter(a.UNPACK_IMAGE_HEIGHT),w=a.getParameter(a.UNPACK_SKIP_PIXELS),E=a.getParameter(a.UNPACK_SKIP_ROWS),A=a.getParameter(a.UNPACK_SKIP_IMAGES);a.pixelStorei(a.UNPACK_ROW_LENGTH,v.width),a.pixelStorei(a.UNPACK_IMAGE_HEIGHT,v.height),a.pixelStorei(a.UNPACK_SKIP_PIXELS,f),a.pixelStorei(a.UNPACK_SKIP_ROWS,y),a.pixelStorei(a.UNPACK_SKIP_IMAGES,x);const R=t.isDataArrayTexture||t.isData3DTexture||t.isDepthArrayTexture;if(e.isRenderTargetTexture||e.isDepthTexture){const r=o.get(e),s=o.get(t),i=o.get(r.renderTarget),n=o.get(s.renderTarget),l=i.framebuffers[r.cacheKey],d=n.framebuffers[s.cacheKey];u.bindFramebuffer(a.READ_FRAMEBUFFER,l),u.bindFramebuffer(a.DRAW_FRAMEBUFFER,d);let c=a.COLOR_BUFFER_BIT;e.isDepthTexture&&(c=a.DEPTH_BUFFER_BIT),a.blitFramebuffer(f,y,p,g,b,T,p,g,c,a.NEAREST),u.bindFramebuffer(a.READ_FRAMEBUFFER,null),u.bindFramebuffer(a.DRAW_FRAMEBUFFER,null)}else R?e.isDataTexture||e.isData3DTexture?a.texSubImage3D(d,n,b,T,_,p,g,m,h,c,v.data):t.isCompressedArrayTexture?a.compressedTexSubImage3D(d,n,b,T,_,p,g,m,h,v.data):a.texSubImage3D(d,n,b,T,_,p,g,m,h,c,v):e.isDataTexture?a.texSubImage2D(d,n,b,T,p,g,h,c,v.data):e.isCompressedTexture?a.compressedTexSubImage2D(d,n,b,T,v.width,v.height,h,v.data):a.texSubImage2D(d,n,b,T,p,g,h,c,v);a.pixelStorei(a.UNPACK_ROW_LENGTH,N),a.pixelStorei(a.UNPACK_IMAGE_HEIGHT,S),a.pixelStorei(a.UNPACK_SKIP_PIXELS,w),a.pixelStorei(a.UNPACK_SKIP_ROWS,E),a.pixelStorei(a.UNPACK_SKIP_IMAGES,A),0===n&&t.generateMipmaps&&a.generateMipmap(d),u.unbindTexture()}copyFramebufferToTexture(e,t,r){const{gl:s}=this,{state:i}=this.backend,{textureGPU:n}=this.backend.get(e),{x:a,y:o,z:u,w:l}=r,d=!0===e.isDepthTexture||t.renderTarget&&t.renderTarget.samples>0,c=t.renderTarget?t.renderTarget.height:this.backend.getDrawingBufferSize().y;if(d){const r=0!==a||0!==o;let d,h;if(!0===e.isDepthTexture?(d=s.DEPTH_BUFFER_BIT,h=s.DEPTH_ATTACHMENT,t.stencil&&(d|=s.STENCIL_BUFFER_BIT)):(d=s.COLOR_BUFFER_BIT,h=s.COLOR_ATTACHMENT0),r){const e=this.backend.get(t.renderTarget),r=e.framebuffers[t.getCacheKey()],h=e.msaaFrameBuffer;i.bindFramebuffer(s.DRAW_FRAMEBUFFER,r),i.bindFramebuffer(s.READ_FRAMEBUFFER,h);const p=c-o-l;s.blitFramebuffer(a,p,a+u,p+l,a,p,a+u,p+l,d,s.NEAREST),i.bindFramebuffer(s.READ_FRAMEBUFFER,r),i.bindTexture(s.TEXTURE_2D,n),s.copyTexSubImage2D(s.TEXTURE_2D,0,0,0,a,p,u,l),i.unbindTexture()}else{const e=s.createFramebuffer();i.bindFramebuffer(s.DRAW_FRAMEBUFFER,e),s.framebufferTexture2D(s.DRAW_FRAMEBUFFER,h,s.TEXTURE_2D,n,0),s.blitFramebuffer(0,0,u,l,0,0,u,l,d,s.NEAREST),s.deleteFramebuffer(e)}}else i.bindTexture(s.TEXTURE_2D,n),s.copyTexSubImage2D(s.TEXTURE_2D,0,0,0,a,c-l-o,u,l),i.unbindTexture();e.generateMipmaps&&this.generateMipmaps(e),this.backend._setFramebuffer(t)}setupRenderBufferStorage(e,t,r,s=!1){const{gl:i}=this,n=t.renderTarget,{depthTexture:a,depthBuffer:o,stencilBuffer:u,width:l,height:d}=n;if(i.bindRenderbuffer(i.RENDERBUFFER,e),o&&!u){let t=i.DEPTH_COMPONENT24;if(!0===s){this.extensions.get("WEBGL_multisampled_render_to_texture").renderbufferStorageMultisampleEXT(i.RENDERBUFFER,n.samples,t,l,d)}else r>0?(a&&a.isDepthTexture&&a.type===i.FLOAT&&(t=i.DEPTH_COMPONENT32F),i.renderbufferStorageMultisample(i.RENDERBUFFER,r,t,l,d)):i.renderbufferStorage(i.RENDERBUFFER,t,l,d);i.framebufferRenderbuffer(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.RENDERBUFFER,e)}else o&&u&&(r>0?i.renderbufferStorageMultisample(i.RENDERBUFFER,r,i.DEPTH24_STENCIL8,l,d):i.renderbufferStorage(i.RENDERBUFFER,i.DEPTH_STENCIL,l,d),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.RENDERBUFFER,e))}async copyTextureToBuffer(e,t,r,s,i,n){const{backend:a,gl:o}=this,{textureGPU:u,glFormat:l,glType:d}=this.backend.get(e),c=o.createFramebuffer();o.bindFramebuffer(o.READ_FRAMEBUFFER,c);const h=e.isCubeTexture?o.TEXTURE_CUBE_MAP_POSITIVE_X+n:o.TEXTURE_2D;o.framebufferTexture2D(o.READ_FRAMEBUFFER,o.COLOR_ATTACHMENT0,h,u,0);const p=this._getTypedArrayType(d),g=s*i*this._getBytesPerTexel(d,l),m=o.createBuffer();o.bindBuffer(o.PIXEL_PACK_BUFFER,m),o.bufferData(o.PIXEL_PACK_BUFFER,g,o.STREAM_READ),o.readPixels(t,r,s,i,l,d,0),o.bindBuffer(o.PIXEL_PACK_BUFFER,null),await a.utils._clientWaitAsync();const f=new p(g/p.BYTES_PER_ELEMENT);return o.bindBuffer(o.PIXEL_PACK_BUFFER,m),o.getBufferSubData(o.PIXEL_PACK_BUFFER,0,f),o.bindBuffer(o.PIXEL_PACK_BUFFER,null),o.deleteFramebuffer(c),f}_getTypedArrayType(e){const{gl:t}=this;if(e===t.UNSIGNED_BYTE)return Uint8Array;if(e===t.UNSIGNED_SHORT_4_4_4_4)return Uint16Array;if(e===t.UNSIGNED_SHORT_5_5_5_1)return Uint16Array;if(e===t.UNSIGNED_SHORT_5_6_5)return Uint16Array;if(e===t.UNSIGNED_SHORT)return Uint16Array;if(e===t.UNSIGNED_INT)return Uint32Array;if(e===t.HALF_FLOAT)return Uint16Array;if(e===t.FLOAT)return Float32Array;throw new Error(`Unsupported WebGL type: ${e}`)}_getBytesPerTexel(e,t){const{gl:r}=this;let s=0;return e===r.UNSIGNED_BYTE&&(s=1),e!==r.UNSIGNED_SHORT_4_4_4_4&&e!==r.UNSIGNED_SHORT_5_5_5_1&&e!==r.UNSIGNED_SHORT_5_6_5&&e!==r.UNSIGNED_SHORT&&e!==r.HALF_FLOAT||(s=2),e!==r.UNSIGNED_INT&&e!==r.FLOAT||(s=4),t===r.RGBA?4*s:t===r.RGB?3*s:t===r.ALPHA?s:void 0}}class sN{constructor(e){this.backend=e,this.gl=this.backend.gl,this.availableExtensions=this.gl.getSupportedExtensions(),this.extensions={}}get(e){let t=this.extensions[e];return void 0===t&&(t=this.gl.getExtension(e),this.extensions[e]=t),t}has(e){return this.availableExtensions.includes(e)}}class iN{constructor(e){this.backend=e,this.maxAnisotropy=null}getMaxAnisotropy(){if(null!==this.maxAnisotropy)return this.maxAnisotropy;const e=this.backend.gl,t=this.backend.extensions;if(!0===t.has("EXT_texture_filter_anisotropic")){const r=t.get("EXT_texture_filter_anisotropic");this.maxAnisotropy=e.getParameter(r.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else this.maxAnisotropy=0;return this.maxAnisotropy}}const nN={WEBGL_multi_draw:"WEBGL_multi_draw",WEBGL_compressed_texture_astc:"texture-compression-astc",WEBGL_compressed_texture_etc:"texture-compression-etc2",WEBGL_compressed_texture_etc1:"texture-compression-etc1",WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBKIT_WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBGL_compressed_texture_s3tc:"texture-compression-bc",EXT_texture_compression_bptc:"texture-compression-bptc",EXT_disjoint_timer_query_webgl2:"timestamp-query",OVR_multiview2:"OVR_multiview2"};class aN{constructor(e){this.gl=e.gl,this.extensions=e.extensions,this.info=e.renderer.info,this.mode=null,this.index=0,this.type=null,this.object=null}render(e,t){const{gl:r,mode:s,object:i,type:n,info:a,index:o}=this;0!==o?r.drawElements(s,t,n,e):r.drawArrays(s,e,t),a.update(i,t,1)}renderInstances(e,t,r){const{gl:s,mode:i,type:n,index:a,object:o,info:u}=this;0!==r&&(0!==a?s.drawElementsInstanced(i,t,n,e,r):s.drawArraysInstanced(i,e,t,r),u.update(o,t,r))}renderMultiDraw(e,t,r){const{extensions:s,mode:i,object:n,info:a}=this;if(0===r)return;const o=s.get("WEBGL_multi_draw");if(null===o)for(let s=0;s<r;s++)this.render(e[s],t[s]);else{0!==this.index?o.multiDrawElementsWEBGL(i,t,0,this.type,e,0,r):o.multiDrawArraysWEBGL(i,e,0,t,0,r);let s=0;for(let e=0;e<r;e++)s+=t[e];a.update(n,s,1)}}renderMultiDrawInstances(e,t,r,s){const{extensions:i,mode:n,object:a,info:o}=this;if(0===r)return;const u=i.get("WEBGL_multi_draw");if(null===u)for(let i=0;i<r;i++)this.renderInstances(e[i],t[i],s[i]);else{0!==this.index?u.multiDrawElementsInstancedWEBGL(n,t,0,this.type,e,0,s,0,r):u.multiDrawArraysInstancedWEBGL(n,e,0,t,0,s,0,r);let i=0;for(let e=0;e<r;e++)i+=t[e]*s[e];o.update(a,i,1)}}}class oN{constructor(e=256){this.trackTimestamp=!0,this.maxQueries=e,this.currentQueryIndex=0,this.queryOffsets=new Map,this.isDisposed=!1,this.lastValue=0,this.pendingResolve=!1}allocateQueriesForContext(){}async resolveQueriesAsync(){}dispose(){}}class uN extends oN{constructor(e,t,r=2048){if(super(r),this.gl=e,this.type=t,this.ext=e.getExtension("EXT_disjoint_timer_query_webgl2")||e.getExtension("EXT_disjoint_timer_query"),!this.ext)return console.warn("EXT_disjoint_timer_query not supported; timestamps will be disabled."),void(this.trackTimestamp=!1);this.queries=[];for(let t=0;t<this.maxQueries;t++)this.queries.push(e.createQuery());this.activeQuery=null,this.queryStates=new Map}allocateQueriesForContext(e){if(!this.trackTimestamp)return null;if(this.currentQueryIndex+2>this.maxQueries)return mt(`WebGPUTimestampQueryPool [${this.type}]: Maximum number of queries exceeded, when using trackTimestamp it is necessary to resolves the queries via renderer.resolveTimestampsAsync( THREE.TimestampQuery.${this.type.toUpperCase()} ).`),null;const t=this.currentQueryIndex;return this.currentQueryIndex+=2,this.queryStates.set(t,"inactive"),this.queryOffsets.set(e.id,t),t}beginQuery(e){if(!this.trackTimestamp||this.isDisposed)return;const t=this.queryOffsets.get(e.id);if(null==t)return;if(null!==this.activeQuery)return;const r=this.queries[t];if(r)try{"inactive"===this.queryStates.get(t)&&(this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT,r),this.activeQuery=t,this.queryStates.set(t,"started"))}catch(e){console.error("Error in beginQuery:",e),this.activeQuery=null,this.queryStates.set(t,"inactive")}}endQuery(e){if(!this.trackTimestamp||this.isDisposed)return;const t=this.queryOffsets.get(e.id);if(null!=t&&this.activeQuery===t)try{this.gl.endQuery(this.ext.TIME_ELAPSED_EXT),this.queryStates.set(t,"ended"),this.activeQuery=null}catch(e){console.error("Error in endQuery:",e),this.queryStates.set(t,"inactive"),this.activeQuery=null}}async resolveQueriesAsync(){if(!this.trackTimestamp||this.pendingResolve)return this.lastValue;this.pendingResolve=!0;try{const e=[];for(const[t,r]of this.queryStates)if("ended"===r){const r=this.queries[t];e.push(this.resolveQuery(r))}if(0===e.length)return this.lastValue;const t=(await Promise.all(e)).reduce(((e,t)=>e+t),0);return this.lastValue=t,this.currentQueryIndex=0,this.queryOffsets.clear(),this.queryStates.clear(),this.activeQuery=null,t}catch(e){return console.error("Error resolving queries:",e),this.lastValue}finally{this.pendingResolve=!1}}async resolveQuery(e){return new Promise((t=>{if(this.isDisposed)return void t(this.lastValue);let r,s=!1;const i=e=>{s||(s=!0,r&&(clearTimeout(r),r=null),t(e))},n=()=>{if(this.isDisposed)i(this.lastValue);else try{if(this.gl.getParameter(this.ext.GPU_DISJOINT_EXT))return void i(this.lastValue);if(!this.gl.getQueryParameter(e,this.gl.QUERY_RESULT_AVAILABLE))return void(r=setTimeout(n,1));const s=this.gl.getQueryParameter(e,this.gl.QUERY_RESULT);t(Number(s)/1e6)}catch(e){console.error("Error checking query:",e),t(this.lastValue)}};n()}))}dispose(){if(!this.isDisposed&&(this.isDisposed=!0,this.trackTimestamp)){for(const e of this.queries)this.gl.deleteQuery(e);this.queries=[],this.queryStates.clear(),this.queryOffsets.clear(),this.lastValue=0,this.activeQuery=null}}}class lN extends Hv{constructor(e={}){super(e),this.isWebGLBackend=!0,this.attributeUtils=null,this.extensions=null,this.capabilities=null,this.textureUtils=null,this.bufferRenderer=null,this.gl=null,this.state=null,this.utils=null,this.vaoCache={},this.transformFeedbackCache={},this.discard=!1,this.disjoint=null,this.parallel=null,this._currentContext=null,this._knownBindings=new WeakSet,this._supportsInvalidateFramebuffer="undefined"!=typeof navigator&&/OculusBrowser/g.test(navigator.userAgent),this._xrFramebuffer=null}init(e){super.init(e);const t=this.parameters,r={antialias:e.samples>0,alpha:!0,depth:e.depth,stencil:e.stencil},s=void 0!==t.context?t.context:e.domElement.getContext("webgl2",r);function i(t){t.preventDefault();const r={api:"WebGL",message:t.statusMessage||"Unknown reason",reason:null,originalEvent:t};e.onDeviceLost(r)}this._onContextLost=i,e.domElement.addEventListener("webglcontextlost",i,!1),this.gl=s,this.extensions=new sN(this),this.capabilities=new iN(this),this.attributeUtils=new Kv(this),this.textureUtils=new rN(this),this.bufferRenderer=new aN(this),this.state=new Yv(this),this.utils=new Qv(this),this.extensions.get("EXT_color_buffer_float"),this.extensions.get("WEBGL_clip_cull_distance"),this.extensions.get("OES_texture_float_linear"),this.extensions.get("EXT_color_buffer_half_float"),this.extensions.get("WEBGL_multisampled_render_to_texture"),this.extensions.get("WEBGL_render_shared_exponent"),this.extensions.get("WEBGL_multi_draw"),this.extensions.get("OVR_multiview2"),this.disjoint=this.extensions.get("EXT_disjoint_timer_query_webgl2"),this.parallel=this.extensions.get("KHR_parallel_shader_compile")}get coordinateSystem(){return l}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}async waitForGPU(){await this.utils._clientWaitAsync()}async makeXRCompatible(){!0!==this.gl.getContextAttributes().xrCompatible&&await this.gl.makeXRCompatible()}setXRTarget(e){this._xrFramebuffer=e}setXRRenderTargetTextures(e,t,r=null){const s=this.gl;if(this.set(e.texture,{textureGPU:t,glInternalFormat:s.RGBA8}),null!==r){const t=e.stencilBuffer?s.DEPTH24_STENCIL8:s.DEPTH_COMPONENT24;this.set(e.depthTexture,{textureGPU:r,glInternalFormat:t}),!0===this.extensions.has("WEBGL_multisampled_render_to_texture")&&!0===e.autoAllocateDepthBuffer&&!1===e.multiview&&console.warn("THREE.WebGLBackend: Render-to-texture extension was disabled because an external texture was provided"),e.autoAllocateDepthBuffer=!1}}initTimestampQuery(e){if(!this.disjoint||!this.trackTimestamp)return;const t=e.isComputeNode?"compute":"render";this.timestampQueryPool[t]||(this.timestampQueryPool[t]=new uN(this.gl,t,2048));const r=this.timestampQueryPool[t];null!==r.allocateQueriesForContext(e)&&r.beginQuery(e)}prepareTimestampBuffer(e){if(!this.disjoint||!this.trackTimestamp)return;const t=e.isComputeNode?"compute":"render";this.timestampQueryPool[t].endQuery(e)}getContext(){return this.gl}beginRender(e){const{state:t,gl:r}=this,s=this.get(e);if(e.viewport?this.updateViewport(e):t.viewport(0,0,r.drawingBufferWidth,r.drawingBufferHeight),e.scissor){const{x:r,y:s,width:i,height:n}=e.scissorValue;t.scissor(r,e.height-n-s,i,n)}this.initTimestampQuery(e),s.previousContext=this._currentContext,this._currentContext=e,this._setFramebuffer(e),this.clear(e.clearColor,e.clearDepth,e.clearStencil,e,!1);const i=e.occlusionQueryCount;i>0&&(s.currentOcclusionQueries=s.occlusionQueries,s.currentOcclusionQueryObjects=s.occlusionQueryObjects,s.lastOcclusionObject=null,s.occlusionQueries=new Array(i),s.occlusionQueryObjects=new Array(i),s.occlusionQueryIndex=0)}finishRender(e){const{gl:t,state:r}=this,s=this.get(e),i=s.previousContext;r.resetVertexState();const n=e.occlusionQueryCount;n>0&&(n>s.occlusionQueryIndex&&t.endQuery(t.ANY_SAMPLES_PASSED),this.resolveOccludedAsync(e));const a=e.textures;if(null!==a)for(let e=0;e<a.length;e++){const t=a[e];t.generateMipmaps&&this.generateMipmaps(t)}if(this._currentContext=i,null!==e.textures&&e.renderTarget){const s=this.get(e.renderTarget),{samples:i}=e.renderTarget;if(i>0&&!1===this._useMultisampledExtension(e.renderTarget)){const i=s.framebuffers[e.getCacheKey()],n=t.COLOR_BUFFER_BIT,a=s.msaaFrameBuffer,o=e.textures;r.bindFramebuffer(t.READ_FRAMEBUFFER,a),r.bindFramebuffer(t.DRAW_FRAMEBUFFER,i);for(let r=0;r<o.length;r++)if(e.scissor){const{x:r,y:i,width:a,height:o}=e.scissorValue,u=e.height-o-i;t.blitFramebuffer(r,u,r+a,u+o,r,u,r+a,u+o,n,t.NEAREST),!0===this._supportsInvalidateFramebuffer&&t.invalidateSubFramebuffer(t.READ_FRAMEBUFFER,s.invalidationArray,r,u,a,o)}else t.blitFramebuffer(0,0,e.width,e.height,0,0,e.width,e.height,n,t.NEAREST),!0===this._supportsInvalidateFramebuffer&&t.invalidateFramebuffer(t.READ_FRAMEBUFFER,s.invalidationArray)}}null!==i&&(this._setFramebuffer(i),i.viewport?this.updateViewport(i):r.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight)),this.prepareTimestampBuffer(e)}resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueries:r,currentOcclusionQueryObjects:s}=t;if(r&&s){const e=new WeakSet,{gl:i}=this;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueries=null;const n=()=>{let a=0;for(let t=0;t<r.length;t++){const n=r[t];null!==n&&(i.getQueryParameter(n,i.QUERY_RESULT_AVAILABLE)&&(0===i.getQueryParameter(n,i.QUERY_RESULT)&&e.add(s[t]),r[t]=null,i.deleteQuery(n),a++))}a<r.length?requestAnimationFrame(n):t.occluded=e};n()}}isOccluded(e,t){const r=this.get(e);return r.occluded&&r.occluded.has(t)}updateViewport(e){const{state:t}=this,{x:r,y:s,width:i,height:n}=e.viewportValue;t.viewport(r,e.height-n-s,i,n)}setScissorTest(e){this.state.setScissorTest(e)}getClearColor(){const e=super.getClearColor();return e.r*=e.a,e.g*=e.a,e.b*=e.a,e}clear(e,t,r,s=null,i=!0){const{gl:n,renderer:a}=this;if(null===s){s={textures:null,clearColorValue:this.getClearColor()}}let o=0;if(e&&(o|=n.COLOR_BUFFER_BIT),t&&(o|=n.DEPTH_BUFFER_BIT),r&&(o|=n.STENCIL_BUFFER_BIT),0!==o){let u;u=s.clearColorValue?s.clearColorValue:this.getClearColor();const l=a.getClearDepth(),d=a.getClearStencil();if(t&&this.state.setDepthMask(!0),null===s.textures)n.clearColor(u.r,u.g,u.b,u.a),n.clear(o);else{if(i&&this._setFramebuffer(s),e)for(let e=0;e<s.textures.length;e++)0===e?n.clearBufferfv(n.COLOR,e,[u.r,u.g,u.b,u.a]):n.clearBufferfv(n.COLOR,e,[0,0,0,1]);t&&r?n.clearBufferfi(n.DEPTH_STENCIL,0,l,d):t?n.clearBufferfv(n.DEPTH,0,[l]):r&&n.clearBufferiv(n.STENCIL,0,[d])}}}beginCompute(e){const{state:t,gl:r}=this;t.bindFramebuffer(r.FRAMEBUFFER,null),this.initTimestampQuery(e)}compute(e,t,r,s){const{state:i,gl:n}=this;!1===this.discard&&(n.enable(n.RASTERIZER_DISCARD),this.discard=!0);const{programGPU:a,transformBuffers:o,attributes:u}=this.get(s),l=this._getVaoKey(u),d=this.vaoCache[l];void 0===d?this._createVao(u):i.setVertexState(d),i.useProgram(a),this._bindUniforms(r);const c=this._getTransformFeedback(o);n.bindTransformFeedback(n.TRANSFORM_FEEDBACK,c),n.beginTransformFeedback(n.POINTS),u[0].isStorageInstancedBufferAttribute?n.drawArraysInstanced(n.POINTS,0,1,t.count):n.drawArrays(n.POINTS,0,t.count),n.endTransformFeedback(),n.bindTransformFeedback(n.TRANSFORM_FEEDBACK,null);for(let e=0;e<o.length;e++){const t=o[e];t.pbo&&this.textureUtils.copyBufferToTexture(t.transformBuffer,t.pbo),t.switchBuffers()}}finishCompute(e){const t=this.gl;this.discard=!1,t.disable(t.RASTERIZER_DISCARD),this.prepareTimestampBuffer(e),this._currentContext&&this._setFramebuffer(this._currentContext)}_isRenderCameraDepthArray(e){return e.depthTexture&&e.depthTexture.isDepthArrayTexture&&e.camera.isArrayCamera}draw(e){const{object:t,pipeline:r,material:s,context:i,hardwareClippingPlanes:n}=e,{programGPU:a}=this.get(r),{gl:o,state:u}=this,l=this.get(i),d=e.getDrawParameters();if(null===d)return;this._bindUniforms(e.getBindings());const c=t.isMesh&&t.matrixWorld.determinant()<0;u.setMaterial(s,c,n),u.useProgram(a);const h=this.get(e);let p=h.staticVao;if(void 0===p||h.geometryId!==e.geometry.id){const t=this._getVaoKey(e.getAttributes());if(p=this.vaoCache[t],void 0===p){let t;({vaoGPU:p,staticVao:t}=this._createVao(e.getAttributes())),t&&(h.staticVao=p,h.geometryId=e.geometry.id)}}const g=e.getIndex(),m=null!==g?this.get(g).bufferGPU:null;u.setVertexState(p,m);const f=l.lastOcclusionObject;if(f!==t&&void 0!==f){if(null!==f&&!0===f.occlusionTest&&(o.endQuery(o.ANY_SAMPLES_PASSED),l.occlusionQueryIndex++),!0===t.occlusionTest){const e=o.createQuery();o.beginQuery(o.ANY_SAMPLES_PASSED,e),l.occlusionQueries[l.occlusionQueryIndex]=e,l.occlusionQueryObjects[l.occlusionQueryIndex]=t}l.lastOcclusionObject=t}const y=this.bufferRenderer;t.isPoints?y.mode=o.POINTS:t.isLineSegments?y.mode=o.LINES:t.isLine?y.mode=o.LINE_STRIP:t.isLineLoop?y.mode=o.LINE_LOOP:!0===s.wireframe?(u.setLineWidth(s.wireframeLinewidth*this.renderer.getPixelRatio()),y.mode=o.LINES):y.mode=o.TRIANGLES;const{vertexCount:x,instanceCount:b}=d;let{firstVertex:T}=d;if(y.object=t,null!==g){T*=g.array.BYTES_PER_ELEMENT;const e=this.get(g);y.index=g.count,y.type=e.type}else y.index=0;const _=()=>{t.isBatchedMesh?null!==t._multiDrawInstances?(mt("THREE.WebGLBackend: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."),y.renderMultiDrawInstances(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount,t._multiDrawInstances)):this.hasFeature("WEBGL_multi_draw")?y.renderMultiDraw(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount):mt("THREE.WebGLRenderer: WEBGL_multi_draw not supported."):b>1?y.renderInstances(T,x,b):y.render(T,x)};if(!0===e.camera.isArrayCamera&&e.camera.cameras.length>0&&!1===e.camera.isMultiViewCamera){const r=this.get(e.camera),s=e.camera.cameras,i=e.getBindingGroup("cameraIndex").bindings[0];if(void 0===r.indexesGPU||r.indexesGPU.length!==s.length){const e=new Uint32Array([0,0,0,0]),t=[];for(let r=0,i=s.length;r<i;r++){const s=o.createBuffer();e[0]=r,o.bindBuffer(o.UNIFORM_BUFFER,s),o.bufferData(o.UNIFORM_BUFFER,e,o.STATIC_DRAW),t.push(s)}r.indexesGPU=t}const n=this.get(i),a=this.renderer.getPixelRatio(),l=this._currentContext.renderTarget,d=this._isRenderCameraDepthArray(this._currentContext),c=this._currentContext.activeCubeFace;if(d){const e=this.get(l.depthTexture);if(e.clearedRenderId!==this.renderer._nodes.nodeFrame.renderId){e.clearedRenderId=this.renderer._nodes.nodeFrame.renderId;const{stencilBuffer:t}=l;for(let e=0,r=s.length;e<r;e++)this.renderer._activeCubeFace=e,this._currentContext.activeCubeFace=e,this._setFramebuffer(this._currentContext),this.clear(!1,!0,t,this._currentContext,!1);this.renderer._activeCubeFace=c,this._currentContext.activeCubeFace=c}}for(let i=0,l=s.length;i<l;i++){const l=s[i];if(t.layers.test(l.layers)){d&&(this.renderer._activeCubeFace=i,this._currentContext.activeCubeFace=i,this._setFramebuffer(this._currentContext));const t=l.viewport;if(void 0!==t){const r=t.x*a,s=t.y*a,i=t.width*a,n=t.height*a;u.viewport(Math.floor(r),Math.floor(e.context.height-n-s),Math.floor(i),Math.floor(n))}u.bindBufferBase(o.UNIFORM_BUFFER,n.index,r.indexesGPU[i]),_()}this._currentContext.activeCubeFace=c,this.renderer._activeCubeFace=c}}else _()}needsRenderUpdate(){return!1}getRenderCacheKey(){return""}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}async copyTextureToBuffer(e,t,r,s,i,n){return this.textureUtils.copyTextureToBuffer(e,t,r,s,i,n)}createSampler(){}destroySampler(){}createNodeBuilder(e,t){return new Gv(e,t)}createProgram(e){const t=this.gl,{stage:r,code:s}=e,i="fragment"===r?t.createShader(t.FRAGMENT_SHADER):t.createShader(t.VERTEX_SHADER);t.shaderSource(i,s),t.compileShader(i),this.set(e,{shaderGPU:i})}destroyProgram(e){this.delete(e)}createRenderPipeline(e,t){const r=this.gl,s=e.pipeline,{fragmentProgram:i,vertexProgram:n}=s,a=r.createProgram(),o=this.get(i).shaderGPU,u=this.get(n).shaderGPU;if(r.attachShader(a,o),r.attachShader(a,u),r.linkProgram(a),this.set(s,{programGPU:a,fragmentShader:o,vertexShader:u}),null!==t&&this.parallel){const i=new Promise((t=>{const i=this.parallel,n=()=>{r.getProgramParameter(a,i.COMPLETION_STATUS_KHR)?(this._completeCompile(e,s),t()):requestAnimationFrame(n)};n()}));t.push(i)}else this._completeCompile(e,s)}_handleSource(e,t){const r=e.split("\n"),s=[],i=Math.max(t-6,0),n=Math.min(t+6,r.length);for(let e=i;e<n;e++){const i=e+1;s.push(`${i===t?">":" "} ${i}: ${r[e]}`)}return s.join("\n")}_getShaderErrors(e,t,r){const s=e.getShaderParameter(t,e.COMPILE_STATUS),i=e.getShaderInfoLog(t).trim();if(s&&""===i)return"";const n=/ERROR: 0:(\d+)/.exec(i);if(n){const s=parseInt(n[1]);return r.toUpperCase()+"\n\n"+i+"\n\n"+this._handleSource(e.getShaderSource(t),s)}return i}_logProgramError(e,t,r){if(this.renderer.debug.checkShaderErrors){const s=this.gl,i=s.getProgramInfoLog(e).trim();if(!1===s.getProgramParameter(e,s.LINK_STATUS))if("function"==typeof this.renderer.debug.onShaderError)this.renderer.debug.onShaderError(s,e,r,t);else{const n=this._getShaderErrors(s,r,"vertex"),a=this._getShaderErrors(s,t,"fragment");console.error("THREE.WebGLProgram: Shader Error "+s.getError()+" - VALIDATE_STATUS "+s.getProgramParameter(e,s.VALIDATE_STATUS)+"\n\nProgram Info Log: "+i+"\n"+n+"\n"+a)}else""!==i&&console.warn("THREE.WebGLProgram: Program Info Log:",i)}}_completeCompile(e,t){const{state:r,gl:s}=this,i=this.get(t),{programGPU:n,fragmentShader:a,vertexShader:o}=i;!1===s.getProgramParameter(n,s.LINK_STATUS)&&this._logProgramError(n,a,o),r.useProgram(n);const u=e.getBindings();this._setupBindings(u,n),this.set(t,{programGPU:n})}createComputePipeline(e,t){const{state:r,gl:s}=this,i={stage:"fragment",code:"#version 300 es\nprecision highp float;\nvoid main() {}"};this.createProgram(i);const{computeProgram:n}=e,a=s.createProgram(),o=this.get(i).shaderGPU,u=this.get(n).shaderGPU,l=n.transforms,d=[],c=[];for(let e=0;e<l.length;e++){const t=l[e];d.push(t.varyingName),c.push(t.attributeNode)}s.attachShader(a,o),s.attachShader(a,u),s.transformFeedbackVaryings(a,d,s.SEPARATE_ATTRIBS),s.linkProgram(a),!1===s.getProgramParameter(a,s.LINK_STATUS)&&this._logProgramError(a,o,u),r.useProgram(a),this._setupBindings(t,a);const h=n.attributes,p=[],g=[];for(let e=0;e<h.length;e++){const t=h[e].node.attribute;p.push(t),this.has(t)||this.attributeUtils.createAttribute(t,s.ARRAY_BUFFER)}for(let e=0;e<c.length;e++){const t=c[e].attribute;this.has(t)||this.attributeUtils.createAttribute(t,s.ARRAY_BUFFER);const r=this.get(t);g.push(r)}this.set(e,{programGPU:a,transformBuffers:g,attributes:p})}createBindings(e,t){if(!1===this._knownBindings.has(t)){this._knownBindings.add(t);let e=0,r=0;for(const s of t){this.set(s,{textures:r,uniformBuffers:e});for(const t of s.bindings)t.isUniformBuffer&&e++,t.isSampledTexture&&r++}}this.updateBindings(e,t)}updateBindings(e){const{gl:t}=this,r=this.get(e);let s=r.uniformBuffers,i=r.textures;for(const r of e.bindings)if(r.isUniformsGroup||r.isUniformBuffer){const e=r.buffer,i=t.createBuffer();t.bindBuffer(t.UNIFORM_BUFFER,i),t.bufferData(t.UNIFORM_BUFFER,e,t.DYNAMIC_DRAW),this.set(r,{index:s++,bufferGPU:i})}else if(r.isSampledTexture){const{textureGPU:e,glTextureType:t}=this.get(r.texture);this.set(r,{index:i++,textureGPU:e,glTextureType:t})}}updateBinding(e){const t=this.gl;if(e.isUniformsGroup||e.isUniformBuffer){const r=this.get(e).bufferGPU,s=e.buffer;t.bindBuffer(t.UNIFORM_BUFFER,r),t.bufferData(t.UNIFORM_BUFFER,s,t.DYNAMIC_DRAW)}}createIndexAttribute(e){const t=this.gl;this.attributeUtils.createAttribute(e,t.ELEMENT_ARRAY_BUFFER)}createAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}createStorageAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}hasFeature(e){const t=Object.keys(nN).filter((t=>nN[t]===e)),r=this.extensions;for(let e=0;e<t.length;e++)if(r.has(t[e]))return!0;return!1}getMaxAnisotropy(){return this.capabilities.getMaxAnisotropy()}copyTextureToTexture(e,t,r=null,s=null,i=0,n=0){this.textureUtils.copyTextureToTexture(e,t,r,s,i,n)}copyFramebufferToTexture(e,t,r){this.textureUtils.copyFramebufferToTexture(e,t,r)}_setFramebuffer(e){const{gl:t,state:r}=this;let s=null;if(null!==e.textures){const i=e.renderTarget,n=this.get(i),{samples:a,depthBuffer:o,stencilBuffer:u}=i,l=!0===i.isWebGLCubeRenderTarget,d=!0===i.isRenderTarget3D,c=!0===i.isRenderTargetArray,h=!0===i.isXRRenderTarget,p=!0===h&&!0===i.hasExternalTextures;let g=n.msaaFrameBuffer,m=n.depthRenderbuffer;const f=this.extensions.get("WEBGL_multisampled_render_to_texture"),y=this.extensions.get("OVR_multiview2"),x=this._useMultisampledExtension(i),b=ff(e);let T;if(l?(n.cubeFramebuffers||(n.cubeFramebuffers={}),T=n.cubeFramebuffers[b]):h&&!1===p?T=this._xrFramebuffer:(n.framebuffers||(n.framebuffers={}),T=n.framebuffers[b]),void 0===T){T=t.createFramebuffer(),r.bindFramebuffer(t.FRAMEBUFFER,T);const s=e.textures;if(l){n.cubeFramebuffers[b]=T;const{textureGPU:e}=this.get(s[0]),r=this.renderer._activeCubeFace;t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+r,e,0)}else{n.framebuffers[b]=T;for(let r=0;r<s.length;r++){const n=s[r],o=this.get(n);o.renderTarget=e.renderTarget,o.cacheKey=b;const u=t.COLOR_ATTACHMENT0+r;if(d||c){const e=this.renderer._activeCubeFace;t.framebufferTextureLayer(t.FRAMEBUFFER,u,o.textureGPU,0,e)}else i.multiview?y.framebufferTextureMultisampleMultiviewOVR(t.FRAMEBUFFER,u,o.textureGPU,0,a,0,2):p&&x?f.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,u,t.TEXTURE_2D,o.textureGPU,0,a):t.framebufferTexture2D(t.FRAMEBUFFER,u,t.TEXTURE_2D,o.textureGPU,0)}r.drawBuffers(e,T)}if(i.isXRRenderTarget&&!0===i.autoAllocateDepthBuffer){const r=t.createRenderbuffer();this.textureUtils.setupRenderBufferStorage(r,e,0,x),n.xrDepthRenderbuffer=r}else if(null!==e.depthTexture){const r=this.get(e.depthTexture),s=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;if(r.renderTarget=e.renderTarget,r.cacheKey=b,i.multiview)y.framebufferTextureMultisampleMultiviewOVR(t.FRAMEBUFFER,s,r.textureGPU,0,a,0,2);else if(p&&x)f.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,s,t.TEXTURE_2D,r.textureGPU,0,a);else if(e.depthTexture.isDepthArrayTexture){const e=this.renderer._activeCubeFace;t.framebufferTextureLayer(t.FRAMEBUFFER,s,r.textureGPU,0,e)}else t.framebufferTexture2D(t.FRAMEBUFFER,s,t.TEXTURE_2D,r.textureGPU,0)}}else{if(this._isRenderCameraDepthArray(e)){r.bindFramebuffer(t.FRAMEBUFFER,T);const s=this.renderer._activeCubeFace,i=this.get(e.depthTexture),n=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;t.framebufferTextureLayer(t.FRAMEBUFFER,n,i.textureGPU,0,s)}if(h&&p||i.multiview){r.bindFramebuffer(t.FRAMEBUFFER,T);const s=this.get(e.textures[0]);i.multiview?y.framebufferTextureMultisampleMultiviewOVR(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,s.textureGPU,0,a,0,2):x?f.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,s.textureGPU,0,a):t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,s.textureGPU,0);const o=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;if(!0===i.autoAllocateDepthBuffer){const e=n.xrDepthRenderbuffer;t.bindRenderbuffer(t.RENDERBUFFER,e),t.framebufferRenderbuffer(t.FRAMEBUFFER,o,t.RENDERBUFFER,e)}else{const r=this.get(e.depthTexture);i.multiview?y.framebufferTextureMultisampleMultiviewOVR(t.FRAMEBUFFER,o,r.textureGPU,0,a,0,2):x?f.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,o,t.TEXTURE_2D,r.textureGPU,0,a):t.framebufferTexture2D(t.FRAMEBUFFER,o,t.TEXTURE_2D,r.textureGPU,0)}}}if(a>0&&!1===x&&!i.multiview){if(void 0===g){const s=[];g=t.createFramebuffer(),r.bindFramebuffer(t.FRAMEBUFFER,g);const i=[],l=e.textures;for(let r=0;r<l.length;r++){if(i[r]=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,i[r]),s.push(t.COLOR_ATTACHMENT0+r),o){const e=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;s.push(e)}const n=e.textures[r],l=this.get(n);t.renderbufferStorageMultisample(t.RENDERBUFFER,a,l.glInternalFormat,e.width,e.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+r,t.RENDERBUFFER,i[r])}if(n.msaaFrameBuffer=g,n.msaaRenderbuffers=i,void 0===m){m=t.createRenderbuffer(),this.textureUtils.setupRenderBufferStorage(m,e,a),n.depthRenderbuffer=m;const r=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;s.push(r)}n.invalidationArray=s}s=n.msaaFrameBuffer}else s=T}r.bindFramebuffer(t.FRAMEBUFFER,s)}_getVaoKey(e){let t="";for(let r=0;r<e.length;r++){t+=":"+this.get(e[r]).id}return t}_createVao(e){const{gl:t}=this,r=t.createVertexArray();let s="",i=!0;t.bindVertexArray(r);for(let r=0;r<e.length;r++){const n=e[r],a=this.get(n);let o,u;s+=":"+a.id,t.bindBuffer(t.ARRAY_BUFFER,a.bufferGPU),t.enableVertexAttribArray(r),(n.isStorageBufferAttribute||n.isStorageInstancedBufferAttribute)&&(i=!1),!0===n.isInterleavedBufferAttribute?(o=n.data.stride*a.bytesPerElement,u=n.offset*a.bytesPerElement):(o=0,u=0),a.isInteger?t.vertexAttribIPointer(r,n.itemSize,a.type,o,u):t.vertexAttribPointer(r,n.itemSize,a.type,n.normalized,o,u),n.isInstancedBufferAttribute&&!n.isInterleavedBufferAttribute?t.vertexAttribDivisor(r,n.meshPerAttribute):n.isInterleavedBufferAttribute&&n.data.isInstancedInterleavedBuffer&&t.vertexAttribDivisor(r,n.data.meshPerAttribute)}return t.bindBuffer(t.ARRAY_BUFFER,null),this.vaoCache[s]=r,{vaoGPU:r,staticVao:i}}_getTransformFeedback(e){let t="";for(let r=0;r<e.length;r++)t+=":"+e[r].id;let r=this.transformFeedbackCache[t];if(void 0!==r)return r;const{gl:s}=this;r=s.createTransformFeedback(),s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,r);for(let t=0;t<e.length;t++){const r=e[t];s.bindBufferBase(s.TRANSFORM_FEEDBACK_BUFFER,t,r.transformBuffer)}return s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,null),this.transformFeedbackCache[t]=r,r}_setupBindings(e,t){const r=this.gl;for(const s of e)for(const e of s.bindings){const s=this.get(e).index;if(e.isUniformsGroup||e.isUniformBuffer){const i=r.getUniformBlockIndex(t,e.name);r.uniformBlockBinding(t,i,s)}else if(e.isSampledTexture){const i=r.getUniformLocation(t,e.name);r.uniform1i(i,s)}}}_bindUniforms(e){const{gl:t,state:r}=this;for(const s of e)for(const e of s.bindings){const s=this.get(e),i=s.index;e.isUniformsGroup||e.isUniformBuffer?r.bindBufferBase(t.UNIFORM_BUFFER,i,s.bufferGPU):e.isSampledTexture&&r.bindTexture(s.glTextureType,s.textureGPU,t.TEXTURE0+i)}}_useMultisampledExtension(e){return!0===e.multiview||e.samples>0&&!0===this.extensions.has("WEBGL_multisampled_render_to_texture")&&!1!==e.autoAllocateDepthBuffer}dispose(){const e=this.extensions.get("WEBGL_lose_context");e&&e.loseContext(),this.renderer.domElement.removeEventListener("webglcontextlost",this._onContextLost)}}const dN="point-list",cN="line-list",hN="line-strip",pN="triangle-list",gN="triangle-strip",mN="never",fN="less",yN="equal",xN="less-equal",bN="greater",TN="not-equal",_N="greater-equal",vN="always",NN="store",SN="load",wN="clear",EN="ccw",AN="none",RN="front",CN="back",MN="uint16",PN="uint32",LN="r8unorm",FN="r8snorm",BN="r8uint",DN="r8sint",IN="r16uint",VN="r16sint",UN="r16float",ON="rg8unorm",kN="rg8snorm",GN="rg8uint",zN="rg8sint",$N="r32uint",HN="r32sint",WN="r32float",jN="rg16uint",qN="rg16sint",XN="rg16float",KN="rgba8unorm",YN="rgba8unorm-srgb",QN="rgba8snorm",ZN="rgba8uint",JN="rgba8sint",eS="bgra8unorm",tS="bgra8unorm-srgb",rS="rgb9e5ufloat",sS="rgb10a2unorm",iS="rgb10a2unorm",nS="rg32uint",aS="rg32sint",oS="rg32float",uS="rgba16uint",lS="rgba16sint",dS="rgba16float",cS="rgba32uint",hS="rgba32sint",pS="rgba32float",gS="depth16unorm",mS="depth24plus",fS="depth24plus-stencil8",yS="depth32float",xS="depth32float-stencil8",bS="bc1-rgba-unorm",TS="bc1-rgba-unorm-srgb",_S="bc2-rgba-unorm",vS="bc2-rgba-unorm-srgb",NS="bc3-rgba-unorm",SS="bc3-rgba-unorm-srgb",wS="bc4-r-unorm",ES="bc4-r-snorm",AS="bc5-rg-unorm",RS="bc5-rg-snorm",CS="bc6h-rgb-ufloat",MS="bc6h-rgb-float",PS="bc7-rgba-unorm",LS="bc7-rgba-srgb",FS="etc2-rgb8unorm",BS="etc2-rgb8unorm-srgb",DS="etc2-rgb8a1unorm",IS="etc2-rgb8a1unorm-srgb",VS="etc2-rgba8unorm",US="etc2-rgba8unorm-srgb",OS="eac-r11unorm",kS="eac-r11snorm",GS="eac-rg11unorm",zS="eac-rg11snorm",$S="astc-4x4-unorm",HS="astc-4x4-unorm-srgb",WS="astc-5x4-unorm",jS="astc-5x4-unorm-srgb",qS="astc-5x5-unorm",XS="astc-5x5-unorm-srgb",KS="astc-6x5-unorm",YS="astc-6x5-unorm-srgb",QS="astc-6x6-unorm",ZS="astc-6x6-unorm-srgb",JS="astc-8x5-unorm",ew="astc-8x5-unorm-srgb",tw="astc-8x6-unorm",rw="astc-8x6-unorm-srgb",sw="astc-8x8-unorm",iw="astc-8x8-unorm-srgb",nw="astc-10x5-unorm",aw="astc-10x5-unorm-srgb",ow="astc-10x6-unorm",uw="astc-10x6-unorm-srgb",lw="astc-10x8-unorm",dw="astc-10x8-unorm-srgb",cw="astc-10x10-unorm",hw="astc-10x10-unorm-srgb",pw="astc-12x10-unorm",gw="astc-12x10-unorm-srgb",mw="astc-12x12-unorm",fw="astc-12x12-unorm-srgb",yw="clamp-to-edge",xw="repeat",bw="mirror-repeat",Tw="linear",_w="nearest",vw="zero",Nw="one",Sw="src",ww="one-minus-src",Ew="src-alpha",Aw="one-minus-src-alpha",Rw="dst",Cw="one-minus-dst",Mw="dst-alpha",Pw="one-minus-dst-alpha",Lw="src-alpha-saturated",Fw="constant",Bw="one-minus-constant",Dw="add",Iw="subtract",Vw="reverse-subtract",Uw="min",Ow="max",kw=0,Gw=15,zw="keep",$w="zero",Hw="replace",Ww="invert",jw="increment-clamp",qw="decrement-clamp",Xw="increment-wrap",Kw="decrement-wrap",Yw="storage",Qw="read-only-storage",Zw="write-only",Jw="read-only",eE="read-write",tE="non-filtering",rE="comparison",sE="float",iE="unfilterable-float",nE="depth",aE="sint",oE="uint",uE="2d",lE="3d",dE="2d",cE="2d-array",hE="cube",pE="3d",gE="all",mE="vertex",fE="instance",yE={DepthClipControl:"depth-clip-control",Depth32FloatStencil8:"depth32float-stencil8",TextureCompressionBC:"texture-compression-bc",TextureCompressionETC2:"texture-compression-etc2",TextureCompressionASTC:"texture-compression-astc",TimestampQuery:"timestamp-query",IndirectFirstInstance:"indirect-first-instance",ShaderF16:"shader-f16",RG11B10UFloat:"rg11b10ufloat-renderable",BGRA8UNormStorage:"bgra8unorm-storage",Float32Filterable:"float32-filterable",ClipDistances:"clip-distances",DualSourceBlending:"dual-source-blending",Subgroups:"subgroups"};class xE extends vv{constructor(e,t){super(e),this.texture=t,this.version=t?t.version:0,this.isSampler=!0}}class bE extends xE{constructor(e,t,r){super(e,t?t.value:null),this.textureNode=t,this.groupNode=r}update(){this.texture=this.textureNode.value}}class TE extends Nv{constructor(e,t){super(e,t?t.array:null),this.attribute=t,this.isStorageBuffer=!0}}let _E=0;class vE extends TE{constructor(e,t){super("StorageBuffer_"+_E++,e?e.value:null),this.nodeUniform=e,this.access=e?e.access:Us.READ_WRITE,this.groupNode=t}get buffer(){return this.nodeUniform.value}}class NE extends $m{constructor(e){super(),this.device=e;this.mipmapSampler=e.createSampler({minFilter:Tw}),this.flipYSampler=e.createSampler({minFilter:_w}),this.transferPipelines={},this.flipYPipelines={},this.mipmapVertexShaderModule=e.createShaderModule({label:"mipmapVertex",code:"\nstruct VarysStruct {\n\t@builtin( position ) Position: vec4<f32>,\n\t@location( 0 ) vTex : vec2<f32>\n};\n\n@vertex\nfn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {\n\n\tvar Varys : VarysStruct;\n\n\tvar pos = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( -1.0,  1.0 ),\n\t\tvec2<f32>(  1.0,  1.0 ),\n\t\tvec2<f32>( -1.0, -1.0 ),\n\t\tvec2<f32>(  1.0, -1.0 )\n\t);\n\n\tvar tex = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( 0.0, 0.0 ),\n\t\tvec2<f32>( 1.0, 0.0 ),\n\t\tvec2<f32>( 0.0, 1.0 ),\n\t\tvec2<f32>( 1.0, 1.0 )\n\t);\n\n\tVarys.vTex = tex[ vertexIndex ];\n\tVarys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );\n\n\treturn Varys;\n\n}\n"}),this.mipmapFragmentShaderModule=e.createShaderModule({label:"mipmapFragment",code:"\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vTex );\n\n}\n"}),this.flipYFragmentShaderModule=e.createShaderModule({label:"flipYFragment",code:"\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );\n\n}\n"})}getTransferPipeline(e){let t=this.transferPipelines[e];return void 0===t&&(t=this.device.createRenderPipeline({label:`mipmap-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.mipmapFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:gN,stripIndexFormat:PN},layout:"auto"}),this.transferPipelines[e]=t),t}getFlipYPipeline(e){let t=this.flipYPipelines[e];return void 0===t&&(t=this.device.createRenderPipeline({label:`flipY-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.flipYFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:gN,stripIndexFormat:PN},layout:"auto"}),this.flipYPipelines[e]=t),t}flipY(e,t,r=0){const s=t.format,{width:i,height:n}=t.size,a=this.getTransferPipeline(s),o=this.getFlipYPipeline(s),u=this.device.createTexture({size:{width:i,height:n,depthOrArrayLayers:1},format:s,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),l=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:dE,baseArrayLayer:r}),d=u.createView({baseMipLevel:0,mipLevelCount:1,dimension:dE,baseArrayLayer:0}),c=this.device.createCommandEncoder({}),h=(e,t,r)=>{const s=e.getBindGroupLayout(0),i=this.device.createBindGroup({layout:s,entries:[{binding:0,resource:this.flipYSampler},{binding:1,resource:t}]}),n=c.beginRenderPass({colorAttachments:[{view:r,loadOp:wN,storeOp:NN,clearValue:[0,0,0,0]}]});n.setPipeline(e),n.setBindGroup(0,i),n.draw(4,1,0,0),n.end()};h(a,l,d),h(o,d,l),this.device.queue.submit([c.finish()]),u.destroy()}generateMipmaps(e,t,r=0){const s=this.get(e);void 0===s.useCount&&(s.useCount=0,s.layers=[]);const i=s.layers[r]||this._mipmapCreateBundles(e,t,r),n=this.device.createCommandEncoder({});this._mipmapRunBundles(n,i),this.device.queue.submit([n.finish()]),0!==s.useCount&&(s.layers[r]=i),s.useCount++}_mipmapCreateBundles(e,t,r){const s=this.getTransferPipeline(t.format),i=s.getBindGroupLayout(0);let n=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:dE,baseArrayLayer:r});const a=[];for(let o=1;o<t.mipLevelCount;o++){const u=this.device.createBindGroup({layout:i,entries:[{binding:0,resource:this.mipmapSampler},{binding:1,resource:n}]}),l=e.createView({baseMipLevel:o,mipLevelCount:1,dimension:dE,baseArrayLayer:r}),d={colorAttachments:[{view:l,loadOp:wN,storeOp:NN,clearValue:[0,0,0,0]}]},c=this.device.createRenderBundleEncoder({colorFormats:[t.format]});c.setPipeline(s),c.setBindGroup(0,u),c.draw(4,1,0,0),a.push({renderBundles:[c.finish()],passDescriptor:d}),n=l}return a}_mipmapRunBundles(e,t){const r=t.length;for(let s=0;s<r;s++){const r=t[s],i=e.beginRenderPass(r.passDescriptor);i.executeBundles(r.renderBundles),i.end()}}}const SE={[Fr]:"never",[Ve]:"less",[Mr]:"equal",[Pr]:"less-equal",[Rr]:"greater",[Cr]:"greater-equal",[Lr]:"always",[Ar]:"not-equal"},wE=[0,1,3,2,4,5];class EE{constructor(e){this.backend=e,this._passUtils=null,this.defaultTexture={},this.defaultCubeTexture={},this.defaultVideoFrame=null,this.colorBuffer=null,this.depthTexture=new D,this.depthTexture.name="depthBuffer"}createSampler(e){const t=this.backend,r=t.device,s=t.get(e),i={addressModeU:this._convertAddressMode(e.wrapS),addressModeV:this._convertAddressMode(e.wrapT),addressModeW:this._convertAddressMode(e.wrapR),magFilter:this._convertFilterMode(e.magFilter),minFilter:this._convertFilterMode(e.minFilter),mipmapFilter:this._convertFilterMode(e.minFilter),maxAnisotropy:1};i.magFilter===Tw&&i.minFilter===Tw&&i.mipmapFilter===Tw&&(i.maxAnisotropy=e.anisotropy),e.isDepthTexture&&null!==e.compareFunction&&(i.compare=SE[e.compareFunction]),s.sampler=r.createSampler(i)}createDefaultTexture(e){let t;const r=AE(e);e.isCubeTexture?t=this._getDefaultCubeTextureGPU(r):e.isVideoTexture?this.backend.get(e).externalTexture=this._getDefaultVideoFrame():t=this._getDefaultTextureGPU(r),this.backend.get(e).texture=t}createTexture(e,t={}){const r=this.backend,s=r.get(e);if(s.initialized)throw new Error("WebGPUTextureUtils: Texture already initialized.");void 0===t.needsMipmaps&&(t.needsMipmaps=!1),void 0===t.levels&&(t.levels=1),void 0===t.depth&&(t.depth=1);const{width:i,height:n,depth:a,levels:o}=t;e.isFramebufferTexture&&(t.renderTarget?t.format=this.backend.utils.getCurrentColorFormat(t.renderTarget):t.format=this.backend.utils.getPreferredCanvasFormat());const u=this._getDimension(e),l=e.internalFormat||t.format||AE(e,r.device);s.format=l;const{samples:d,primarySamples:c,isMSAA:h}=r.utils.getTextureSampleData(e);let p=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC;!0===e.isStorageTexture&&(p|=GPUTextureUsage.STORAGE_BINDING),!0!==e.isCompressedTexture&&!0!==e.isCompressedArrayTexture&&(p|=GPUTextureUsage.RENDER_ATTACHMENT);const g={label:e.name,size:{width:i,height:n,depthOrArrayLayers:a},mipLevelCount:o,sampleCount:c,dimension:u,format:l,usage:p};if(e.isVideoTexture){const t=e.source.data,r=new VideoFrame(t);g.size.width=r.displayWidth,g.size.height=r.displayHeight,r.close(),s.externalTexture=t}else{if(void 0===l)return console.warn("WebGPURenderer: Texture format not supported."),void this.createDefaultTexture(e);e.isCubeTexture&&(g.textureBindingViewDimension=hE),s.texture=r.device.createTexture(g)}if(h){const e=Object.assign({},g);e.label=e.label+"-msaa",e.sampleCount=d,s.msaaTexture=r.device.createTexture(e)}s.initialized=!0,s.textureDescriptorGPU=g}destroyTexture(e){const t=this.backend,r=t.get(e);void 0!==r.texture&&r.texture.destroy(),void 0!==r.msaaTexture&&r.msaaTexture.destroy(),t.delete(e)}destroySampler(e){delete this.backend.get(e).sampler}generateMipmaps(e){const t=this.backend.get(e);if(e.isCubeTexture)for(let e=0;e<6;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e);else{const r=e.image.depth||1;for(let e=0;e<r;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e)}}getColorBuffer(){this.colorBuffer&&this.colorBuffer.destroy();const e=this.backend,{width:t,height:r}=e.getDrawingBufferSize();return this.colorBuffer=e.device.createTexture({label:"colorBuffer",size:{width:t,height:r,depthOrArrayLayers:1},sampleCount:e.utils.getSampleCount(e.renderer.samples),format:e.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC}),this.colorBuffer}getDepthBuffer(e=!0,t=!1){const r=this.backend,{width:s,height:i}=r.getDrawingBufferSize(),n=this.depthTexture,a=r.get(n).texture;let o,u;if(t?(o=Ae,u=Ce):e&&(o=Re,u=b),void 0!==a){if(n.image.width===s&&n.image.height===i&&n.format===o&&n.type===u)return a;this.destroyTexture(n)}return n.name="depthBuffer",n.format=o,n.type=u,n.image.width=s,n.image.height=i,this.createTexture(n,{width:s,height:i}),r.get(n).texture}updateTexture(e,t){const r=this.backend.get(e),{textureDescriptorGPU:s}=r;if(!e.isRenderTargetTexture&&void 0!==s){if(e.isDataTexture)this._copyBufferToTexture(t.image,r.texture,s,0,e.flipY);else if(e.isDataArrayTexture||e.isDepthArrayTexture||e.isData3DTexture)for(let i=0;i<t.image.depth;i++)this._copyBufferToTexture(t.image,r.texture,s,i,e.flipY,i);else if(e.isCompressedTexture||e.isCompressedArrayTexture)this._copyCompressedBufferToTexture(e.mipmaps,r.texture,s);else if(e.isCubeTexture)this._copyCubeMapToTexture(t.images,r.texture,s,e.flipY);else if(e.isVideoTexture){const t=e.source.data;r.externalTexture=t}else this._copyImageToTexture(t.image,r.texture,s,0,e.flipY);r.version=e.version,e.onUpdate&&e.onUpdate(e)}}async copyTextureToBuffer(e,t,r,s,i,n){const a=this.backend.device,o=this.backend.get(e),u=o.texture,l=o.textureDescriptorGPU.format,d=this._getBytesPerTexel(l);let c=s*d;c=256*Math.ceil(c/256);const h=a.createBuffer({size:s*i*d,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),p=a.createCommandEncoder();p.copyTextureToBuffer({texture:u,origin:{x:t,y:r,z:n}},{buffer:h,bytesPerRow:c},{width:s,height:i});const g=this._getTypedArrayType(l);a.queue.submit([p.finish()]),await h.mapAsync(GPUMapMode.READ);return new g(h.getMappedRange())}_isEnvironmentTexture(e){const t=e.mapping;return t===Y||t===Q||t===w||t===E}_getDefaultTextureGPU(e){let t=this.defaultTexture[e];if(void 0===t){const r=new pe;r.minFilter=_,r.magFilter=_,this.createTexture(r,{width:1,height:1,format:e}),this.defaultTexture[e]=t=r}return this.backend.get(t).texture}_getDefaultCubeTextureGPU(e){let t=this.defaultTexture[e];if(void 0===t){const r=new K;r.minFilter=_,r.magFilter=_,this.createTexture(r,{width:1,height:1,depth:6}),this.defaultCubeTexture[e]=t=r}return this.backend.get(t).texture}_getDefaultVideoFrame(){let e=this.defaultVideoFrame;if(null===e){const t={timestamp:0,codedWidth:1,codedHeight:1,format:"RGBA"};this.defaultVideoFrame=e=new VideoFrame(new Uint8Array([0,0,0,255]),t)}return e}_copyCubeMapToTexture(e,t,r,s){for(let i=0;i<6;i++){const n=e[i],a=!0===s?wE[i]:i;n.isDataTexture?this._copyBufferToTexture(n.image,t,r,a,s):this._copyImageToTexture(n,t,r,a,s)}}_copyImageToTexture(e,t,r,s,i){this.backend.device.queue.copyExternalImageToTexture({source:e,flipY:i},{texture:t,mipLevel:0,origin:{x:0,y:0,z:s}},{width:e.width,height:e.height,depthOrArrayLayers:1})}_getPassUtils(){let e=this._passUtils;return null===e&&(this._passUtils=e=new NE(this.backend.device)),e}_generateMipmaps(e,t,r=0){this._getPassUtils().generateMipmaps(e,t,r)}_flipY(e,t,r=0){this._getPassUtils().flipY(e,t,r)}_copyBufferToTexture(e,t,r,s,i,n=0){const a=this.backend.device,o=e.data,u=this._getBytesPerTexel(r.format),l=e.width*u;a.queue.writeTexture({texture:t,mipLevel:0,origin:{x:0,y:0,z:s}},o,{offset:e.width*e.height*u*n,bytesPerRow:l},{width:e.width,height:e.height,depthOrArrayLayers:1}),!0===i&&this._flipY(t,r,s)}_copyCompressedBufferToTexture(e,t,r){const s=this.backend.device,i=this._getBlockData(r.format),n=r.size.depthOrArrayLayers>1;for(let a=0;a<e.length;a++){const o=e[a],u=o.width,l=o.height,d=n?r.size.depthOrArrayLayers:1,c=Math.ceil(u/i.width)*i.byteLength,h=c*Math.ceil(l/i.height);for(let e=0;e<d;e++)s.queue.writeTexture({texture:t,mipLevel:a,origin:{x:0,y:0,z:e}},o.data,{offset:e*h,bytesPerRow:c,rowsPerImage:Math.ceil(l/i.height)},{width:Math.ceil(u/i.width)*i.width,height:Math.ceil(l/i.height)*i.height,depthOrArrayLayers:1})}}_getBlockData(e){return e===bS||e===TS?{byteLength:8,width:4,height:4}:e===_S||e===vS||e===NS||e===SS?{byteLength:16,width:4,height:4}:e===wS||e===ES?{byteLength:8,width:4,height:4}:e===AS||e===RS||e===CS||e===MS||e===PS||e===LS?{byteLength:16,width:4,height:4}:e===FS||e===BS||e===DS||e===IS?{byteLength:8,width:4,height:4}:e===VS||e===US?{byteLength:16,width:4,height:4}:e===OS||e===kS?{byteLength:8,width:4,height:4}:e===GS||e===zS||e===$S||e===HS?{byteLength:16,width:4,height:4}:e===WS||e===jS?{byteLength:16,width:5,height:4}:e===qS||e===XS?{byteLength:16,width:5,height:5}:e===KS||e===YS?{byteLength:16,width:6,height:5}:e===QS||e===ZS?{byteLength:16,width:6,height:6}:e===JS||e===ew?{byteLength:16,width:8,height:5}:e===tw||e===rw?{byteLength:16,width:8,height:6}:e===sw||e===iw?{byteLength:16,width:8,height:8}:e===nw||e===aw?{byteLength:16,width:10,height:5}:e===ow||e===uw?{byteLength:16,width:10,height:6}:e===lw||e===dw?{byteLength:16,width:10,height:8}:e===cw||e===hw?{byteLength:16,width:10,height:10}:e===pw||e===gw?{byteLength:16,width:12,height:10}:e===mw||e===fw?{byteLength:16,width:12,height:12}:void 0}_convertAddressMode(e){let t=yw;return e===wr?t=xw:e===Nr&&(t=bw),t}_convertFilterMode(e){let t=Tw;return e!==_&&e!==Er&&e!==$e||(t=_w),t}_getBytesPerTexel(e){return e===LN||e===FN||e===BN||e===DN?1:e===IN||e===VN||e===UN||e===ON||e===kN||e===GN||e===zN?2:e===$N||e===HN||e===WN||e===jN||e===qN||e===XN||e===KN||e===YN||e===QN||e===ZN||e===JN||e===eS||e===tS||e===rS||e===sS||e===iS||e===yS||e===mS||e===fS||e===xS?4:e===nS||e===aS||e===oS||e===uS||e===lS||e===dS?8:e===cS||e===hS||e===pS?16:void 0}_getTypedArrayType(e){return e===BN?Uint8Array:e===DN?Int8Array:e===LN?Uint8Array:e===FN?Int8Array:e===GN?Uint8Array:e===zN?Int8Array:e===ON?Uint8Array:e===kN?Int8Array:e===ZN?Uint8Array:e===JN?Int8Array:e===KN?Uint8Array:e===QN?Int8Array:e===IN?Uint16Array:e===VN?Int16Array:e===jN?Uint16Array:e===qN?Int16Array:e===uS?Uint16Array:e===lS?Int16Array:e===UN||e===XN||e===dS?Uint16Array:e===$N?Uint32Array:e===HN?Int32Array:e===WN?Float32Array:e===nS?Uint32Array:e===aS?Int32Array:e===oS?Float32Array:e===cS?Uint32Array:e===hS?Int32Array:e===pS?Float32Array:e===eS||e===tS?Uint8Array:e===sS||e===rS||e===iS?Uint32Array:e===yS?Float32Array:e===mS||e===fS?Uint32Array:e===xS?Float32Array:void 0}_getDimension(e){let t;return t=e.isData3DTexture?lE:uE,t}}function AE(e,t=null){const r=e.format,s=e.type,i=e.colorSpace;let n;if(!0===e.isCompressedTexture||!0===e.isCompressedArrayTexture)switch(r){case Xt:n=i===z?TS:bS;break;case Kt:n=i===z?vS:_S;break;case Yt:n=i===z?SS:NS;break;case rr:n=i===z?BS:FS;break;case sr:n=i===z?US:VS;break;case ir:n=i===z?HS:$S;break;case nr:n=i===z?jS:WS;break;case ar:n=i===z?XS:qS;break;case or:n=i===z?YS:KS;break;case ur:n=i===z?ZS:QS;break;case lr:n=i===z?ew:JS;break;case dr:n=i===z?rw:tw;break;case cr:n=i===z?iw:sw;break;case hr:n=i===z?aw:nw;break;case pr:n=i===z?uw:ow;break;case gr:n=i===z?dw:lw;break;case mr:n=i===z?hw:cw;break;case fr:n=i===z?gw:pw;break;case yr:n=i===z?fw:mw;break;case ce:n=i===z?YN:KN;break;default:console.error("WebGPURenderer: Unsupported texture format.",r)}else switch(r){case ce:switch(s){case lt:n=QN;break;case ut:n=lS;break;case dt:n=uS;break;case b:n=cS;break;case T:n=hS;break;case Me:n=i===z?YN:KN;break;case he:n=dS;break;case L:n=pS;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAFormat.",s)}break;case pt:if(s===Wt)n=rS;else console.error("WebGPURenderer: Unsupported texture type with RGBFormat.",s);break;case ot:switch(s){case lt:n=FN;break;case ut:n=VN;break;case dt:n=IN;break;case b:n=$N;break;case T:n=HN;break;case Me:n=LN;break;case he:n=UN;break;case L:n=WN;break;default:console.error("WebGPURenderer: Unsupported texture type with RedFormat.",s)}break;case Ue:switch(s){case lt:n=kN;break;case ut:n=qN;break;case dt:n=jN;break;case b:n=nS;break;case T:n=aS;break;case Me:n=ON;break;case he:n=XN;break;case L:n=oS;break;default:console.error("WebGPURenderer: Unsupported texture type with RGFormat.",s)}break;case Re:switch(s){case dt:n=gS;break;case b:n=mS;break;case L:n=yS;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthFormat.",s)}break;case Ae:switch(s){case Ce:n=fS;break;case L:t&&!1===t.features.has(yE.Depth32FloatStencil8)&&console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the "depth32float-stencil8" GPU feature.'),n=xS;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthStencilFormat.",s)}break;case at:switch(s){case T:n=HN;break;case b:n=$N;break;default:console.error("WebGPURenderer: Unsupported texture type with RedIntegerFormat.",s)}break;case ct:switch(s){case T:n=aS;break;case b:n=nS;break;default:console.error("WebGPURenderer: Unsupported texture type with RGIntegerFormat.",s)}break;case gt:switch(s){case T:n=hS;break;case b:n=cS;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.",s)}break;default:console.error("WebGPURenderer: Unsupported texture format.",r)}return n}const RE=/^[fn]*\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)\s*[\-\>]*\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/i,CE=/([a-z_0-9]+)\s*:\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/gi,ME={f32:"float",i32:"int",u32:"uint",bool:"bool","vec2<f32>":"vec2","vec2<i32>":"ivec2","vec2<u32>":"uvec2","vec2<bool>":"bvec2",vec2f:"vec2",vec2i:"ivec2",vec2u:"uvec2",vec2b:"bvec2","vec3<f32>":"vec3","vec3<i32>":"ivec3","vec3<u32>":"uvec3","vec3<bool>":"bvec3",vec3f:"vec3",vec3i:"ivec3",vec3u:"uvec3",vec3b:"bvec3","vec4<f32>":"vec4","vec4<i32>":"ivec4","vec4<u32>":"uvec4","vec4<bool>":"bvec4",vec4f:"vec4",vec4i:"ivec4",vec4u:"uvec4",vec4b:"bvec4","mat2x2<f32>":"mat2",mat2x2f:"mat2","mat3x3<f32>":"mat3",mat3x3f:"mat3","mat4x4<f32>":"mat4",mat4x4f:"mat4",sampler:"sampler",texture_1d:"texture",texture_2d:"texture",texture_2d_array:"texture",texture_multisampled_2d:"cubeTexture",texture_depth_2d:"depthTexture",texture_depth_2d_array:"depthTexture",texture_depth_multisampled_2d:"depthTexture",texture_depth_cube:"depthTexture",texture_depth_cube_array:"depthTexture",texture_3d:"texture3D",texture_cube:"cubeTexture",texture_cube_array:"cubeTexture",texture_storage_1d:"storageTexture",texture_storage_2d:"storageTexture",texture_storage_2d_array:"storageTexture",texture_storage_3d:"storageTexture"};class PE extends O_{constructor(e){const{type:t,inputs:r,name:s,inputsCode:i,blockCode:n,outputType:a}=(e=>{const t=(e=e.trim()).match(RE);if(null!==t&&4===t.length){const r=t[2],s=[];let i=null;for(;null!==(i=CE.exec(r));)s.push({name:i[1],type:i[2]});const n=[];for(let e=0;e<s.length;e++){const{name:t,type:r}=s[e];let i=r;i.startsWith("ptr")?i="pointer":(i.startsWith("texture")&&(i=r.split("<")[0]),i=ME[i]),n.push(new A_(i,t))}const a=e.substring(t[0].length),o=t[3]||"void",u=void 0!==t[1]?t[1]:"";return{type:ME[o]||o,inputs:n,name:u,inputsCode:r,blockCode:a,outputType:o}}throw new Error("FunctionNode: Function is not a WGSL code.")})(e);super(t,r,s),this.inputsCode=i,this.blockCode=n,this.outputType=a}getCode(e=this.name){const t="void"!==this.outputType?"-> "+this.outputType:"";return`fn ${e} ( ${this.inputsCode.trim()} ) ${t}`+this.blockCode}}class LE extends U_{parseFunction(e){return new PE(e)}}const FE="undefined"!=typeof self?self.GPUShaderStage:{VERTEX:1,FRAGMENT:2,COMPUTE:4},BE={[Us.READ_ONLY]:"read",[Us.WRITE_ONLY]:"write",[Us.READ_WRITE]:"read_write"},DE={[wr]:"repeat",[Sr]:"clamp",[Nr]:"mirror"},IE={vertex:FE?FE.VERTEX:1,fragment:FE?FE.FRAGMENT:2,compute:FE?FE.COMPUTE:4},VE={instance:!0,swizzleAssign:!1,storageBuffer:!0},UE={"^^":"tsl_xor"},OE={float:"f32",int:"i32",uint:"u32",bool:"bool",color:"vec3<f32>",vec2:"vec2<f32>",ivec2:"vec2<i32>",uvec2:"vec2<u32>",bvec2:"vec2<bool>",vec3:"vec3<f32>",ivec3:"vec3<i32>",uvec3:"vec3<u32>",bvec3:"vec3<bool>",vec4:"vec4<f32>",ivec4:"vec4<i32>",uvec4:"vec4<u32>",bvec4:"vec4<bool>",mat2:"mat2x2<f32>",mat3:"mat3x3<f32>",mat4:"mat4x4<f32>"},kE={},GE={tsl_xor:new Tx("fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }"),mod_float:new Tx("fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }"),mod_vec2:new Tx("fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }"),mod_vec3:new Tx("fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }"),mod_vec4:new Tx("fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }"),equals_bool:new Tx("fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }"),equals_bvec2:new Tx("fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }"),equals_bvec3:new Tx("fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }"),equals_bvec4:new Tx("fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }"),repeatWrapping_float:new Tx("fn tsl_repeatWrapping_float( coord: f32 ) -> f32 { return fract( coord ); }"),mirrorWrapping_float:new Tx("fn tsl_mirrorWrapping_float( coord: f32 ) -> f32 { let mirrored = fract( coord * 0.5 ) * 2.0; return 1.0 - abs( 1.0 - mirrored ); }"),clampWrapping_float:new Tx("fn tsl_clampWrapping_float( coord: f32 ) -> f32 { return clamp( coord, 0.0, 1.0 ); }"),biquadraticTexture:new Tx("\nfn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, iRes : vec2u, level : u32 ) -> vec4f {\n\n\tlet res = vec2f( iRes );\n\n\tlet uvScaled = coord * res;\n\tlet uvWrapping = ( ( uvScaled % res ) + res ) % res;\n\n\t// https://www.shadertoy.com/view/WtyXRy\n\n\tlet uv = uvWrapping - 0.5;\n\tlet iuv = floor( uv );\n\tlet f = fract( uv );\n\n\tlet rg1 = textureLoad( map, vec2u( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );\n\tlet rg2 = textureLoad( map, vec2u( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );\n\tlet rg3 = textureLoad( map, vec2u( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );\n\tlet rg4 = textureLoad( map, vec2u( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );\n\n\treturn mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );\n\n}\n")},zE={dFdx:"dpdx",dFdy:"- dpdy",mod_float:"tsl_mod_float",mod_vec2:"tsl_mod_vec2",mod_vec3:"tsl_mod_vec3",mod_vec4:"tsl_mod_vec4",equals_bool:"tsl_equals_bool",equals_bvec2:"tsl_equals_bvec2",equals_bvec3:"tsl_equals_bvec3",equals_bvec4:"tsl_equals_bvec4",inversesqrt:"inverseSqrt",bitcast:"bitcast<f32>"};"undefined"!=typeof navigator&&/Windows/g.test(navigator.userAgent)&&(GE.pow_float=new Tx("fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }"),GE.pow_vec2=new Tx("fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }",[GE.pow_float]),GE.pow_vec3=new Tx("fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }",[GE.pow_float]),GE.pow_vec4=new Tx("fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }",[GE.pow_float]),zE.pow_float="tsl_pow_float",zE.pow_vec2="tsl_pow_vec2",zE.pow_vec3="tsl_pow_vec3",zE.pow_vec4="tsl_pow_vec4");let $E="";!0!==("undefined"!=typeof navigator&&/Firefox|Deno/g.test(navigator.userAgent))&&($E+="diagnostic( off, derivative_uniformity );\n");class HE extends w_{constructor(e,t){super(e,t,new LE),this.uniformGroups={},this.builtins={},this.directives={},this.scopedArrays=new Map}needsToWorkingColorSpace(e){return!0===e.isVideoTexture&&e.colorSpace!==x}_generateTextureSample(e,t,r,s,i=this.shaderStage){return"fragment"===i?s?`textureSample( ${t}, ${t}_sampler, ${r}, ${s} )`:`textureSample( ${t}, ${t}_sampler, ${r} )`:this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,r):this.generateTextureLod(e,t,r,s,"0")}_generateVideoSample(e,t,r=this.shaderStage){if("fragment"===r)return`textureSampleBaseClampToEdge( ${e}, ${e}_sampler, vec2<f32>( ${t}.x, 1.0 - ${t}.y ) )`;console.error(`WebGPURenderer: THREE.VideoTexture does not support ${r} shader.`)}_generateTextureSampleLevel(e,t,r,s,i,n=this.shaderStage){return"fragment"!==n&&"compute"!==n||!1!==this.isUnfilterable(e)?this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,r,s):this.generateTextureLod(e,t,r,i,s):`textureSampleLevel( ${t}, ${t}_sampler, ${r}, ${s} )`}generateWrapFunction(e){const t=`tsl_coord_${DE[e.wrapS]}S_${DE[e.wrapT]}_${e.isData3DTexture?"3d":"2d"}T`;let r=kE[t];if(void 0===r){const s=[],i=e.isData3DTexture?"vec3f":"vec2f";let n=`fn ${t}( coord : ${i} ) -> ${i} {\n\n\treturn ${i}(\n`;const a=(e,t)=>{e===wr?(s.push(GE.repeatWrapping_float),n+=`\t\ttsl_repeatWrapping_float( coord.${t} )`):e===Sr?(s.push(GE.clampWrapping_float),n+=`\t\ttsl_clampWrapping_float( coord.${t} )`):e===Nr?(s.push(GE.mirrorWrapping_float),n+=`\t\ttsl_mirrorWrapping_float( coord.${t} )`):(n+=`\t\tcoord.${t}`,console.warn(`WebGPURenderer: Unsupported texture wrap type "${e}" for vertex shader.`))};a(e.wrapS,"x"),n+=",\n",a(e.wrapT,"y"),e.isData3DTexture&&(n+=",\n",a(e.wrapR,"z")),n+="\n\t);\n\n}\n",kE[t]=r=new Tx(n,s)}return r.build(this),t}generateArrayDeclaration(e,t){return`array< ${this.getType(e)}, ${t} >`}generateTextureDimension(e,t,r){const s=this.getDataFromNode(e,this.shaderStage,this.globalCache);void 0===s.dimensionsSnippet&&(s.dimensionsSnippet={});let i=s.dimensionsSnippet[r];if(void 0===s.dimensionsSnippet[r]){let n,a;const{primarySamples:o}=this.renderer.backend.utils.getTextureSampleData(e),u=o>1;a=e.isData3DTexture?"vec3<u32>":"vec2<u32>",n=u||e.isVideoTexture||e.isStorageTexture?t:`${t}${r?`, u32( ${r} )`:""}`,i=new Qo(new Du(`textureDimensions( ${n} )`,a)),s.dimensionsSnippet[r]=i,(e.isDataArrayTexture||e.isDepthArrayTexture||e.isData3DTexture)&&(s.arrayLayerCount=new Qo(new Du(`textureNumLayers(${t})`,"u32"))),e.isTextureCube&&(s.cubeFaceCount=new Qo(new Du("6u","u32")))}return i.build(this)}generateFilteredTexture(e,t,r,s="0u"){this._include("biquadraticTexture");return`tsl_biquadraticTexture( ${t}, ${this.generateWrapFunction(e)}( ${r} ), ${this.generateTextureDimension(e,t,s)}, u32( ${s} ) )`}generateTextureLod(e,t,r,s,i="0u"){const n=this.generateWrapFunction(e),a=this.generateTextureDimension(e,t,i),o=e.isData3DTexture?"vec3":"vec2",u=`${o}<u32>( ${n}( ${r} ) * ${o}<f32>( ${a} ) )`;return this.generateTextureLoad(e,t,u,s,i)}generateTextureLoad(e,t,r,s,i="0u"){let n;return!0===e.isVideoTexture||!0===e.isStorageTexture?n=`textureLoad( ${t}, ${r} )`:s?n=`textureLoad( ${t}, ${r}, ${s}, u32( ${i} ) )`:(n=`textureLoad( ${t}, ${r}, u32( ${i} ) )`,this.renderer.backend.compatibilityMode&&e.isDepthTexture&&(n+=".x")),n}generateTextureStore(e,t,r,s){return`textureStore( ${t}, ${r}, ${s} )`}isSampleCompare(e){return!0===e.isDepthTexture&&null!==e.compareFunction}isUnfilterable(e){return"float"!==this.getComponentTypeFromTexture(e)||!this.isAvailable("float32Filterable")&&!0===e.isDataTexture&&e.type===L||!1===this.isSampleCompare(e)&&e.minFilter===_&&e.magFilter===_||this.renderer.backend.utils.getTextureSampleData(e).primarySamples>1}generateTexture(e,t,r,s,i=this.shaderStage){let n=null;return n=!0===e.isVideoTexture?this._generateVideoSample(t,r,i):this.isUnfilterable(e)?this.generateTextureLod(e,t,r,s,"0",i):this._generateTextureSample(e,t,r,s,i),n}generateTextureGrad(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`textureSampleGrad( ${t}, ${t}_sampler, ${r},  ${s[0]}, ${s[1]} )`;console.error(`WebGPURenderer: THREE.TextureNode.gradient() does not support ${n} shader.`)}generateTextureCompare(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return e.isDepthArrayTexture?`textureSampleCompare( ${t}, ${t}_sampler, ${r}, ${i}, ${s} )`:`textureSampleCompare( ${t}, ${t}_sampler, ${r}, ${s} )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${n} shader.`)}generateTextureLevel(e,t,r,s,i,n=this.shaderStage){let a=null;return a=!0===e.isVideoTexture?this._generateVideoSample(t,r,n):this._generateTextureSampleLevel(e,t,r,s,i,n),a}generateTextureBias(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`textureSampleBias( ${t}, ${t}_sampler, ${r}, ${s} )`;console.error(`WebGPURenderer: THREE.TextureNode.biasNode does not support ${n} shader.`)}getPropertyName(e,t=this.shaderStage){if(!0===e.isNodeVarying&&!0===e.needsInterpolation){if("vertex"===t)return`varyings.${e.name}`}else if(!0===e.isNodeUniform){const t=e.name,r=e.type;return"texture"===r||"cubeTexture"===r||"storageTexture"===r||"texture3D"===r?t:"buffer"===r||"storageBuffer"===r||"indirectStorageBuffer"===r?this.isCustomStruct(e)?t:t+".value":e.groupNode.name+"."+t}return super.getPropertyName(e)}getOutputStructName(){return"output"}getFunctionOperator(e){const t=UE[e];return void 0!==t?(this._include(t),t):null}getNodeAccess(e,t){return"compute"!==t?Us.READ_ONLY:e.access}getStorageAccess(e,t){return BE[this.getNodeAccess(e,t)]}getUniformFromNode(e,t,r,s=null){const i=super.getUniformFromNode(e,t,r,s),n=this.getDataFromNode(e,r,this.globalCache);if(void 0===n.uniformGPU){let a;const o=e.groupNode,u=o.name,l=this.getBindGroupArray(u,r);if("texture"===t||"cubeTexture"===t||"storageTexture"===t||"texture3D"===t){let s=null;const n=this.getNodeAccess(e,r);if("texture"===t||"storageTexture"===t?s=new Lv(i.name,i.node,o,n):"cubeTexture"===t?s=new Fv(i.name,i.node,o,n):"texture3D"===t&&(s=new Bv(i.name,i.node,o,n)),s.store=!0===e.isStorageTextureNode,s.setVisibility(IE[r]),"fragment"!==r&&"compute"!==r||!1!==this.isUnfilterable(e.value)||!1!==s.store)l.push(s),a=[s];else{const e=new bE(`${i.name}_sampler`,i.node,o);e.setVisibility(IE[r]),l.push(e,s),a=[e,s]}}else if("buffer"===t||"storageBuffer"===t||"indirectStorageBuffer"===t){const n=new("buffer"===t?Ev:vE)(e,o);n.setVisibility(IE[r]),l.push(n),a=n,i.name=s||"NodeBuffer_"+i.id}else{const e=this.uniformGroups[r]||(this.uniformGroups[r]={});let s=e[u];void 0===s&&(s=new Cv(u,o),s.setVisibility(IE[r]),e[u]=s,l.push(s)),a=this.getNodeUniform(i,t),s.addUniform(a)}n.uniformGPU=a}return i}getBuiltin(e,t,r,s=this.shaderStage){const i=this.builtins[s]||(this.builtins[s]=new Map);return!1===i.has(e)&&i.set(e,{name:e,property:t,type:r}),t}hasBuiltin(e,t=this.shaderStage){return void 0!==this.builtins[t]&&this.builtins[t].has(e)}getVertexIndex(){return"vertex"===this.shaderStage?this.getBuiltin("vertex_index","vertexIndex","u32","attribute"):"vertexIndex"}buildFunctionCode(e){const t=e.layout,r=this.flowShaderNode(e),s=[];for(const e of t.inputs)s.push(e.name+" : "+this.getType(e.type));let i=`fn ${t.name}( ${s.join(", ")} ) -> ${this.getType(t.type)} {\n${r.vars}\n${r.code}\n`;return r.result&&(i+=`\treturn ${r.result};\n`),i+="\n}\n",i}getInstanceIndex(){return"vertex"===this.shaderStage?this.getBuiltin("instance_index","instanceIndex","u32","attribute"):"instanceIndex"}getInvocationLocalIndex(){return this.getBuiltin("local_invocation_index","invocationLocalIndex","u32","attribute")}getSubgroupSize(){return this.enableSubGroups(),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute")}getInvocationSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_invocation_id","invocationSubgroupIndex","u32","attribute")}getSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_id","subgroupIndex","u32","attribute")}getDrawIndex(){return null}getFrontFacing(){return this.getBuiltin("front_facing","isFront","bool")}getFragCoord(){return this.getBuiltin("position","fragCoord","vec4<f32>")+".xy"}getFragDepth(){return"output."+this.getBuiltin("frag_depth","depth","f32","output")}getClipDistance(){return"varyings.hw_clip_distances"}isFlipY(){return!1}enableDirective(e,t=this.shaderStage){(this.directives[t]||(this.directives[t]=new Set)).add(e)}getDirectives(e){const t=[],r=this.directives[e];if(void 0!==r)for(const e of r)t.push(`enable ${e};`);return t.join("\n")}enableSubGroups(){this.enableDirective("subgroups")}enableSubgroupsF16(){this.enableDirective("subgroups-f16")}enableClipDistances(){this.enableDirective("clip_distances")}enableShaderF16(){this.enableDirective("f16")}enableDualSourceBlending(){this.enableDirective("dual_source_blending")}enableHardwareClipping(e){this.enableClipDistances(),this.getBuiltin("clip_distances","hw_clip_distances",`array<f32, ${e} >`,"vertex")}getBuiltins(e){const t=[],r=this.builtins[e];if(void 0!==r)for(const{name:e,property:s,type:i}of r.values())t.push(`@builtin( ${e} ) ${s} : ${i}`);return t.join(",\n\t")}getScopedArray(e,t,r,s){return!1===this.scopedArrays.has(e)&&this.scopedArrays.set(e,{name:e,scope:t,bufferType:r,bufferCount:s}),e}getScopedArrays(e){if("compute"!==e)return;const t=[];for(const{name:e,scope:r,bufferType:s,bufferCount:i}of this.scopedArrays.values()){const n=this.getType(s);t.push(`var<${r}> ${e}: array< ${n}, ${i} >;`)}return t.join("\n")}getAttributes(e){const t=[];if("compute"===e&&(this.getBuiltin("global_invocation_id","globalId","vec3<u32>","attribute"),this.getBuiltin("workgroup_id","workgroupId","vec3<u32>","attribute"),this.getBuiltin("local_invocation_id","localId","vec3<u32>","attribute"),this.getBuiltin("num_workgroups","numWorkgroups","vec3<u32>","attribute"),this.renderer.hasFeature("subgroups")&&(this.enableDirective("subgroups",e),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute"))),"vertex"===e||"compute"===e){const e=this.getBuiltins("attribute");e&&t.push(e);const r=this.getAttributesArray();for(let e=0,s=r.length;e<s;e++){const s=r[e],i=s.name,n=this.getType(s.type);t.push(`@location( ${e} ) ${i} : ${n}`)}}return t.join(",\n\t")}getStructMembers(e){const t=[];for(const r of e.members){const s=e.output?"@location( "+r.index+" ) ":"";let i=this.getType(r.type);r.atomic&&(i="atomic< "+i+" >"),t.push(`\t${s+r.name} : ${i}`)}return e.output&&t.push(`\t${this.getBuiltins("output")}`),t.join(",\n")}getStructs(e){let t="";const r=this.structs[e];if(r.length>0){const e=[];for(const t of r){let r=`struct ${t.name} {\n`;r+=this.getStructMembers(t),r+="\n};",e.push(r)}t="\n"+e.join("\n\n")+"\n"}return t}getVar(e,t,r=null){let s=`var ${t} : `;return s+=null!==r?this.generateArrayDeclaration(e,r):this.getType(e),s}getVars(e){const t=[],r=this.vars[e];if(void 0!==r)for(const e of r)t.push(`\t${this.getVar(e.type,e.name,e.count)};`);return`\n${t.join("\n")}\n`}getVaryings(e){const t=[];if("vertex"===e&&this.getBuiltin("position","Vertex","vec4<f32>","vertex"),"vertex"===e||"fragment"===e){const r=this.varyings,s=this.vars[e];for(let i=0;i<r.length;i++){const n=r[i];if(n.needsInterpolation){let e=`@location( ${i} )`;if(n.interpolationType){const t=null!==n.interpolationSampling?`, ${n.interpolationSampling} )`:" )";e+=` @interpolate( ${n.interpolationType}${t}`}else/^(int|uint|ivec|uvec)/.test(n.type)&&(e+=` @interpolate( ${this.renderer.backend.compatibilityMode?"flat, either":"flat"} )`);t.push(`${e} ${n.name} : ${this.getType(n.type)}`)}else"vertex"===e&&!1===s.includes(n)&&s.push(n)}}const r=this.getBuiltins(e);r&&t.push(r);const s=t.join(",\n\t");return"vertex"===e?this._getWGSLStruct("VaryingsStruct","\t"+s):s}isCustomStruct(e){const t=e.value,r=e.node,s=(t.isBufferAttribute||t.isInstancedBufferAttribute)&&null!==r.structTypeNode,i=r.value&&r.value.array&&"number"==typeof r.value.itemSize&&r.value.array.length>r.value.itemSize;return s&&!i}getUniforms(e){const t=this.uniforms[e],r=[],s=[],i=[],n={};for(const i of t){const t=i.groupNode.name,a=this.bindingsIndexes[t];if("texture"===i.type||"cubeTexture"===i.type||"storageTexture"===i.type||"texture3D"===i.type){const t=i.node.value;let s;"fragment"!==e&&"compute"!==e||!1!==this.isUnfilterable(t)||!0===i.node.isStorageTextureNode||(this.isSampleCompare(t)?r.push(`@binding( ${a.binding++} ) @group( ${a.group} ) var ${i.name}_sampler : sampler_comparison;`):r.push(`@binding( ${a.binding++} ) @group( ${a.group} ) var ${i.name}_sampler : sampler;`));let n="";const{primarySamples:o}=this.renderer.backend.utils.getTextureSampleData(t);if(o>1&&(n="_multisampled"),!0===t.isCubeTexture)s="texture_cube<f32>";else if(!0===t.isDataArrayTexture||!0===t.isCompressedArrayTexture||!0===t.isTextureArray)s="texture_2d_array<f32>";else if(!0===t.isDepthTexture)s=this.renderer.backend.compatibilityMode&&null===t.compareFunction?`texture${n}_2d<f32>`:`texture_depth${n}_2d${!0===t.isDepthArrayTexture?"_array":""}`;else if(!0===t.isVideoTexture)s="texture_external";else if(!0===t.isData3DTexture)s="texture_3d<f32>";else if(!0===i.node.isStorageTextureNode){s=`texture_storage_2d<${AE(t)}, ${this.getStorageAccess(i.node,e)}>`}else{s=`texture${n}_2d<${this.getComponentTypeFromTexture(t).charAt(0)}32>`}r.push(`@binding( ${a.binding++} ) @group( ${a.group} ) var ${i.name} : ${s};`)}else if("buffer"===i.type||"storageBuffer"===i.type||"indirectStorageBuffer"===i.type){const t=i.node,r=this.getType(t.getNodeType(this)),n=t.bufferCount,o=n>0&&"buffer"===i.type?", "+n:"",u=t.isStorageBufferNode?`storage, ${this.getStorageAccess(t,e)}`:"uniform";if(this.isCustomStruct(i))s.push(`@binding( ${a.binding++} ) @group( ${a.group} ) var<${u}> ${i.name} : ${r};`);else{const e=`\tvalue : array< ${t.isAtomic?`atomic<${r}>`:`${r}`}${o} >`;s.push(this._getWGSLStructBinding(i.name,e,u,a.binding++,a.group))}}else{const e=this.getType(this.getVectorType(i.type)),t=i.groupNode.name;(n[t]||(n[t]={index:a.binding++,id:a.group,snippets:[]})).snippets.push(`\t${i.name} : ${e}`)}}for(const e in n){const t=n[e];i.push(this._getWGSLStructBinding(e,t.snippets.join(",\n"),"uniform",t.index,t.id))}let a=r.join("\n");return a+=s.join("\n"),a+=i.join("\n"),a}buildCode(){const e=null!==this.material?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){this.shaderStage=t;const r=e[t];r.uniforms=this.getUniforms(t),r.attributes=this.getAttributes(t),r.varyings=this.getVaryings(t),r.structs=this.getStructs(t),r.vars=this.getVars(t),r.codes=this.getCodes(t),r.directives=this.getDirectives(t),r.scopedArrays=this.getScopedArrays(t);let s="// code\n\n";s+=this.flowCode[t];const i=this.flowNodes[t],n=i[i.length-1],a=n.outputNode,o=void 0!==a&&!0===a.isOutputStructNode;for(const e of i){const i=this.getFlowData(e),u=e.name;if(u&&(s.length>0&&(s+="\n"),s+=`\t// flow -> ${u}\n`),s+=`${i.code}\n\t`,e===n&&"compute"!==t)if(s+="// result\n\n\t","vertex"===t)s+=`varyings.Vertex = ${i.result};`;else if("fragment"===t)if(o)r.returnType=a.getNodeType(this),r.structs+="var<private> output : "+r.returnType+";",s+=`return ${i.result};`;else{let e="\t@location(0) color: vec4<f32>";const t=this.getBuiltins("output");t&&(e+=",\n\t"+t),r.returnType="OutputStruct",r.structs+=this._getWGSLStruct("OutputStruct",e),r.structs+="\nvar<private> output : OutputStruct;",s+=`output.color = ${i.result};\n\n\treturn output;`}}r.flow=s}this.shaderStage=null,null!==this.material?(this.vertexShader=this._getWGSLVertexCode(e.vertex),this.fragmentShader=this._getWGSLFragmentCode(e.fragment)):this.computeShader=this._getWGSLComputeCode(e.compute,(this.object.workgroupSize||[64]).join(", "))}getMethod(e,t=null){let r;return null!==t&&(r=this._getWGSLMethod(e+"_"+t)),void 0===r&&(r=this._getWGSLMethod(e)),r||e}getType(e){return OE[e]||e}isAvailable(e){let t=VE[e];return void 0===t&&("float32Filterable"===e?t=this.renderer.hasFeature("float32-filterable"):"clipDistance"===e&&(t=this.renderer.hasFeature("clip-distances")),VE[e]=t),t}_getWGSLMethod(e){return void 0!==GE[e]&&this._include(e),zE[e]}_include(e){const t=GE[e];return t.build(this),null!==this.currentFunctionNode&&this.currentFunctionNode.includes.push(t),t}_getWGSLVertexCode(e){return`${this.getSignature()}\n// directives\n${e.directives}\n\n// structs\n${e.structs}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\nvar<private> varyings : VaryingsStruct;\n\n// codes\n${e.codes}\n\n@vertex\nfn main( ${e.attributes} ) -> VaryingsStruct {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n\treturn varyings;\n\n}\n`}_getWGSLFragmentCode(e){return`${this.getSignature()}\n// global\n${$E}\n\n// structs\n${e.structs}\n\n// uniforms\n${e.uniforms}\n\n// codes\n${e.codes}\n\n@fragment\nfn main( ${e.varyings} ) -> ${e.returnType} {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}_getWGSLComputeCode(e,t){return`${this.getSignature()}\n// directives\n${e.directives}\n\n// system\nvar<private> instanceIndex : u32;\n\n// locals\n${e.scopedArrays}\n\n// structs\n${e.structs}\n\n// uniforms\n${e.uniforms}\n\n// codes\n${e.codes}\n\n@compute @workgroup_size( ${t} )\nfn main( ${e.attributes} ) {\n\n\t// system\n\tinstanceIndex = globalId.x + globalId.y * numWorkgroups.x * u32(${t}) + globalId.z * numWorkgroups.x * numWorkgroups.y * u32(${t});\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}_getWGSLStruct(e,t){return`\nstruct ${e} {\n${t}\n};`}_getWGSLStructBinding(e,t,r,s=0,i=0){const n=e+"Struct";return`${this._getWGSLStruct(n,t)}\n@binding( ${s} ) @group( ${i} )\nvar<${r}> ${e} : ${n};`}}class WE{constructor(e){this.backend=e}getCurrentDepthStencilFormat(e){let t;return null!==e.depthTexture?t=this.getTextureFormatGPU(e.depthTexture):e.depth&&e.stencil?t=fS:e.depth&&(t=mS),t}getTextureFormatGPU(e){return this.backend.get(e).format}getTextureSampleData(e){let t;if(e.isFramebufferTexture)t=1;else if(e.isDepthTexture&&!e.renderTarget){const e=this.backend.renderer,r=e.getRenderTarget();t=r?r.samples:e.samples}else e.renderTarget&&(t=e.renderTarget.samples);t=t||1;const r=t>1&&null!==e.renderTarget&&!0!==e.isDepthTexture&&!0!==e.isFramebufferTexture;return{samples:t,primarySamples:r?1:t,isMSAA:r}}getCurrentColorFormat(e){let t;return t=null!==e.textures?this.getTextureFormatGPU(e.textures[0]):this.getPreferredCanvasFormat(),t}getCurrentColorSpace(e){return null!==e.textures?e.textures[0].colorSpace:this.backend.renderer.outputColorSpace}getPrimitiveTopology(e,t){return e.isPoints?dN:e.isLineSegments||e.isMesh&&!0===t.wireframe?cN:e.isLine?hN:e.isMesh?pN:void 0}getSampleCount(e){let t=1;return e>1&&(t=Math.pow(2,Math.floor(Math.log2(e))),2===t&&(t=4)),t}getSampleCountRenderContext(e){return null!==e.textures?this.getSampleCount(e.sampleCount):this.getSampleCount(this.backend.renderer.samples)}getPreferredCanvasFormat(){const e=this.backend.parameters.outputType;if(void 0===e)return navigator.gpu.getPreferredCanvasFormat();if(e===Me)return eS;if(e===he)return dS;throw new Error("Unsupported outputType")}}const jE=new Map([[Int8Array,["sint8","snorm8"]],[Uint8Array,["uint8","unorm8"]],[Int16Array,["sint16","snorm16"]],[Uint16Array,["uint16","unorm16"]],[Int32Array,["sint32","snorm32"]],[Uint32Array,["uint32","unorm32"]],[Float32Array,["float32"]]]),qE=new Map([[He,["float16"]]]),XE=new Map([[Int32Array,"sint32"],[Int16Array,"sint32"],[Uint32Array,"uint32"],[Uint16Array,"uint32"],[Float32Array,"float32"]]);class KE{constructor(e){this.backend=e}createAttribute(e,t){const r=this._getBufferAttribute(e),s=this.backend,i=s.get(r);let n=i.buffer;if(void 0===n){const a=s.device;let o=r.array;if(!1===e.normalized)if(o.constructor===Int16Array||o.constructor===Int8Array)o=new Int32Array(o);else if((o.constructor===Uint16Array||o.constructor===Uint8Array)&&(o=new Uint32Array(o),t&GPUBufferUsage.INDEX))for(let e=0;e<o.length;e++)65535===o[e]&&(o[e]=4294967295);if(r.array=o,(r.isStorageBufferAttribute||r.isStorageInstancedBufferAttribute)&&3===r.itemSize){o=new o.constructor(4*r.count);for(let e=0;e<r.count;e++)o.set(r.array.subarray(3*e,3*e+3),4*e);r.itemSize=4,r.array=o,i._force3to4BytesAlignment=!0}const u=o.byteLength+(4-o.byteLength%4)%4;n=a.createBuffer({label:r.name,size:u,usage:t,mappedAtCreation:!0}),new o.constructor(n.getMappedRange()).set(o),n.unmap(),i.buffer=n}}updateAttribute(e){const t=this._getBufferAttribute(e),r=this.backend,s=r.device,i=r.get(t),n=r.get(t).buffer;let a=t.array;if(!0===i._force3to4BytesAlignment){a=new a.constructor(4*t.count);for(let e=0;e<t.count;e++)a.set(t.array.subarray(3*e,3*e+3),4*e);t.array=a}const o=this._isTypedArray(a),u=t.updateRanges;if(0===u.length)s.queue.writeBuffer(n,0,a,0);else{const e=o?1:a.BYTES_PER_ELEMENT;for(let t=0,r=u.length;t<r;t++){const r=u[t];let l,d;if(!0===i._force3to4BytesAlignment){l=4*Math.floor(r.start/3)*e,d=4*Math.ceil(r.count/3)*e}else l=r.start*e,d=r.count*e;const c=l*(o?a.BYTES_PER_ELEMENT:1);s.queue.writeBuffer(n,c,a,l,d)}t.clearUpdateRanges()}}createShaderVertexBuffers(e){const t=e.getAttributes(),r=new Map;for(let e=0;e<t.length;e++){const s=t[e],i=s.array.BYTES_PER_ELEMENT,n=this._getBufferAttribute(s);let a=r.get(n);if(void 0===a){let e,t;!0===s.isInterleavedBufferAttribute?(e=s.data.stride*i,t=s.data.isInstancedInterleavedBuffer?fE:mE):(e=s.itemSize*i,t=s.isInstancedBufferAttribute?fE:mE),!1!==s.normalized||s.array.constructor!==Int16Array&&s.array.constructor!==Uint16Array||(e=4),a={arrayStride:e,attributes:[],stepMode:t},r.set(n,a)}const o=this._getVertexFormat(s),u=!0===s.isInterleavedBufferAttribute?s.offset*i:0;a.attributes.push({shaderLocation:e,offset:u,format:o})}return Array.from(r.values())}destroyAttribute(e){const t=this.backend;t.get(this._getBufferAttribute(e)).buffer.destroy(),t.delete(e)}async getArrayBufferAsync(e){const t=this.backend,r=t.device,s=t.get(this._getBufferAttribute(e)).buffer,i=s.size,n=r.createBuffer({label:`${e.name}_readback`,size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),a=r.createCommandEncoder({label:`readback_encoder_${e.name}`});a.copyBufferToBuffer(s,0,n,0,i);const o=a.finish();r.queue.submit([o]),await n.mapAsync(GPUMapMode.READ);const u=n.getMappedRange(),l=new e.array.constructor(u.slice(0));return n.unmap(),l.buffer}_getVertexFormat(e){const{itemSize:t,normalized:r}=e,s=e.array.constructor,i=e.constructor;let n;if(1===t)n=XE.get(s);else{const e=(qE.get(i)||jE.get(s))[r?1:0];if(e){const r=s.BYTES_PER_ELEMENT*t,i=4*Math.floor((r+3)/4)/s.BYTES_PER_ELEMENT;if(i%1)throw new Error("THREE.WebGPUAttributeUtils: Bad vertex format item size.");n=`${e}x${i}`}}return n||console.error("THREE.WebGPUAttributeUtils: Vertex format not supported yet."),n}_isTypedArray(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}}class YE{constructor(e){this.backend=e,this.bindGroupLayoutCache=new WeakMap}createBindingsLayout(e){const t=this.backend,r=t.device,s=[];let i=0;for(const r of e.bindings){const e={binding:i++,visibility:r.visibility};if(r.isUniformBuffer||r.isStorageBuffer){const t={};r.isStorageBuffer&&(4&r.visibility&&(r.access===Us.READ_WRITE||r.access===Us.WRITE_ONLY)?t.type=Yw:t.type=Qw),e.buffer=t}else if(r.isSampler){const s={};r.texture.isDepthTexture&&(null!==r.texture.compareFunction?s.type=rE:t.compatibilityMode&&(s.type=tE)),e.sampler=s}else if(r.isSampledTexture&&r.texture.isVideoTexture)e.externalTexture={};else if(r.isSampledTexture&&r.store){const t={};t.format=this.backend.get(r.texture).texture.format;const s=r.access;t.access=s===Us.READ_WRITE?eE:s===Us.WRITE_ONLY?Zw:Jw,e.storageTexture=t}else if(r.isSampledTexture){const s={},{primarySamples:i}=t.utils.getTextureSampleData(r.texture);if(i>1&&(s.multisampled=!0,r.texture.isDepthTexture||(s.sampleType=iE)),r.texture.isDepthTexture)t.compatibilityMode&&null===r.texture.compareFunction?s.sampleType=iE:s.sampleType=nE;else if(r.texture.isDataTexture||r.texture.isDataArrayTexture||r.texture.isData3DTexture){const e=r.texture.type;e===T?s.sampleType=aE:e===b?s.sampleType=oE:e===L&&(this.backend.hasFeature("float32-filterable")?s.sampleType=sE:s.sampleType=iE)}r.isSampledCubeTexture?s.viewDimension=hE:r.texture.isDataArrayTexture||r.texture.isDepthArrayTexture||r.texture.isCompressedArrayTexture?s.viewDimension=cE:r.isSampledTexture3D&&(s.viewDimension=pE),e.texture=s}else console.error(`WebGPUBindingUtils: Unsupported binding "${r}".`);s.push(e)}return r.createBindGroupLayout({entries:s})}createBindings(e,t,r,s=0){const{backend:i,bindGroupLayoutCache:n}=this,a=i.get(e);let o,u=n.get(e.bindingsReference);void 0===u&&(u=this.createBindingsLayout(e),n.set(e.bindingsReference,u)),r>0&&(void 0===a.groups&&(a.groups=[],a.versions=[]),a.versions[r]===s&&(o=a.groups[r])),void 0===o&&(o=this.createBindGroup(e,u),r>0&&(a.groups[r]=o,a.versions[r]=s)),a.group=o,a.layout=u}updateBinding(e){const t=this.backend,r=t.device,s=e.buffer,i=t.get(e).buffer;r.queue.writeBuffer(i,0,s,0)}createBindGroupIndex(e,t){const r=this.backend.device,s=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,i=e[0],n=r.createBuffer({label:"bindingCameraIndex_"+i,size:16,usage:s});r.queue.writeBuffer(n,0,e,0);const a=[{binding:0,resource:{buffer:n}}];return r.createBindGroup({label:"bindGroupCameraIndex_"+i,layout:t,entries:a})}createBindGroup(e,t){const r=this.backend,s=r.device;let i=0;const n=[];for(const t of e.bindings){if(t.isUniformBuffer){const e=r.get(t);if(void 0===e.buffer){const r=t.byteLength,i=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,n=s.createBuffer({label:"bindingBuffer_"+t.name,size:r,usage:i});e.buffer=n}n.push({binding:i,resource:{buffer:e.buffer}})}else if(t.isStorageBuffer){const e=r.get(t);if(void 0===e.buffer){const s=t.attribute;e.buffer=r.get(s).buffer}n.push({binding:i,resource:{buffer:e.buffer}})}else if(t.isSampler){const e=r.get(t.texture);n.push({binding:i,resource:e.sampler})}else if(t.isSampledTexture){const e=r.get(t.texture);let a;if(void 0!==e.externalTexture)a=s.importExternalTexture({source:e.externalTexture});else{const r=t.store?1:e.texture.mipLevelCount,s=`view-${e.texture.width}-${e.texture.height}-${r}`;if(a=e[s],void 0===a){const i=gE;let n;n=t.isSampledCubeTexture?hE:t.isSampledTexture3D?pE:t.texture.isDataArrayTexture||t.texture.isDepthArrayTexture||t.texture.isCompressedArrayTexture?cE:dE,a=e[s]=e.texture.createView({aspect:i,dimension:n,mipLevelCount:r})}}n.push({binding:i,resource:a})}i++}return s.createBindGroup({label:"bindGroup_"+e.name,layout:t,entries:n})}}class QE{constructor(e){this.backend=e}_getSampleCount(e){return this.backend.utils.getSampleCountRenderContext(e)}createRenderPipeline(e,t){const{object:r,material:s,geometry:i,pipeline:n}=e,{vertexProgram:a,fragmentProgram:o}=n,u=this.backend,l=u.device,d=u.utils,c=u.get(n),h=[];for(const t of e.getBindings()){const e=u.get(t);h.push(e.layout)}const p=u.attributeUtils.createShaderVertexBuffers(e);let g;s.blending===k||s.blending===V&&!1===s.transparent||(g=this._getBlending(s));let m={};!0===s.stencilWrite&&(m={compare:this._getStencilCompare(s),failOp:this._getStencilOperation(s.stencilFail),depthFailOp:this._getStencilOperation(s.stencilZFail),passOp:this._getStencilOperation(s.stencilZPass)});const f=this._getColorWriteMask(s),y=[];if(null!==e.context.textures){const t=e.context.textures;for(let e=0;e<t.length;e++){const r=d.getTextureFormatGPU(t[e]);y.push({format:r,blend:g,writeMask:f})}}else{const t=d.getCurrentColorFormat(e.context);y.push({format:t,blend:g,writeMask:f})}const x=u.get(a).module,b=u.get(o).module,T=this._getPrimitiveState(r,i,s),_=this._getDepthCompare(s),v=d.getCurrentDepthStencilFormat(e.context),N=this._getSampleCount(e.context),S={label:`renderPipeline_${s.name||s.type}_${s.id}`,vertex:Object.assign({},x,{buffers:p}),fragment:Object.assign({},b,{targets:y}),primitive:T,multisample:{count:N,alphaToCoverageEnabled:s.alphaToCoverage&&N>1},layout:l.createPipelineLayout({bindGroupLayouts:h})},w={},E=e.context.depth,A=e.context.stencil;if(!0!==E&&!0!==A||(!0===E&&(w.format=v,w.depthWriteEnabled=s.depthWrite,w.depthCompare=_),!0===A&&(w.stencilFront=m,w.stencilBack={},w.stencilReadMask=s.stencilFuncMask,w.stencilWriteMask=s.stencilWriteMask),!0===s.polygonOffset&&(w.depthBias=s.polygonOffsetUnits,w.depthBiasSlopeScale=s.polygonOffsetFactor,w.depthBiasClamp=0),S.depthStencil=w),null===t)c.pipeline=l.createRenderPipeline(S);else{const e=new Promise((e=>{l.createRenderPipelineAsync(S).then((t=>{c.pipeline=t,e()}))}));t.push(e)}}createBundleEncoder(e,t="renderBundleEncoder"){const r=this.backend,{utils:s,device:i}=r,n=s.getCurrentDepthStencilFormat(e),a={label:t,colorFormats:[s.getCurrentColorFormat(e)],depthStencilFormat:n,sampleCount:this._getSampleCount(e)};return i.createRenderBundleEncoder(a)}createComputePipeline(e,t){const r=this.backend,s=r.device,i=r.get(e.computeProgram).module,n=r.get(e),a=[];for(const e of t){const t=r.get(e);a.push(t.layout)}n.pipeline=s.createComputePipeline({compute:i,layout:s.createPipelineLayout({bindGroupLayouts:a})})}_getBlending(e){let t,r;const s=e.blending,i=e.blendSrc,n=e.blendDst,a=e.blendEquation;if(s===Ke){const s=null!==e.blendSrcAlpha?e.blendSrcAlpha:i,o=null!==e.blendDstAlpha?e.blendDstAlpha:n,u=null!==e.blendEquationAlpha?e.blendEquationAlpha:a;t={srcFactor:this._getBlendFactor(i),dstFactor:this._getBlendFactor(n),operation:this._getBlendOperation(a)},r={srcFactor:this._getBlendFactor(s),dstFactor:this._getBlendFactor(o),operation:this._getBlendOperation(u)}}else{const i=(e,s,i,n)=>{t={srcFactor:e,dstFactor:s,operation:Dw},r={srcFactor:i,dstFactor:n,operation:Dw}};if(e.premultipliedAlpha)switch(s){case V:i(Nw,Aw,Nw,Aw);break;case Bt:i(Nw,Nw,Nw,Nw);break;case Ft:i(vw,ww,vw,Nw);break;case Lt:i(vw,Sw,vw,Ew)}else switch(s){case V:i(Ew,Aw,Nw,Aw);break;case Bt:i(Ew,Nw,Ew,Nw);break;case Ft:i(vw,ww,vw,Nw);break;case Lt:i(vw,Sw,vw,Sw)}}if(void 0!==t&&void 0!==r)return{color:t,alpha:r};console.error("THREE.WebGPURenderer: Invalid blending: ",s)}_getBlendFactor(e){let t;switch(e){case Qe:t=vw;break;case Rt:t=Nw;break;case At:t=Sw;break;case vt:t=ww;break;case Et:t=Ew;break;case _t:t=Aw;break;case St:t=Rw;break;case Tt:t=Cw;break;case Nt:t=Mw;break;case bt:t=Pw;break;case wt:t=Lw;break;case 211:t=Fw;break;case 212:t=Bw;break;default:console.error("THREE.WebGPURenderer: Blend factor not supported.",e)}return t}_getStencilCompare(e){let t;const r=e.stencilFunc;switch(r){case Gr:t=mN;break;case kr:t=vN;break;case Or:t=fN;break;case Ur:t=xN;break;case Vr:t=yN;break;case Ir:t=_N;break;case Dr:t=bN;break;case Br:t=TN;break;default:console.error("THREE.WebGPURenderer: Invalid stencil function.",r)}return t}_getStencilOperation(e){let t;switch(e){case Kr:t=zw;break;case Xr:t=$w;break;case qr:t=Hw;break;case jr:t=Ww;break;case Wr:t=jw;break;case Hr:t=qw;break;case $r:t=Xw;break;case zr:t=Kw;break;default:console.error("THREE.WebGPURenderer: Invalid stencil operation.",t)}return t}_getBlendOperation(e){let t;switch(e){case Ye:t=Dw;break;case xt:t=Iw;break;case yt:t=Vw;break;case Qr:t=Uw;break;case Yr:t=Ow;break;default:console.error("THREE.WebGPUPipelineUtils: Blend equation not supported.",e)}return t}_getPrimitiveState(e,t,r){const s={},i=this.backend.utils;switch(s.topology=i.getPrimitiveTopology(e,r),null!==t.index&&!0===e.isLine&&!0!==e.isLineSegments&&(s.stripIndexFormat=t.index.array instanceof Uint16Array?MN:PN),r.side){case Xe:s.frontFace=EN,s.cullMode=CN;break;case N:s.frontFace=EN,s.cullMode=RN;break;case Se:s.frontFace=EN,s.cullMode=AN;break;default:console.error("THREE.WebGPUPipelineUtils: Unknown material.side value.",r.side)}return s}_getColorWriteMask(e){return!0===e.colorWrite?Gw:kw}_getDepthCompare(e){let t;if(!1===e.depthTest)t=vN;else{const r=e.depthFunc;switch(r){case zt:t=mN;break;case Gt:t=vN;break;case kt:t=fN;break;case Ot:t=xN;break;case Ut:t=yN;break;case Vt:t=_N;break;case It:t=bN;break;case Dt:t=TN;break;default:console.error("THREE.WebGPUPipelineUtils: Invalid depth function.",r)}}return t}}class ZE extends oN{constructor(e,t,r=2048){super(r),this.device=e,this.type=t,this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxQueries,label:`queryset_global_timestamp_${t}`});const s=8*this.maxQueries;this.resolveBuffer=this.device.createBuffer({label:`buffer_timestamp_resolve_${t}`,size:s,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.resultBuffer=this.device.createBuffer({label:`buffer_timestamp_result_${t}`,size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ})}allocateQueriesForContext(e){if(!this.trackTimestamp||this.isDisposed)return null;if(this.currentQueryIndex+2>this.maxQueries)return mt(`WebGPUTimestampQueryPool [${this.type}]: Maximum number of queries exceeded, when using trackTimestamp it is necessary to resolves the queries via renderer.resolveTimestampsAsync( THREE.TimestampQuery.${this.type.toUpperCase()} ).`),null;const t=this.currentQueryIndex;return this.currentQueryIndex+=2,this.queryOffsets.set(e.id,t),t}async resolveQueriesAsync(){if(!this.trackTimestamp||0===this.currentQueryIndex||this.isDisposed)return this.lastValue;if(this.pendingResolve)return this.pendingResolve;this.pendingResolve=this._resolveQueries();try{return await this.pendingResolve}finally{this.pendingResolve=null}}async _resolveQueries(){if(this.isDisposed)return this.lastValue;try{if("unmapped"!==this.resultBuffer.mapState)return this.lastValue;const e=new Map(this.queryOffsets),t=this.currentQueryIndex,r=8*t;this.currentQueryIndex=0,this.queryOffsets.clear();const s=this.device.createCommandEncoder();s.resolveQuerySet(this.querySet,0,t,this.resolveBuffer,0),s.copyBufferToBuffer(this.resolveBuffer,0,this.resultBuffer,0,r);const i=s.finish();if(this.device.queue.submit([i]),"unmapped"!==this.resultBuffer.mapState)return this.lastValue;if(await this.resultBuffer.mapAsync(GPUMapMode.READ,0,r),this.isDisposed)return"mapped"===this.resultBuffer.mapState&&this.resultBuffer.unmap(),this.lastValue;const n=new BigUint64Array(this.resultBuffer.getMappedRange(0,r));let a=0;for(const[,t]of e){const e=n[t],r=n[t+1];a+=Number(r-e)/1e6}return this.resultBuffer.unmap(),this.lastValue=a,a}catch(e){return console.error("Error resolving queries:",e),"mapped"===this.resultBuffer.mapState&&this.resultBuffer.unmap(),this.lastValue}}async dispose(){if(!this.isDisposed){if(this.isDisposed=!0,this.pendingResolve)try{await this.pendingResolve}catch(e){console.error("Error waiting for pending resolve:",e)}if(this.resultBuffer&&"mapped"===this.resultBuffer.mapState)try{this.resultBuffer.unmap()}catch(e){console.error("Error unmapping buffer:",e)}this.querySet&&(this.querySet.destroy(),this.querySet=null),this.resolveBuffer&&(this.resolveBuffer.destroy(),this.resolveBuffer=null),this.resultBuffer&&(this.resultBuffer.destroy(),this.resultBuffer=null),this.queryOffsets.clear(),this.pendingResolve=null}}}class JE extends Hv{constructor(e={}){super(e),this.isWebGPUBackend=!0,this.parameters.alpha=void 0===e.alpha||e.alpha,this.parameters.compatibilityMode=void 0!==e.compatibilityMode&&e.compatibilityMode,this.parameters.requiredLimits=void 0===e.requiredLimits?{}:e.requiredLimits,this.compatibilityMode=this.parameters.compatibilityMode,this.device=null,this.context=null,this.colorBuffer=null,this.defaultRenderPassdescriptor=null,this.utils=new WE(this),this.attributeUtils=new KE(this),this.bindingUtils=new YE(this),this.pipelineUtils=new QE(this),this.textureUtils=new EE(this),this.occludedResolveCache=new Map}async init(e){await super.init(e);const t=this.parameters;let r;if(void 0===t.device){const e={powerPreference:t.powerPreference,featureLevel:t.compatibilityMode?"compatibility":void 0},s="undefined"!=typeof navigator?await navigator.gpu.requestAdapter(e):null;if(null===s)throw new Error("WebGPUBackend: Unable to create WebGPU adapter.");const i=Object.values(yE),n=[];for(const e of i)s.features.has(e)&&n.push(e);const a={requiredFeatures:n,requiredLimits:t.requiredLimits};r=await s.requestDevice(a)}else r=t.device;r.lost.then((t=>{const r={api:"WebGPU",message:t.message||"Unknown reason",reason:t.reason||null,originalEvent:t};e.onDeviceLost(r)}));const s=void 0!==t.context?t.context:e.domElement.getContext("webgpu");this.device=r,this.context=s;const i=t.alpha?"premultiplied":"opaque";this.trackTimestamp=this.trackTimestamp&&this.hasFeature(yE.TimestampQuery),this.context.configure({device:this.device,format:this.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,alphaMode:i}),this.updateSize()}get coordinateSystem(){return d}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}getContext(){return this.context}_getDefaultRenderPassDescriptor(){let e=this.defaultRenderPassdescriptor;if(null===e){const t=this.renderer;e={colorAttachments:[{view:null}]},!0!==this.renderer.depth&&!0!==this.renderer.stencil||(e.depthStencilAttachment={view:this.textureUtils.getDepthBuffer(t.depth,t.stencil).createView()});const r=e.colorAttachments[0];this.renderer.samples>0?r.view=this.colorBuffer.createView():r.resolveTarget=void 0,this.defaultRenderPassdescriptor=e}const t=e.colorAttachments[0];return this.renderer.samples>0?t.resolveTarget=this.context.getCurrentTexture().createView():t.view=this.context.getCurrentTexture().createView(),e}_isRenderCameraDepthArray(e){return e.depthTexture&&e.depthTexture.isDepthArrayTexture&&e.camera.isArrayCamera}_getRenderPassDescriptor(e,t={}){const r=e.renderTarget,s=this.get(r);let i=s.descriptors;if(void 0===i||s.width!==r.width||s.height!==r.height||s.dimensions!==r.dimensions||s.activeMipmapLevel!==e.activeMipmapLevel||s.activeCubeFace!==e.activeCubeFace||s.samples!==r.samples){i={},s.descriptors=i;const e=()=>{r.removeEventListener("dispose",e),this.delete(r)};!1===r.hasEventListener("dispose",e)&&r.addEventListener("dispose",e)}const n=e.getCacheKey();let a=i[n];if(void 0===a){const t=e.textures,o=[];let u;const l=this._isRenderCameraDepthArray(e);for(let s=0;s<t.length;s++){const i=this.get(t[s]),n={label:`colorAttachment_${s}`,baseMipLevel:e.activeMipmapLevel,mipLevelCount:1,baseArrayLayer:e.activeCubeFace,arrayLayerCount:1,dimension:dE};if(r.isRenderTarget3D)u=e.activeCubeFace,n.baseArrayLayer=0,n.dimension=pE,n.depthOrArrayLayers=t[s].image.depth;else if(r.isRenderTargetArray)if(!0===l){const t=e.camera.cameras;for(let e=0;e<t.length;e++){const t={...n,baseArrayLayer:e,arrayLayerCount:1,dimension:dE},r=i.texture.createView(t);o.push({view:r,resolveTarget:void 0,depthSlice:void 0})}}else n.dimension=cE,n.depthOrArrayLayers=t[s].image.depth;if(!0!==l){const e=i.texture.createView(n);let t,r;void 0!==i.msaaTexture?(t=i.msaaTexture.createView(),r=e):(t=e,r=void 0),o.push({view:t,resolveTarget:r,depthSlice:u})}}if(a={textureViews:o},e.depth){const t=this.get(e.depthTexture),r={};e.depthTexture.isDepthArrayTexture&&(r.dimension=dE,r.arrayLayerCount=1,r.baseArrayLayer=e.activeCubeFace),a.depthStencilView=t.texture.createView(r)}i[n]=a,s.width=r.width,s.height=r.height,s.samples=r.samples,s.activeMipmapLevel=e.activeMipmapLevel,s.activeCubeFace=e.activeCubeFace,s.dimensions=r.dimensions}const o={colorAttachments:[]};for(let e=0;e<a.textureViews.length;e++){const r=a.textureViews[e];let s={r:0,g:0,b:0,a:1};0===e&&t.clearValue&&(s=t.clearValue),o.colorAttachments.push({view:r.view,depthSlice:r.depthSlice,resolveTarget:r.resolveTarget,loadOp:t.loadOp||SN,storeOp:t.storeOp||NN,clearValue:s})}return a.depthStencilView&&(o.depthStencilAttachment={view:a.depthStencilView}),o}beginRender(e){const t=this.get(e),r=this.device,s=e.occlusionQueryCount;let i,n;s>0&&(t.currentOcclusionQuerySet&&t.currentOcclusionQuerySet.destroy(),t.currentOcclusionQueryBuffer&&t.currentOcclusionQueryBuffer.destroy(),t.currentOcclusionQuerySet=t.occlusionQuerySet,t.currentOcclusionQueryBuffer=t.occlusionQueryBuffer,t.currentOcclusionQueryObjects=t.occlusionQueryObjects,i=r.createQuerySet({type:"occlusion",count:s,label:`occlusionQuerySet_${e.id}`}),t.occlusionQuerySet=i,t.occlusionQueryIndex=0,t.occlusionQueryObjects=new Array(s),t.lastOcclusionObject=null),n=null===e.textures?this._getDefaultRenderPassDescriptor():this._getRenderPassDescriptor(e,{loadOp:SN}),this.initTimestampQuery(e,n),n.occlusionQuerySet=i;const a=n.depthStencilAttachment;if(null!==e.textures){const t=n.colorAttachments;for(let r=0;r<t.length;r++){const s=t[r];e.clearColor?(s.clearValue=0===r?e.clearColorValue:{r:0,g:0,b:0,a:1},s.loadOp=wN):s.loadOp=SN,s.storeOp=NN}}else{const t=n.colorAttachments[0];e.clearColor?(t.clearValue=e.clearColorValue,t.loadOp=wN):t.loadOp=SN,t.storeOp=NN}e.depth&&(e.clearDepth?(a.depthClearValue=e.clearDepthValue,a.depthLoadOp=wN):a.depthLoadOp=SN,a.depthStoreOp=NN),e.stencil&&(e.clearStencil?(a.stencilClearValue=e.clearStencilValue,a.stencilLoadOp=wN):a.stencilLoadOp=SN,a.stencilStoreOp=NN);const o=r.createCommandEncoder({label:"renderContext_"+e.id});if(!0===this._isRenderCameraDepthArray(e)){const r=e.camera.cameras;t.layerDescriptors&&t.layerDescriptors.length===r.length?this._updateDepthLayerDescriptors(e,t,r):this._createDepthLayerDescriptors(e,t,n,r),t.bundleEncoders=[],t.bundleSets=[];for(let s=0;s<r.length;s++){const r=this.pipelineUtils.createBundleEncoder(e,"renderBundleArrayCamera_"+s),i={attributes:{},bindingGroups:[],pipeline:null,index:null};t.bundleEncoders.push(r),t.bundleSets.push(i)}t.currentPass=null}else{const r=o.beginRenderPass(n);if(t.currentPass=r,e.viewport&&this.updateViewport(e),e.scissor){const{x:t,y:s,width:i,height:n}=e.scissorValue;r.setScissorRect(t,s,i,n)}}t.descriptor=n,t.encoder=o,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.renderBundles=[]}_createDepthLayerDescriptors(e,t,r,s){const i=r.depthStencilAttachment;t.layerDescriptors=[];const n=this.get(e.depthTexture);n.viewCache||(n.viewCache=[]);for(let a=0;a<s.length;a++){const s={...r,colorAttachments:[{...r.colorAttachments[0],view:r.colorAttachments[a].view}]};if(r.depthStencilAttachment){const t=a;n.viewCache[t]||(n.viewCache[t]=n.texture.createView({dimension:dE,baseArrayLayer:a,arrayLayerCount:1})),s.depthStencilAttachment={view:n.viewCache[t],depthLoadOp:i.depthLoadOp||wN,depthStoreOp:i.depthStoreOp||NN,depthClearValue:i.depthClearValue||1},e.stencil&&(s.depthStencilAttachment.stencilLoadOp=i.stencilLoadOp,s.depthStencilAttachment.stencilStoreOp=i.stencilStoreOp,s.depthStencilAttachment.stencilClearValue=i.stencilClearValue)}else s.depthStencilAttachment={...i};t.layerDescriptors.push(s)}}_updateDepthLayerDescriptors(e,t,r){for(let s=0;s<r.length;s++){const r=t.layerDescriptors[s];if(r.depthStencilAttachment){const t=r.depthStencilAttachment;e.depth&&(e.clearDepth?(t.depthClearValue=e.clearDepthValue,t.depthLoadOp=wN):t.depthLoadOp=SN),e.stencil&&(e.clearStencil?(t.stencilClearValue=e.clearStencilValue,t.stencilLoadOp=wN):t.stencilLoadOp=SN)}}}finishRender(e){const t=this.get(e),r=e.occlusionQueryCount;t.renderBundles.length>0&&t.currentPass.executeBundles(t.renderBundles),r>t.occlusionQueryIndex&&t.currentPass.endOcclusionQuery();const s=t.encoder;if(!0===this._isRenderCameraDepthArray(e)){const r=[];for(let e=0;e<t.bundleEncoders.length;e++){const s=t.bundleEncoders[e];r.push(s.finish())}for(let i=0;i<t.layerDescriptors.length;i++)if(i<r.length){const n=t.layerDescriptors[i],a=s.beginRenderPass(n);if(e.viewport){const{x:t,y:r,width:s,height:i,minDepth:n,maxDepth:o}=e.viewportValue;a.setViewport(t,r,s,i,n,o)}if(e.scissor){const{x:t,y:r,width:s,height:i}=e.scissorValue;a.setScissorRect(t,r,s,i)}a.executeBundles([r[i]]),a.end()}}else t.currentPass&&t.currentPass.end();if(r>0){const s=8*r;let i=this.occludedResolveCache.get(s);void 0===i&&(i=this.device.createBuffer({size:s,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.occludedResolveCache.set(s,i));const n=this.device.createBuffer({size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});t.encoder.resolveQuerySet(t.occlusionQuerySet,0,r,i,0),t.encoder.copyBufferToBuffer(i,0,n,0,s),t.occlusionQueryBuffer=n,this.resolveOccludedAsync(e)}if(this.device.queue.submit([t.encoder.finish()]),null!==e.textures){const t=e.textures;for(let e=0;e<t.length;e++){const r=t[e];!0===r.generateMipmaps&&this.textureUtils.generateMipmaps(r)}}}isOccluded(e,t){const r=this.get(e);return r.occluded&&r.occluded.has(t)}async resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueryBuffer:r,currentOcclusionQueryObjects:s}=t;if(r&&s){const e=new WeakSet;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueryBuffer=null,await r.mapAsync(GPUMapMode.READ);const i=r.getMappedRange(),n=new BigUint64Array(i);for(let t=0;t<s.length;t++)n[t]===BigInt(0)&&e.add(s[t]);r.destroy(),t.occluded=e}}updateViewport(e){const{currentPass:t}=this.get(e),{x:r,y:s,width:i,height:n,minDepth:a,maxDepth:o}=e.viewportValue;t.setViewport(r,s,i,n,a,o)}getClearColor(){const e=super.getClearColor();return!0===this.renderer.alpha&&(e.r*=e.a,e.g*=e.a,e.b*=e.a),e}clear(e,t,r,s=null){const i=this.device,n=this.renderer;let a,o,u,l,d=[];if(e){const e=this.getClearColor();o={r:e.r,g:e.g,b:e.b,a:e.a}}if(null===s){u=n.depth,l=n.stencil;const t=this._getDefaultRenderPassDescriptor();if(e){d=t.colorAttachments;const e=d[0];e.clearValue=o,e.loadOp=wN,e.storeOp=NN}(u||l)&&(a=t.depthStencilAttachment)}else{u=s.depth,l=s.stencil;const i={loadOp:e?wN:SN,clearValue:e?o:void 0};u&&(i.depthLoadOp=t?wN:SN,i.depthClearValue=t?n.getClearDepth():void 0,i.depthStoreOp=NN),l&&(i.stencilLoadOp=r?wN:SN,i.stencilClearValue=r?n.getClearStencil():void 0,i.stencilStoreOp=NN);const c=this._getRenderPassDescriptor(s,i);d=c.colorAttachments,a=c.depthStencilAttachment}u&&a&&void 0===a.depthLoadOp&&(t?(a.depthLoadOp=wN,a.depthClearValue=n.getClearDepth(),a.depthStoreOp=NN):(a.depthLoadOp=SN,a.depthStoreOp=NN)),l&&a&&void 0===a.stencilLoadOp&&(r?(a.stencilLoadOp=wN,a.stencilClearValue=n.getClearStencil(),a.stencilStoreOp=NN):(a.stencilLoadOp=SN,a.stencilStoreOp=NN));const c=i.createCommandEncoder({label:"clear"});c.beginRenderPass({colorAttachments:d,depthStencilAttachment:a}).end(),i.queue.submit([c.finish()])}beginCompute(e){const t=this.get(e),r={label:"computeGroup_"+e.id};this.initTimestampQuery(e,r),t.cmdEncoderGPU=this.device.createCommandEncoder({label:"computeGroup_"+e.id}),t.passEncoderGPU=t.cmdEncoderGPU.beginComputePass(r)}compute(e,t,r,s){const{passEncoderGPU:i}=this.get(e),n=this.get(s).pipeline;i.setPipeline(n);for(let e=0,t=r.length;e<t;e++){const t=r[e],s=this.get(t);i.setBindGroup(e,s.group)}const a=this.device.limits.maxComputeWorkgroupsPerDimension,o=this.get(t);void 0===o.dispatchSize&&(o.dispatchSize={x:0,y:1,z:1});const{dispatchSize:u}=o;t.dispatchCount>a?(u.x=Math.min(t.dispatchCount,a),u.y=Math.ceil(t.dispatchCount/a)):u.x=t.dispatchCount,i.dispatchWorkgroups(u.x,u.y,u.z)}finishCompute(e){const t=this.get(e);t.passEncoderGPU.end(),this.device.queue.submit([t.cmdEncoderGPU.finish()])}async waitForGPU(){await this.device.queue.onSubmittedWorkDone()}draw(e,t){const{object:r,material:s,context:i,pipeline:n}=e,a=e.getBindings(),o=this.get(i),u=this.get(n).pipeline,l=e.getIndex(),d=null!==l,c=e.getDrawParameters();if(null===c)return;const h=(t,r)=>{t.setPipeline(u),r.pipeline=u;const n=r.bindingGroups;for(let e=0,r=a.length;e<r;e++){const r=a[e],s=this.get(r);n[r.index]!==r.id&&(t.setBindGroup(r.index,s.group),n[r.index]=r.id)}if(!0===d&&r.index!==l){const e=this.get(l).buffer,s=l.array instanceof Uint16Array?MN:PN;t.setIndexBuffer(e,s),r.index=l}const c=e.getVertexBuffers();for(let e=0,s=c.length;e<s;e++){const s=c[e];if(r.attributes[e]!==s){const i=this.get(s).buffer;t.setVertexBuffer(e,i),r.attributes[e]=s}}!0===i.stencil&&!0===s.stencilWrite&&o.currentStencilRef!==s.stencilRef&&(t.setStencilReference(s.stencilRef),o.currentStencilRef=s.stencilRef)},p=(s,i)=>{if(h(s,i),!0===r.isBatchedMesh){const e=r._multiDrawStarts,i=r._multiDrawCounts,n=r._multiDrawCount,a=r._multiDrawInstances;null!==a&&mt("THREE.WebGPUBackend: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection.");for(let o=0;o<n;o++){const n=a?a[o]:1,u=n>1?0:o;!0===d?s.drawIndexed(i[o],n,e[o]/l.array.BYTES_PER_ELEMENT,0,u):s.draw(i[o],n,e[o],u),t.update(r,i[o],n)}}else if(!0===d){const{vertexCount:i,instanceCount:n,firstVertex:a}=c,o=e.getIndirect();if(null!==o){const e=this.get(o).buffer;s.drawIndexedIndirect(e,0)}else s.drawIndexed(i,n,a,0,0);t.update(r,i,n)}else{const{vertexCount:i,instanceCount:n,firstVertex:a}=c,o=e.getIndirect();if(null!==o){const e=this.get(o).buffer;s.drawIndirect(e,0)}else s.draw(i,n,a,0);t.update(r,i,n)}};if(e.camera.isArrayCamera&&e.camera.cameras.length>0){const t=this.get(e.camera),s=e.camera.cameras,n=e.getBindingGroup("cameraIndex");if(void 0===t.indexesGPU||t.indexesGPU.length!==s.length){const e=this.get(n),r=[],i=new Uint32Array([0,0,0,0]);for(let t=0,n=s.length;t<n;t++){i[0]=t;const s=this.bindingUtils.createBindGroupIndex(i,e.layout);r.push(s)}t.indexesGPU=r}const a=this.renderer.getPixelRatio();for(let e=0,u=s.length;e<u;e++){const u=s[e];if(r.layers.test(u.layers)){const r=u.viewport;let s=o.currentPass,l=o.currentSets;if(o.bundleEncoders){s=o.bundleEncoders[e],l=o.bundleSets[e]}r&&s.setViewport(Math.floor(r.x*a),Math.floor(r.y*a),Math.floor(r.width*a),Math.floor(r.height*a),i.viewportValue.minDepth,i.viewportValue.maxDepth),n&&t.indexesGPU&&(s.setBindGroup(n.index,t.indexesGPU[e]),l.bindingGroups[n.index]=n.id),p(s,l)}}}else if(o.currentPass){if(void 0!==o.occlusionQuerySet){const e=o.lastOcclusionObject;e!==r&&(null!==e&&!0===e.occlusionTest&&(o.currentPass.endOcclusionQuery(),o.occlusionQueryIndex++),!0===r.occlusionTest&&(o.currentPass.beginOcclusionQuery(o.occlusionQueryIndex),o.occlusionQueryObjects[o.occlusionQueryIndex]=r),o.lastOcclusionObject=r)}p(o.currentPass,o.currentSets)}}needsRenderUpdate(e){const t=this.get(e),{object:r,material:s}=e,i=this.utils,n=i.getSampleCountRenderContext(e.context),a=i.getCurrentColorSpace(e.context),o=i.getCurrentColorFormat(e.context),u=i.getCurrentDepthStencilFormat(e.context),l=i.getPrimitiveTopology(r,s);let d=!1;return t.material===s&&t.materialVersion===s.version&&t.transparent===s.transparent&&t.blending===s.blending&&t.premultipliedAlpha===s.premultipliedAlpha&&t.blendSrc===s.blendSrc&&t.blendDst===s.blendDst&&t.blendEquation===s.blendEquation&&t.blendSrcAlpha===s.blendSrcAlpha&&t.blendDstAlpha===s.blendDstAlpha&&t.blendEquationAlpha===s.blendEquationAlpha&&t.colorWrite===s.colorWrite&&t.depthWrite===s.depthWrite&&t.depthTest===s.depthTest&&t.depthFunc===s.depthFunc&&t.stencilWrite===s.stencilWrite&&t.stencilFunc===s.stencilFunc&&t.stencilFail===s.stencilFail&&t.stencilZFail===s.stencilZFail&&t.stencilZPass===s.stencilZPass&&t.stencilFuncMask===s.stencilFuncMask&&t.stencilWriteMask===s.stencilWriteMask&&t.side===s.side&&t.alphaToCoverage===s.alphaToCoverage&&t.sampleCount===n&&t.colorSpace===a&&t.colorFormat===o&&t.depthStencilFormat===u&&t.primitiveTopology===l&&t.clippingContextCacheKey===e.clippingContextCacheKey||(t.material=s,t.materialVersion=s.version,t.transparent=s.transparent,t.blending=s.blending,t.premultipliedAlpha=s.premultipliedAlpha,t.blendSrc=s.blendSrc,t.blendDst=s.blendDst,t.blendEquation=s.blendEquation,t.blendSrcAlpha=s.blendSrcAlpha,t.blendDstAlpha=s.blendDstAlpha,t.blendEquationAlpha=s.blendEquationAlpha,t.colorWrite=s.colorWrite,t.depthWrite=s.depthWrite,t.depthTest=s.depthTest,t.depthFunc=s.depthFunc,t.stencilWrite=s.stencilWrite,t.stencilFunc=s.stencilFunc,t.stencilFail=s.stencilFail,t.stencilZFail=s.stencilZFail,t.stencilZPass=s.stencilZPass,t.stencilFuncMask=s.stencilFuncMask,t.stencilWriteMask=s.stencilWriteMask,t.side=s.side,t.alphaToCoverage=s.alphaToCoverage,t.sampleCount=n,t.colorSpace=a,t.colorFormat=o,t.depthStencilFormat=u,t.primitiveTopology=l,t.clippingContextCacheKey=e.clippingContextCacheKey,d=!0),d}getRenderCacheKey(e){const{object:t,material:r}=e,s=this.utils,i=e.context;return[r.transparent,r.blending,r.premultipliedAlpha,r.blendSrc,r.blendDst,r.blendEquation,r.blendSrcAlpha,r.blendDstAlpha,r.blendEquationAlpha,r.colorWrite,r.depthWrite,r.depthTest,r.depthFunc,r.stencilWrite,r.stencilFunc,r.stencilFail,r.stencilZFail,r.stencilZPass,r.stencilFuncMask,r.stencilWriteMask,r.side,s.getSampleCountRenderContext(i),s.getCurrentColorSpace(i),s.getCurrentColorFormat(i),s.getCurrentDepthStencilFormat(i),s.getPrimitiveTopology(t,r),e.getGeometryCacheKey(),e.clippingContextCacheKey].join()}createSampler(e){this.textureUtils.createSampler(e)}destroySampler(e){this.textureUtils.destroySampler(e)}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}async copyTextureToBuffer(e,t,r,s,i,n){return this.textureUtils.copyTextureToBuffer(e,t,r,s,i,n)}initTimestampQuery(e,t){if(!this.trackTimestamp)return;const r=e.isComputeNode?"compute":"render";this.timestampQueryPool[r]||(this.timestampQueryPool[r]=new ZE(this.device,r,2048));const s=this.timestampQueryPool[r],i=s.allocateQueriesForContext(e);t.timestampWrites={querySet:s.querySet,beginningOfPassWriteIndex:i,endOfPassWriteIndex:i+1}}createNodeBuilder(e,t){return new HE(e,t)}createProgram(e){this.get(e).module={module:this.device.createShaderModule({code:e.code,label:e.stage+(""!==e.name?`_${e.name}`:"")}),entryPoint:"main"}}destroyProgram(e){this.delete(e)}createRenderPipeline(e,t){this.pipelineUtils.createRenderPipeline(e,t)}createComputePipeline(e,t){this.pipelineUtils.createComputePipeline(e,t)}beginBundle(e){const t=this.get(e);t._currentPass=t.currentPass,t._currentSets=t.currentSets,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.currentPass=this.pipelineUtils.createBundleEncoder(e)}finishBundle(e,t){const r=this.get(e),s=r.currentPass.finish();this.get(t).bundleGPU=s,r.currentSets=r._currentSets,r.currentPass=r._currentPass}addBundle(e,t){this.get(e).renderBundles.push(this.get(t).bundleGPU)}createBindings(e,t,r,s){this.bindingUtils.createBindings(e,t,r,s)}updateBindings(e,t,r,s){this.bindingUtils.createBindings(e,t,r,s)}updateBinding(e){this.bindingUtils.updateBinding(e)}createIndexAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.INDEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createIndirectStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.INDIRECT|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}updateSize(){this.colorBuffer=this.textureUtils.getColorBuffer(),this.defaultRenderPassdescriptor=null}getMaxAnisotropy(){return 16}hasFeature(e){return this.device.features.has(e)}copyTextureToTexture(e,t,r=null,s=null,i=0,n=0){let a=0,o=0,u=0,l=0,d=0,c=0,h=e.image.width,p=e.image.height,g=1;null!==r&&(!0===r.isBox3?(l=r.min.x,d=r.min.y,c=r.min.z,h=r.max.x-r.min.x,p=r.max.y-r.min.y,g=r.max.z-r.min.z):(l=r.min.x,d=r.min.y,h=r.max.x-r.min.x,p=r.max.y-r.min.y,g=1)),null!==s&&(a=s.x,o=s.y,u=s.z||0);const m=this.device.createCommandEncoder({label:"copyTextureToTexture_"+e.id+"_"+t.id}),f=this.get(e).texture,y=this.get(t).texture;m.copyTextureToTexture({texture:f,mipLevel:i,origin:{x:l,y:d,z:c}},{texture:y,mipLevel:n,origin:{x:a,y:o,z:u}},[h,p,g]),this.device.queue.submit([m.finish()]),0===n&&t.generateMipmaps&&this.textureUtils.generateMipmaps(t)}copyFramebufferToTexture(e,t,r){const s=this.get(t);let i=null;i=t.renderTarget?e.isDepthTexture?this.get(t.depthTexture).texture:this.get(t.textures[0]).texture:e.isDepthTexture?this.textureUtils.getDepthBuffer(t.depth,t.stencil):this.context.getCurrentTexture();const n=this.get(e).texture;if(i.format!==n.format)return void console.error("WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.",i.format,n.format);let a;if(s.currentPass?(s.currentPass.end(),a=s.encoder):a=this.device.createCommandEncoder({label:"copyFramebufferToTexture_"+e.id}),a.copyTextureToTexture({texture:i,origin:[r.x,r.y,0]},{texture:n},[r.z,r.w]),e.generateMipmaps&&this.textureUtils.generateMipmaps(e),s.currentPass){const{descriptor:e}=s;for(let t=0;t<e.colorAttachments.length;t++)e.colorAttachments[t].loadOp=SN;if(t.depth&&(e.depthStencilAttachment.depthLoadOp=SN),t.stencil&&(e.depthStencilAttachment.stencilLoadOp=SN),s.currentPass=a.beginRenderPass(e),s.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.viewport&&this.updateViewport(t),t.scissor){const{x:e,y:r,width:i,height:n}=t.scissorValue;s.currentPass.setScissorRect(e,r,i,n)}}else this.device.queue.submit([a.finish()])}}class eA extends Zr{constructor(e,t,r,s,i,n){super(e,t,r,s,i,n),this.iesMap=null}copy(e,t){return super.copy(e,t),this.iesMap=e.iesMap,this}}class tA extends ev{constructor(){super(),this.addLight(Yb,Jr),this.addLight(R_,es),this.addLight(L_,ts),this.addLight(F_,Zr),this.addLight(D_,rs),this.addLight(I_,ss),this.addLight(V_,is),this.addLight(B_,eA),this.addToneMapping(dx,ns),this.addToneMapping(cx,as),this.addToneMapping(hx,os),this.addToneMapping(gx,us),this.addToneMapping(xx,ls),this.addToneMapping(bx,ds)}}class rA extends _v{constructor(e={}){let t;e.forceWebGL?t=lN:(t=JE,e.getFallback=()=>(console.warn("THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend."),new lN(e)));super(new t(e),e),this.library=new tA,this.isWebGPURenderer=!0}}class sA extends cs{constructor(){super(),this.isBundleGroup=!0,this.type="BundleGroup",this.static=!0,this.version=0}set needsUpdate(e){!0===e&&this.version++}}class iA{constructor(e,t=rn(0,0,1,1)){this.renderer=e,this.outputNode=t,this.outputColorTransform=!0,this.needsUpdate=!0;const r=new Gh;r.name="PostProcessing",this._quadMesh=new xy(r)}render(){this._update();const e=this.renderer,t=e.toneMapping,r=e.outputColorSpace;e.toneMapping=p,e.outputColorSpace=de;const s=e.xr.enabled;e.xr.enabled=!1,this._quadMesh.render(e),e.xr.enabled=s,e.toneMapping=t,e.outputColorSpace=r}dispose(){this._quadMesh.material.dispose()}_update(){if(!0===this.needsUpdate){const e=this.renderer,t=e.toneMapping,r=e.outputColorSpace;this._quadMesh.material.fragmentNode=!0===this.outputColorTransform?Ou(this.outputNode,t,r):this.outputNode.context({toneMapping:t,outputColorSpace:r}),this._quadMesh.material.needsUpdate=!0,this.needsUpdate=!1}}async renderAsync(){this._update();const e=this.renderer,t=e.toneMapping,r=e.outputColorSpace;e.toneMapping=p,e.outputColorSpace=de;const s=e.xr.enabled;e.xr.enabled=!1,await this._quadMesh.renderAsync(e),e.xr.enabled=s,e.toneMapping=t,e.outputColorSpace=r}}class nA extends pe{constructor(e=1,t=1){super(),this.image={width:e,height:t},this.magFilter=q,this.minFilter=q,this.isStorageTexture=!0}}class aA extends Ey{constructor(e,t){super(e,t,Uint32Array),this.isIndirectStorageBufferAttribute=!0}}class oA extends hs{constructor(e){super(e),this.textures={},this.nodes={}}load(e,t,r,s){const i=new ps(this.manager);i.setPath(this.path),i.setRequestHeader(this.requestHeader),i.setWithCredentials(this.withCredentials),i.load(e,(r=>{try{t(this.parse(JSON.parse(r)))}catch(t){s?s(t):console.error(t),this.manager.itemError(e)}}),r,s)}parseNodes(e){const t={};if(void 0!==e){for(const r of e){const{uuid:e,type:s}=r;t[e]=this.createNodeFromType(s),t[e].uuid=e}const r={nodes:t,textures:this.textures};for(const s of e){s.meta=r;t[s.uuid].deserialize(s),delete s.meta}}return t}parse(e){const t=this.createNodeFromType(e.type);t.uuid=e.uuid;const r={nodes:this.parseNodes(e.nodes),textures:this.textures};return e.meta=r,t.deserialize(e),delete e.meta,t}setTextures(e){return this.textures=e,this}setNodes(e){return this.nodes=e,this}createNodeFromType(e){return void 0===this.nodes[e]?(console.error("THREE.NodeLoader: Node type not found:",e),Hi()):Li(new this.nodes[e])}}class uA extends gs{constructor(e){super(e),this.nodes={},this.nodeMaterials={}}parse(e){const t=super.parse(e),r=this.nodes,s=e.inputNodes;for(const e in s){const i=s[e];t[e]=r[i]}return t}setNodes(e){return this.nodes=e,this}setNodeMaterials(e){return this.nodeMaterials=e,this}createMaterialFromType(e){const t=this.nodeMaterials[e];return void 0!==t?new t:super.createMaterialFromType(e)}}class lA extends ms{constructor(e){super(e),this.nodes={},this.nodeMaterials={},this._nodesJSON=null}setNodes(e){return this.nodes=e,this}setNodeMaterials(e){return this.nodeMaterials=e,this}parse(e,t){this._nodesJSON=e.nodes;const r=super.parse(e,t);return this._nodesJSON=null,r}parseNodes(e,t){if(void 0!==e){const r=new oA;return r.setNodes(this.nodes),r.setTextures(t),r.parseNodes(e)}return{}}parseMaterials(e,t){const r={};if(void 0!==e){const s=this.parseNodes(this._nodesJSON,t),i=new uA;i.setTextures(t),i.setNodes(s),i.setNodeMaterials(this.nodeMaterials);for(let t=0,s=e.length;t<s;t++){const s=e[t];r[s.uuid]=i.parse(s)}}return r}}class dA extends cs{constructor(){super(),this.isClippingGroup=!0,this.clippingPlanes=[],this.enabled=!0,this.clipIntersection=!1,this.clipShadows=!1}}export{us as ACESFilmicToneMapping,rh as AONode,Ye as AddEquation,Z as AddOperation,Bt as AdditiveBlending,ls as AgXToneMapping,jt as AlphaFormat,Lr as AlwaysCompare,Gt as AlwaysDepth,kr as AlwaysStencilFunc,rs as AmbientLight,D_ as AmbientLightNode,qb as AnalyticLightNode,je as ArrayCamera,Ws as ArrayElementNode,Qn as ArrayNode,Jn as AssignNode,zu as AttributeNode,N as BackSide,up as BasicEnvironmentNode,Oe as BasicShadowMap,Uc as BatchNode,H as BoxGeometry,le as BufferAttribute,_u as BufferAttributeNode,ue as BufferGeometry,Zu as BufferNode,Ud as BumpMapNode,sA as BundleGroup,Mu as BypassNode,lt as ByteType,Ru as CacheNode,we as Camera,os as CineonToneMapping,Sr as ClampToEdgeWrapping,dA as ClippingGroup,Tx as CodeNode,e as Color,c as ColorManagement,lu as ColorSpaceNode,Eu as ComputeNode,ti as ConstNode,Xo as ContextNode,js as ConvertNode,X as CubeCamera,w as CubeReflectionMapping,E as CubeRefractionMapping,K as CubeTexture,ld as CubeTextureNode,oe as CubeUVReflectionMapping,Mt as CullFaceBack,Pt as CullFaceFront,Ct as CullFaceNone,Ke as CustomBlending,Ze as CylinderGeometry,P as DataArrayTexture,nt as DataTexture,ku as DebugNode,Hr as DecrementStencilOp,zr as DecrementWrapStencilOp,Ee as DepthArrayTexture,Re as DepthFormat,Ae as DepthStencilFormat,D as DepthTexture,es as DirectionalLight,R_ as DirectionalLightNode,Se as DoubleSide,Nt as DstAlphaFactor,St as DstColorFactor,y as DynamicDrawUsage,am as EnvironmentNode,Mr as EqualCompare,Ut as EqualDepth,Vr as EqualStencilFunc,ep as EquirectUVNode,Y as EquirectangularReflectionMapping,Q as EquirectangularRefractionMapping,S as Euler,o as EventDispatcher,Du as ExpressionNode,ps as FileLoader,He as Float16BufferAttribute,Be as Float32BufferAttribute,L as FloatType,F as FramebufferTexture,Gl as FrontFacingNode,Xe as FrontSide,it as Frustum,st as FrustumArray,ta as FunctionCallNode,vx as FunctionNode,Of as FunctionOverloadingNode,H_ as GLSLNodeParser,Rr as GreaterCompare,It as GreaterDepth,Cr as GreaterEqualCompare,Vt as GreaterEqualDepth,Ir as GreaterEqualStencilFunc,Dr as GreaterStencilFunc,cs as Group,he as HalfFloatType,ss as HemisphereLight,I_ as HemisphereLightNode,eA as IESSpotLight,B_ as IESSpotLightNode,Wr as IncrementStencilOp,$r as IncrementWrapStencilOp,Ac as IndexNode,aA as IndirectStorageBufferAttribute,Bc as InstanceNode,M as InstancedBufferAttribute,C as InstancedInterleavedBuffer,Ic as InstancedMeshNode,T as IntType,m as InterleavedBuffer,f as InterleavedBufferAttribute,jr as InvertStencilOp,nh as IrradianceNode,Xs as JoinNode,Kr as KeepStencilOp,Ve as LessCompare,kt as LessDepth,Pr as LessEqualCompare,Ot as LessEqualDepth,Ur as LessEqualStencilFunc,Or as LessStencilFunc,is as LightProbe,V_ as LightProbeNode,sv as Lighting,sh as LightingContextNode,dp as LightingModel,th as LightingNode,ub as LightsNode,Yh as Line2NodeMaterial,U as LineBasicMaterial,$h as LineBasicNodeMaterial,O as LineDashedMaterial,Wh as LineDashedNodeMaterial,q as LinearFilter,Fe as LinearMipMapLinearFilter,B as LinearMipmapLinearFilter,ze as LinearMipmapNearestFilter,de as LinearSRGBColorSpace,ns as LinearToneMapping,hs as Loader,qc as LoopNode,Lf as MRTNode,bm as MatcapUVNode,I as Material,gs as MaterialLoader,Gd as MaterialNode,md as MaterialReferenceNode,u as MathUtils,i as Matrix2,n as Matrix3,a as Matrix4,Yr as MaxEquation,qu as MaxMipLevelNode,ri as MemberNode,W as Mesh,te as MeshBasicMaterial,pp as MeshBasicNodeMaterial,re as MeshLambertMaterial,Tp as MeshLambertNodeMaterial,ye as MeshMatcapMaterial,vm as MeshMatcapNodeMaterial,G as MeshNormalMaterial,Jh as MeshNormalNodeMaterial,se as MeshPhongMaterial,vp as MeshPhongNodeMaterial,me as MeshPhysicalMaterial,hm as MeshPhysicalNodeMaterial,gm as MeshSSSNodeMaterial,ge as MeshStandardMaterial,dm as MeshStandardNodeMaterial,fe as MeshToonMaterial,xm as MeshToonNodeMaterial,Qr as MinEquation,Nr as MirroredRepeatWrapping,J as MixOperation,_l as ModelNode,Jc as MorphNode,Lt as MultiplyBlending,ee as MultiplyOperation,_ as NearestFilter,$e as NearestMipmapLinearFilter,Er as NearestMipmapNearestFilter,ds as NeutralToneMapping,Fr as NeverCompare,zt as NeverDepth,Gr as NeverStencilFunc,k as NoBlending,x as NoColorSpace,p as NoToneMapping,Hs as Node,Us as NodeAccess,QT as NodeAttribute,w_ as NodeBuilder,s_ as NodeCache,t_ as NodeCode,E_ as NodeFrame,A_ as NodeFunctionInput,oA as NodeLoader,Gh as NodeMaterial,uA as NodeMaterialLoader,ys as NodeMaterialObserver,lA as NodeObjectLoader,Ds as NodeShaderStage,Vs as NodeType,ZT as NodeUniform,Is as NodeUpdateType,Bs as NodeUtils,JT as NodeVar,e_ as NodeVarying,V as NormalBlending,Bd as NormalMapNode,Ar as NotEqualCompare,Dt as NotEqualDepth,Br as NotEqualStencilFunc,Le as Object3D,gl as Object3DNode,ms as ObjectLoader,R as ObjectSpaceNormalMap,Rt as OneFactor,bt as OneMinusDstAlphaFactor,Tt as OneMinusDstColorFactor,_t as OneMinusSrcAlphaFactor,vt as OneMinusSrcColorFactor,ie as OrthographicCamera,Cf as OutputStructNode,rt as PCFShadowMap,Kg as PMREMGenerator,sm as PMREMNode,Sf as ParameterNode,ux as PassNode,ne as PerspectiveCamera,xp as PhongLightingModel,hg as PhysicalLightingModel,Pe as Plane,qe as PlaneGeometry,Jr as PointLight,Yb as PointLightNode,Ay as PointUVNode,be as PointsMaterial,Rm as PointsNodeMaterial,iA as PostProcessing,sx as PosterizeNode,hn as PropertyNode,xy as QuadMesh,Je as Quaternion,_r as RED_GREEN_RGTC2_Format,br as RED_RGTC1_Format,We as REVISION,ce as RGBAFormat,gt as RGBAIntegerFormat,mr as RGBA_ASTC_10x10_Format,hr as RGBA_ASTC_10x5_Format,pr as RGBA_ASTC_10x6_Format,gr as RGBA_ASTC_10x8_Format,fr as RGBA_ASTC_12x10_Format,yr as RGBA_ASTC_12x12_Format,ir as RGBA_ASTC_4x4_Format,nr as RGBA_ASTC_5x4_Format,ar as RGBA_ASTC_5x5_Format,or as RGBA_ASTC_6x5_Format,ur as RGBA_ASTC_6x6_Format,lr as RGBA_ASTC_8x5_Format,dr as RGBA_ASTC_8x6_Format,cr as RGBA_ASTC_8x8_Format,xr as RGBA_BPTC_Format,sr as RGBA_ETC2_EAC_Format,er as RGBA_PVRTC_2BPPV1_Format,Jt as RGBA_PVRTC_4BPPV1_Format,Xt as RGBA_S3TC_DXT1_Format,Kt as RGBA_S3TC_DXT3_Format,Yt as RGBA_S3TC_DXT5_Format,pt as RGBFormat,ht as RGBIntegerFormat,tr as RGB_ETC1_Format,rr as RGB_ETC2_Format,Zt as RGB_PVRTC_2BPPV1_Format,Qt as RGB_PVRTC_4BPPV1_Format,qt as RGB_S3TC_DXT1_Format,Ue as RGFormat,ct as RGIntegerFormat,Ty as RTTNode,Vx as RangeNode,ts as RectAreaLight,L_ as RectAreaLightNode,ot as RedFormat,at as RedIntegerFormat,hd as ReferenceNode,py as ReflectorNode,as as ReinhardToneMapping,Lu as RemapNode,Uu as RenderOutputNode,ae as RenderTarget,Ge as RenderTargetArray,fu as RendererReferenceNode,bb as RendererUtils,wr as RepeatWrapping,qr as ReplaceStencilOp,yt as ReverseSubtractEquation,Nm as RotateNode,vr as SIGNED_RED_GREEN_RGTC2_Format,Tr as SIGNED_RED_RGTC1_Format,z as SRGBColorSpace,h as SRGBTransfer,j as Scene,Py as SceneNode,uh as ScreenNode,Cx as ScriptableNode,Sx as ScriptableValueNode,Qs as SetNode,lb as ShadowBaseNode,Te as ShadowMaterial,Db as ShadowNode,Pm as ShadowNodeMaterial,ut as ShortType,Wc as SkinningNode,v as Sphere,ke as SphereGeometry,Ys as SplitNode,Zr as SpotLight,F_ as SpotLightNode,xe as SpriteMaterial,Em as SpriteNodeMaterial,Kf as SpriteSheetUVNode,Et as SrcAlphaFactor,wt as SrcAlphaSaturateFactor,At as SrcColorFactor,wf as StackNode,g as StaticDrawUsage,kc as StorageArrayElementNode,Ey as StorageBufferAttribute,zc as StorageBufferNode,wy as StorageInstancedBufferAttribute,nA as StorageTexture,Dy as StorageTextureNode,Rf as StructNode,Af as StructTypeNode,xt as SubtractEquation,Ft as SubtractiveBlending,WT as TSL,A as TangentSpaceNormalMap,qs as TempNode,pe as Texture,Uy as Texture3DNode,Ku as TextureNode,Wu as TextureSizeNode,xu as ToneMappingNode,lx as ToonOutlinePassNode,Qf as TriplanarTexturesNode,De as UVMapping,ve as Uint16BufferAttribute,_e as Uint32BufferAttribute,tl as UniformArrayNode,$n as UniformGroupNode,Kn as UniformNode,Me as UnsignedByteType,Ce as UnsignedInt248Type,Wt as UnsignedInt5999Type,b as UnsignedIntType,$t as UnsignedShort4444Type,Ht as UnsignedShort5551Type,dt as UnsignedShortType,ky as UserDataNode,Ie as VSMShadowMap,Qo as VarNode,ru as VaryingNode,t as Vector2,r as Vector3,s as Vector4,Oh as VertexColorNode,Eh as ViewportDepthNode,Sh as ViewportDepthTextureNode,qh as ViewportSharedTextureNode,Th as ViewportTextureNode,Im as VolumeNodeMaterial,l as WebGLCoordinateSystem,$ as WebGLCubeRenderTarget,d as WebGPUCoordinateSystem,rA as WebGPURenderer,et as WebXRController,Qe as ZeroFactor,Xr as ZeroStencilOp,ft as createCanvasElement,ks as defaultBuildStages,Os as defaultShaderStages,Gs as shaderStages,zs as vectorComponents};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
